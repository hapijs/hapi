/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['process.js']) {
  _$jscoverage['process.js'] = [];
  _$jscoverage['process.js'][8] = 0;
  _$jscoverage['process.js'][9] = 0;
  _$jscoverage['process.js'][10] = 0;
  _$jscoverage['process.js'][11] = 0;
  _$jscoverage['process.js'][16] = 0;
  _$jscoverage['process.js'][21] = 0;
  _$jscoverage['process.js'][26] = 0;
  _$jscoverage['process.js'][30] = 0;
  _$jscoverage['process.js'][34] = 0;
  _$jscoverage['process.js'][36] = 0;
  _$jscoverage['process.js'][37] = 0;
  _$jscoverage['process.js'][39] = 0;
  _$jscoverage['process.js'][41] = 0;
  _$jscoverage['process.js'][43] = 0;
  _$jscoverage['process.js'][52] = 0;
  _$jscoverage['process.js'][56] = 0;
  _$jscoverage['process.js'][58] = 0;
  _$jscoverage['process.js'][63] = 0;
  _$jscoverage['process.js'][65] = 0;
  _$jscoverage['process.js'][66] = 0;
  _$jscoverage['process.js'][68] = 0;
  _$jscoverage['process.js'][69] = 0;
  _$jscoverage['process.js'][73] = 0;
  _$jscoverage['process.js'][74] = 0;
  _$jscoverage['process.js'][80] = 0;
  _$jscoverage['process.js'][82] = 0;
}
_$jscoverage['process.js'][8]++;
var Os = require("os");
_$jscoverage['process.js'][9]++;
var Utils = require("./utils");
_$jscoverage['process.js'][10]++;
var Log = require("./log");
_$jscoverage['process.js'][11]++;
var Defaults = require("./defaults");
_$jscoverage['process.js'][16]++;
var internals = {};
_$jscoverage['process.js'][21]++;
exports.settings = null;
_$jscoverage['process.js'][26]++;
exports.initialize = (function (options) {
  _$jscoverage['process.js'][30]++;
  exports.settings = Utils.merge(Utils.clone(Defaults.process), options || {});
  _$jscoverage['process.js'][34]++;
  process.on("uncaughtException", (function (err) {
  _$jscoverage['process.js'][36]++;
  console.log(JSON.stringify(err));
  _$jscoverage['process.js'][37]++;
  Log.err("Uncaught exception: " + err.stack);
  _$jscoverage['process.js'][39]++;
  if (exports.settings.email.admin) {
    _$jscoverage['process.js'][41]++;
    Utils.email(exports.settings.email.admin, "ERROR: Exception on " + exports.settings.name + " server", err.stack, "", (function (err) {
  _$jscoverage['process.js'][43]++;
  process.exit(1);
}));
  }
}));
});
_$jscoverage['process.js'][52]++;
exports.finalize = (function (onCompleted) {
  _$jscoverage['process.js'][56]++;
  if (exports.settings.email.admin) {
    _$jscoverage['process.js'][58]++;
    Utils.email(exports.settings.email.admin, "NOTICE: " + exports.settings.name + " server started", "Started on " + Os.hostname());
  }
  _$jscoverage['process.js'][63]++;
  if (exports.settings.process.runAs) {
    _$jscoverage['process.js'][65]++;
    Log.info(exports.settings.name + " Server switching users from " + process.getuid() + " to " + exports.settings.process.runAs);
    _$jscoverage['process.js'][66]++;
    try {
      _$jscoverage['process.js'][68]++;
      process.setuid(exports.settings.process.runAs);
      _$jscoverage['process.js'][69]++;
      Log.info(exports.settings.name + " Server active user: " + process.getuid());
    }
    catch (err) {
      _$jscoverage['process.js'][73]++;
      Log.err("Failed setting uid: " + err);
      _$jscoverage['process.js'][74]++;
      process.exit(1);
    }
  }
  _$jscoverage['process.js'][80]++;
  if (onCompleted) {
    _$jscoverage['process.js'][82]++;
    onCompleted();
  }
});
_$jscoverage['process.js'].source = ["/*","* Copyright (c) 2012 Walmart. All rights reserved. Copyrights licensed under the New BSD License.","* See LICENSE file included with this code project for license terms.","*/","","// Load modules","","var Os = require('os');","var Utils = require('./utils');","var Log = require('./log');","var Defaults = require('./defaults');","","","// Declare internals","","var internals = {};","","","// Instance configuration","","exports.settings = null;","","","// Initialize process","","exports.initialize = function (options) {","","    // Set global configuration","","    exports.settings = Utils.merge(Utils.clone(Defaults.process), options || {});    // Must happen first to populate configuration required by other modules","","    // Listen to uncaught exceptions","","    process.on('uncaughtException', function (err) {","","        console.log(JSON.stringify(err));","        Log.err('Uncaught exception: ' + err.stack);","","        if (exports.settings.email.admin) {","","            Utils.email(exports.settings.email.admin, 'ERROR: Exception on ' + exports.settings.name + ' server', err.stack, '', function (err) {","","                process.exit(1);","            });","        }","    });","};","","","// Create and configure server instance","","exports.finalize = function (onCompleted) {","","    // Send startup email","","    if (exports.settings.email.admin) {","","        Utils.email(exports.settings.email.admin, 'NOTICE: ' + exports.settings.name + ' server started', 'Started on ' + Os.hostname());","    }","","    // Change OS User","","    if (exports.settings.process.runAs) {","","        Log.info(exports.settings.name + ' Server switching users from ' + process.getuid() + ' to ' + exports.settings.process.runAs);","        try {","","            process.setuid(exports.settings.process.runAs);","            Log.info(exports.settings.name + ' Server active user: ' + process.getuid());","        }","        catch (err) {","","            Log.err('Failed setting uid: ' + err);","            process.exit(1);","        }","    }","","    // onCompleted callback","","    if (onCompleted) {","","        onCompleted();","    }","};","",""];
