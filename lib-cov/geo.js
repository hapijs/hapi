/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['geo.js']) {
  _$jscoverage['geo.js'] = [];
  _$jscoverage['geo.js'][4] = 0;
  _$jscoverage['geo.js'][5] = 0;
  _$jscoverage['geo.js'][6] = 0;
  _$jscoverage['geo.js'][11] = 0;
  _$jscoverage['geo.js'][12] = 0;
  _$jscoverage['geo.js'][16] = 0;
  _$jscoverage['geo.js'][22] = 0;
  _$jscoverage['geo.js'][29] = 0;
  _$jscoverage['geo.js'][30] = 0;
  _$jscoverage['geo.js'][31] = 0;
  _$jscoverage['geo.js'][34] = 0;
  _$jscoverage['geo.js'][35] = 0;
  _$jscoverage['geo.js'][36] = 0;
  _$jscoverage['geo.js'][38] = 0;
  _$jscoverage['geo.js'][45] = 0;
  _$jscoverage['geo.js'][50] = 0;
  _$jscoverage['geo.js'][60] = 0;
  _$jscoverage['geo.js'][61] = 0;
  _$jscoverage['geo.js'][62] = 0;
  _$jscoverage['geo.js'][65] = 0;
  _$jscoverage['geo.js'][66] = 0;
  _$jscoverage['geo.js'][67] = 0;
  _$jscoverage['geo.js'][68] = 0;
  _$jscoverage['geo.js'][70] = 0;
  _$jscoverage['geo.js'][73] = 0;
  _$jscoverage['geo.js'][77] = 0;
  _$jscoverage['geo.js'][87] = 0;
  _$jscoverage['geo.js'][88] = 0;
  _$jscoverage['geo.js'][89] = 0;
  _$jscoverage['geo.js'][90] = 0;
  _$jscoverage['geo.js'][91] = 0;
  _$jscoverage['geo.js'][94] = 0;
  _$jscoverage['geo.js'][95] = 0;
  _$jscoverage['geo.js'][96] = 0;
  _$jscoverage['geo.js'][97] = 0;
  _$jscoverage['geo.js'][99] = 0;
  _$jscoverage['geo.js'][102] = 0;
  _$jscoverage['geo.js'][103] = 0;
  _$jscoverage['geo.js'][105] = 0;
}
_$jscoverage['geo.js'][4]++;
var geoip = require("geoip");
_$jscoverage['geo.js'][5]++;
var City = geoip.City;
_$jscoverage['geo.js'][6]++;
var Utils = require("./utils");
_$jscoverage['geo.js'][11]++;
function Geo(options) {
  _$jscoverage['geo.js'][12]++;
  this.options = Utils.merge({}, this._options, options || {});
  _$jscoverage['geo.js'][16]++;
  return this;
}
_$jscoverage['geo.js'][22]++;
Geo.prototype._options = {geodata: {}};
_$jscoverage['geo.js'][29]++;
Geo.prototype.lookupCity = (function (ip, callback) {
  _$jscoverage['geo.js'][30]++;
  if (typeof this.options.geodata.city === "undefined" || this.options.geodata.city == null) {
    _$jscoverage['geo.js'][31]++;
    return callback("options.geodata was not specified.");
  }
  _$jscoverage['geo.js'][34]++;
  var city = new City(this.options.geodata.city);
  _$jscoverage['geo.js'][35]++;
  city.lookup(ip_address, (function (err, data) {
  _$jscoverage['geo.js'][36]++;
  if (err) {
    _$jscoverage['geo.js'][36]++;
    return callback(err);
  }
  _$jscoverage['geo.js'][38]++;
  callback(null, data);
}));
});
_$jscoverage['geo.js'][45]++;
module.exports = exports = new Geo();
_$jscoverage['geo.js'][50]++;
exports.Geo = Geo;
_$jscoverage['geo.js'][60]++;
Monitor.prototype.get_geocity = (function () {
  _$jscoverage['geo.js'][61]++;
  if (typeof this.options.geodat !== "undefined" && this.options.geodata !== null) {
    _$jscoverage['geo.js'][62]++;
    if (path.existsSync(this.options.geodat)) {
      _$jscoverage['geo.js'][65]++;
      try {
        _$jscoverage['geo.js'][66]++;
        var geoip = require("geoip");
        _$jscoverage['geo.js'][67]++;
        var City = geoip.City;
        _$jscoverage['geo.js'][68]++;
        var city = new City(this.options.geodat);
      }
      catch (err) {
        _$jscoverage['geo.js'][70]++;
        return null;
      }
      _$jscoverage['geo.js'][73]++;
      return this.options.geodat;
    }
  }
  _$jscoverage['geo.js'][77]++;
  return null;
});
_$jscoverage['geo.js'][87]++;
Monitor.prototype.geolocate = (function (req, callback) {
  _$jscoverage['geo.js'][88]++;
  var ip_address = req.socket && (req.socket.remoteAddress || (req.socket.socket && req.socket.socket.remoteAddress));
  _$jscoverage['geo.js'][89]++;
  var geodat = this.get_geocity();
  _$jscoverage['geo.js'][90]++;
  if (! geodat) {
    _$jscoverage['geo.js'][91]++;
    return callback("Must configure a geodat file to use Monitor.geolocate()");
  }
  _$jscoverage['geo.js'][94]++;
  try {
    _$jscoverage['geo.js'][95]++;
    var geoip = require("geoip");
    _$jscoverage['geo.js'][96]++;
    var City = geoip.City;
    _$jscoverage['geo.js'][97]++;
    var city = new City(geodat);
  }
  catch (err) {
    _$jscoverage['geo.js'][99]++;
    return callback(err);
  }
  _$jscoverage['geo.js'][102]++;
  city.lookup(ip_address, (function (err, data) {
  _$jscoverage['geo.js'][103]++;
  if (err) {
    _$jscoverage['geo.js'][103]++;
    return callback(err);
  }
  _$jscoverage['geo.js'][105]++;
  callback(null, data);
}));
});
_$jscoverage['geo.js'].source = ["/**"," * Module dependencies."," */","var geoip = require(\"geoip\"); // This requires installing various third-party tools","var City = geoip.City;","var Utils = require(\"./utils\");","","/**"," *"," */","function Geo(options){","  this.options = Utils.merge({}, this._options, options || {});","  ","  // TODO: preload any configured data files","  ","  return this;","}","","/**"," *"," */","Geo.prototype._options = {","  geodata: {}, // Geodata file for use by geoip","}","","/**"," *"," */","Geo.prototype.lookupCity = function(ip, callback){","  if (typeof this.options.geodata.city === \"undefined\" || this.options.geodata.city == null){","    return callback(\"options.geodata was not specified.\");","  }","  ","  var city = new City(this.options.geodata.city);","  city.lookup(ip_address, function(err, data) {","    if (err) return callback(err);","    ","    callback(null, data);","  });","}","","/**"," * "," */","module.exports = exports = new Geo();","","/**"," *"," */","exports.Geo = Geo;","","","","// The following functions are deprecated, need refactor:","","","/**"," * Getter for geo dat file"," */","Monitor.prototype.get_geocity = function(){","  if (typeof this.options.geodat !== \"undefined\" &amp;&amp; this.options.geodata !== null) {","    if (path.existsSync(this.options.geodat)){","      ","      // TODO: move this into a loader","      try {","        var geoip = require(\"geoip\"); // requires ","        var City = geoip.City;","        var city = new City(this.options.geodat);","      } catch (err) {","        return null;","      }","      ","      return this.options.geodat;","    }","  }","  ","  return null;","}","","/**"," * Geolocate an incoming request"," *"," * @param {Object} req Express request object"," * @param {Function} callback function to process the result"," * @api public"," */","Monitor.prototype.geolocate = function(req, callback) {","  var ip_address = req.socket &amp;&amp; (req.socket.remoteAddress || (req.socket.socket &amp;&amp; req.socket.socket.remoteAddress));","  var geodat = this.get_geocity();","  if (!geodat) {","    return callback(\"Must configure a geodat file to use Monitor.geolocate()\");","  }","  ","  try {","    var geoip = require(\"geoip\"); // requires libgeoip c module","    var City = geoip.City;","    var city = new City(geodat);","  } catch (err) {","    return callback(err);","  }","  ","  city.lookup(ip_address, function(err, data) {","    if (err) return callback(err);","    ","    callback(null, data);","  });","}"];
