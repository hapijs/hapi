/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['base64.js']) {
  _$jscoverage['base64.js'] = [];
  _$jscoverage['base64.js'][10] = 0;
  _$jscoverage['base64.js'][26] = 0;
  _$jscoverage['base64.js'][28] = 0;
  _$jscoverage['base64.js'][30] = 0;
  _$jscoverage['base64.js'][31] = 0;
  _$jscoverage['base64.js'][32] = 0;
  _$jscoverage['base64.js'][34] = 0;
  _$jscoverage['base64.js'][36] = 0;
  _$jscoverage['base64.js'][38] = 0;
  _$jscoverage['base64.js'][40] = 0;
  _$jscoverage['base64.js'][41] = 0;
  _$jscoverage['base64.js'][42] = 0;
  _$jscoverage['base64.js'][43] = 0;
  _$jscoverage['base64.js'][46] = 0;
  _$jscoverage['base64.js'][48] = 0;
  _$jscoverage['base64.js'][50] = 0;
  _$jscoverage['base64.js'][51] = 0;
  _$jscoverage['base64.js'][52] = 0;
  _$jscoverage['base64.js'][53] = 0;
  _$jscoverage['base64.js'][54] = 0;
  _$jscoverage['base64.js'][57] = 0;
  _$jscoverage['base64.js'][59] = 0;
  _$jscoverage['base64.js'][60] = 0;
  _$jscoverage['base64.js'][61] = 0;
  _$jscoverage['base64.js'][62] = 0;
  _$jscoverage['base64.js'][65] = 0;
  _$jscoverage['base64.js'][71] = 0;
  _$jscoverage['base64.js'][73] = 0;
  _$jscoverage['base64.js'][75] = 0;
  _$jscoverage['base64.js'][76] = 0;
  _$jscoverage['base64.js'][77] = 0;
  _$jscoverage['base64.js'][79] = 0;
  _$jscoverage['base64.js'][81] = 0;
  _$jscoverage['base64.js'][83] = 0;
  _$jscoverage['base64.js'][87] = 0;
  _$jscoverage['base64.js'][89] = 0;
  _$jscoverage['base64.js'][92] = 0;
  _$jscoverage['base64.js'][94] = 0;
  _$jscoverage['base64.js'][98] = 0;
  _$jscoverage['base64.js'][100] = 0;
  _$jscoverage['base64.js'][103] = 0;
  _$jscoverage['base64.js'][105] = 0;
  _$jscoverage['base64.js'][107] = 0;
  _$jscoverage['base64.js'][108] = 0;
  _$jscoverage['base64.js'][110] = 0;
  _$jscoverage['base64.js'][113] = 0;
  _$jscoverage['base64.js'][117] = 0;
  _$jscoverage['base64.js'][119] = 0;
  _$jscoverage['base64.js'][122] = 0;
  _$jscoverage['base64.js'][124] = 0;
  _$jscoverage['base64.js'][126] = 0;
  _$jscoverage['base64.js'][127] = 0;
  _$jscoverage['base64.js'][129] = 0;
  _$jscoverage['base64.js'][132] = 0;
  _$jscoverage['base64.js'][136] = 0;
  _$jscoverage['base64.js'][138] = 0;
  _$jscoverage['base64.js'][141] = 0;
  _$jscoverage['base64.js'][144] = 0;
}
_$jscoverage['base64.js'][10]++;
var internals = {encodeChars: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", decodeChars: [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, -1, -1, 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -1, -1, -1, -1, -1, -1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, -1, -1, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -1, -1, -1, -1, -1]};
_$jscoverage['base64.js'][26]++;
exports.encode = (function (string) {
  _$jscoverage['base64.js'][28]++;
  var c1, c2, c3;
  _$jscoverage['base64.js'][30]++;
  var len = string.length;
  _$jscoverage['base64.js'][31]++;
  var i = 0;
  _$jscoverage['base64.js'][32]++;
  var result = "";
  _$jscoverage['base64.js'][34]++;
  while (i < len) {
    _$jscoverage['base64.js'][36]++;
    c1 = string.charCodeAt(i++) & 255;
    _$jscoverage['base64.js'][38]++;
    if (i === len) {
      _$jscoverage['base64.js'][40]++;
      result += internals.encodeChars.charAt(c1 >> 2);
      _$jscoverage['base64.js'][41]++;
      result += internals.encodeChars.charAt((c1 & 3) << 4);
      _$jscoverage['base64.js'][42]++;
      result += "===";
      _$jscoverage['base64.js'][43]++;
      break;
    }
    _$jscoverage['base64.js'][46]++;
    c2 = string.charCodeAt(i++);
    _$jscoverage['base64.js'][48]++;
    if (i === len) {
      _$jscoverage['base64.js'][50]++;
      result += internals.encodeChars.charAt(c1 >> 2);
      _$jscoverage['base64.js'][51]++;
      result += internals.encodeChars.charAt(((c1 & 3) << 4) | ((c2 & 240) >> 4));
      _$jscoverage['base64.js'][52]++;
      result += internals.encodeChars.charAt((c2 & 15) << 2);
      _$jscoverage['base64.js'][53]++;
      result += "=";
      _$jscoverage['base64.js'][54]++;
      break;
    }
    _$jscoverage['base64.js'][57]++;
    c3 = string.charCodeAt(i++);
    _$jscoverage['base64.js'][59]++;
    result += internals.encodeChars.charAt(c1 >> 2);
    _$jscoverage['base64.js'][60]++;
    result += internals.encodeChars.charAt(((c1 & 3) << 4) | ((c2 & 240) >> 4));
    _$jscoverage['base64.js'][61]++;
    result += internals.encodeChars.charAt(((c2 & 15) << 2) | ((c3 & 192) >> 6));
    _$jscoverage['base64.js'][62]++;
    result += internals.encodeChars.charAt(c3 & 63);
}
  _$jscoverage['base64.js'][65]++;
  return result;
});
_$jscoverage['base64.js'][71]++;
exports.decode = (function (string) {
  _$jscoverage['base64.js'][73]++;
  var c1, c2, c3, c4;
  _$jscoverage['base64.js'][75]++;
  var len = string.length;
  _$jscoverage['base64.js'][76]++;
  var i = 0;
  _$jscoverage['base64.js'][77]++;
  var result = "";
  _$jscoverage['base64.js'][79]++;
  while (i < len) {
    _$jscoverage['base64.js'][81]++;
    do {
      _$jscoverage['base64.js'][83]++;
      c1 = internals.decodeChars[string.charCodeAt(i++) & 255];
}
    while (i < len && c1 === -1);
    _$jscoverage['base64.js'][87]++;
    if (c1 === -1) {
      _$jscoverage['base64.js'][89]++;
      break;
    }
    _$jscoverage['base64.js'][92]++;
    do {
      _$jscoverage['base64.js'][94]++;
      c2 = internals.decodeChars[string.charCodeAt(i++) & 255];
}
    while (i < len && c2 === -1);
    _$jscoverage['base64.js'][98]++;
    if (c2 === -1) {
      _$jscoverage['base64.js'][100]++;
      break;
    }
    _$jscoverage['base64.js'][103]++;
    result += String.fromCharCode((c1 << 2) | ((c2 & 48) >> 4));
    _$jscoverage['base64.js'][105]++;
    do {
      _$jscoverage['base64.js'][107]++;
      c3 = string.charCodeAt(i++) & 255;
      _$jscoverage['base64.js'][108]++;
      if (c3 === 61) {
        _$jscoverage['base64.js'][110]++;
        return result;
      }
      _$jscoverage['base64.js'][113]++;
      c3 = internals.decodeChars[c3];
}
    while (i < len && c3 === -1);
    _$jscoverage['base64.js'][117]++;
    if (c3 === -1) {
      _$jscoverage['base64.js'][119]++;
      break;
    }
    _$jscoverage['base64.js'][122]++;
    result += String.fromCharCode(((c2 & 15) << 4) | ((c3 & 60) >> 2));
    _$jscoverage['base64.js'][124]++;
    do {
      _$jscoverage['base64.js'][126]++;
      c4 = string.charCodeAt(i++) & 255;
      _$jscoverage['base64.js'][127]++;
      if (c4 === 61) {
        _$jscoverage['base64.js'][129]++;
        return result;
      }
      _$jscoverage['base64.js'][132]++;
      c4 = internals.decodeChars[c4];
}
    while (i < len && c4 === -1);
    _$jscoverage['base64.js'][136]++;
    if (c4 === -1) {
      _$jscoverage['base64.js'][138]++;
      break;
    }
    _$jscoverage['base64.js'][141]++;
    result += String.fromCharCode(((c3 & 3) << 6) | c4);
}
  _$jscoverage['base64.js'][144]++;
  return result;
});
_$jscoverage['base64.js'].source = ["/*","* Copyright (c) 2012 Walmart. All rights reserved. Copyrights licensed under the New BSD License.","* See LICENSE file included with this code project for license terms.","*/","","// Adapted from: Version 1.0 12/25/99 Copyright (C) 1999 Masanao Izumo &lt;iz@onicos.co.jp&gt;","","// Declare internals","","var internals = {","","    encodeChars: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',","    decodeChars: [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,","                  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,","                  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, -1, -1, 63,","                  52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -1, -1, -1, -1, -1, -1,","                  -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,","                  15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, -1,","                  -1, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,","                  41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -1, -1, -1, -1, -1]","};","","","// Base64 encode","","exports.encode = function (string) {","","    var c1, c2, c3;","","    var len = string.length;","    var i = 0;","    var result = '';","","    while (i &lt; len) {","","        c1 = string.charCodeAt(i++) &amp; 0xff;","","        if (i === len) {","","            result += internals.encodeChars.charAt(c1 &gt;&gt; 2);","            result += internals.encodeChars.charAt((c1 &amp; 0x3) &lt;&lt; 4);","            result += '===';","            break;","        }","","        c2 = string.charCodeAt(i++);","","        if (i === len) {","","            result += internals.encodeChars.charAt(c1 &gt;&gt; 2);","            result += internals.encodeChars.charAt(((c1 &amp; 0x3) &lt;&lt; 4) | ((c2 &amp; 0xF0) &gt;&gt; 4));","            result += internals.encodeChars.charAt((c2 &amp; 0xF) &lt;&lt; 2);","            result += '=';","            break;","        }","","        c3 = string.charCodeAt(i++);","","        result += internals.encodeChars.charAt(c1 &gt;&gt; 2);","        result += internals.encodeChars.charAt(((c1 &amp; 0x3) &lt;&lt; 4) | ((c2 &amp; 0xF0) &gt;&gt; 4));","        result += internals.encodeChars.charAt(((c2 &amp; 0xF) &lt;&lt; 2) | ((c3 &amp; 0xC0) &gt;&gt; 6));","        result += internals.encodeChars.charAt(c3 &amp; 0x3F);","    }","","    return result;","};","","","// Base64 decode","","exports.decode = function (string) {","","    var c1, c2, c3, c4;","","    var len = string.length;","    var i = 0;","    var result = '';","","    while (i &lt; len) {","","        do {","","            c1 = internals.decodeChars[string.charCodeAt(i++) &amp; 0xff];","        }","        while (i &lt; len &amp;&amp; c1 === -1);","","        if (c1 === -1) {","","            break;","        }","","        do {","","            c2 = internals.decodeChars[string.charCodeAt(i++) &amp; 0xff];","        }","        while (i &lt; len &amp;&amp; c2 === -1);","","        if (c2 === -1) {","","            break;","        }","","        result += String.fromCharCode((c1 &lt;&lt; 2) | ((c2 &amp; 0x30) &gt;&gt; 4));","","        do {","","            c3 = string.charCodeAt(i++) &amp; 0xff;","            if (c3 === 61) {","","                return result;","            }","","            c3 = internals.decodeChars[c3];","        }","        while (i &lt; len &amp;&amp; c3 === -1);","","        if (c3 === -1) {","","            break;","        }","","        result += String.fromCharCode(((c2 &amp; 0XF) &lt;&lt; 4) | ((c3 &amp; 0x3C) &gt;&gt; 2));","","        do {","","            c4 = string.charCodeAt(i++) &amp; 0xff;","            if (c4 === 61) {","","                return result;","            }","","            c4 = internals.decodeChars[c4];","        }","        while (i &lt; len &amp;&amp; c4 === -1);","","        if (c4 === -1) {","","            break;","        }","","        result += String.fromCharCode(((c3 &amp; 0x03) &lt;&lt; 6) | c4);","    }","","    return result;","};"];
