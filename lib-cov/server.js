/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['server.js']) {
  _$jscoverage['server.js'] = [];
  _$jscoverage['server.js'][8] = 0;
  _$jscoverage['server.js'][9] = 0;
  _$jscoverage['server.js'][10] = 0;
  _$jscoverage['server.js'][11] = 0;
  _$jscoverage['server.js'][12] = 0;
  _$jscoverage['server.js'][13] = 0;
  _$jscoverage['server.js'][14] = 0;
  _$jscoverage['server.js'][15] = 0;
  _$jscoverage['server.js'][16] = 0;
  _$jscoverage['server.js'][17] = 0;
  _$jscoverage['server.js'][18] = 0;
  _$jscoverage['server.js'][19] = 0;
  _$jscoverage['server.js'][20] = 0;
  _$jscoverage['server.js'][21] = 0;
  _$jscoverage['server.js'][22] = 0;
  _$jscoverage['server.js'][23] = 0;
  _$jscoverage['server.js'][28] = 0;
  _$jscoverage['server.js'][38] = 0;
  _$jscoverage['server.js'][42] = 0;
  _$jscoverage['server.js'][60] = 0;
  _$jscoverage['server.js'][61] = 0;
  _$jscoverage['server.js'][62] = 0;
  _$jscoverage['server.js'][63] = 0;
  _$jscoverage['server.js'][67] = 0;
  _$jscoverage['server.js'][69] = 0;
  _$jscoverage['server.js'][74] = 0;
  _$jscoverage['server.js'][76] = 0;
  _$jscoverage['server.js'][78] = 0;
  _$jscoverage['server.js'][85] = 0;
  _$jscoverage['server.js'][86] = 0;
  _$jscoverage['server.js'][92] = 0;
  _$jscoverage['server.js'][94] = 0;
  _$jscoverage['server.js'][95] = 0;
  _$jscoverage['server.js'][100] = 0;
  _$jscoverage['server.js'][101] = 0;
  _$jscoverage['server.js'][107] = 0;
  _$jscoverage['server.js'][109] = 0;
  _$jscoverage['server.js'][111] = 0;
  _$jscoverage['server.js'][115] = 0;
  _$jscoverage['server.js'][116] = 0;
  _$jscoverage['server.js'][117] = 0;
  _$jscoverage['server.js'][124] = 0;
  _$jscoverage['server.js'][126] = 0;
  _$jscoverage['server.js'][132] = 0;
  _$jscoverage['server.js'][136] = 0;
  _$jscoverage['server.js'][141] = 0;
  _$jscoverage['server.js'][143] = 0;
  _$jscoverage['server.js'][144] = 0;
  _$jscoverage['server.js'][146] = 0;
  _$jscoverage['server.js'][152] = 0;
  _$jscoverage['server.js'][154] = 0;
  _$jscoverage['server.js'][155] = 0;
  _$jscoverage['server.js'][156] = 0;
  _$jscoverage['server.js'][157] = 0;
  _$jscoverage['server.js'][158] = 0;
  _$jscoverage['server.js'][159] = 0;
  _$jscoverage['server.js'][160] = 0;
  _$jscoverage['server.js'][165] = 0;
  _$jscoverage['server.js'][169] = 0;
  _$jscoverage['server.js'][171] = 0;
  _$jscoverage['server.js'][172] = 0;
  _$jscoverage['server.js'][177] = 0;
  _$jscoverage['server.js'][179] = 0;
  _$jscoverage['server.js'][194] = 0;
  _$jscoverage['server.js'][196] = 0;
  _$jscoverage['server.js'][205] = 0;
  _$jscoverage['server.js'][207] = 0;
  _$jscoverage['server.js'][209] = 0;
  _$jscoverage['server.js'][210] = 0;
  _$jscoverage['server.js'][212] = 0;
  _$jscoverage['server.js'][214] = 0;
  _$jscoverage['server.js'][222] = 0;
  _$jscoverage['server.js'][226] = 0;
  _$jscoverage['server.js'][228] = 0;
  _$jscoverage['server.js'][232] = 0;
  _$jscoverage['server.js'][234] = 0;
  _$jscoverage['server.js'][238] = 0;
  _$jscoverage['server.js'][240] = 0;
  _$jscoverage['server.js'][244] = 0;
  _$jscoverage['server.js'][246] = 0;
  _$jscoverage['server.js'][248] = 0;
  _$jscoverage['server.js'][251] = 0;
  _$jscoverage['server.js'][256] = 0;
  _$jscoverage['server.js'][257] = 0;
  _$jscoverage['server.js'][263] = 0;
  _$jscoverage['server.js'][264] = 0;
  _$jscoverage['server.js'][270] = 0;
  _$jscoverage['server.js'][271] = 0;
  _$jscoverage['server.js'][282] = 0;
  _$jscoverage['server.js'][284] = 0;
  _$jscoverage['server.js'][288] = 0;
  _$jscoverage['server.js'][289] = 0;
  _$jscoverage['server.js'][290] = 0;
  _$jscoverage['server.js'][291] = 0;
  _$jscoverage['server.js'][293] = 0;
  _$jscoverage['server.js'][295] = 0;
  _$jscoverage['server.js'][297] = 0;
  _$jscoverage['server.js'][298] = 0;
  _$jscoverage['server.js'][299] = 0;
  _$jscoverage['server.js'][304] = 0;
  _$jscoverage['server.js'][314] = 0;
  _$jscoverage['server.js'][315] = 0;
  _$jscoverage['server.js'][317] = 0;
  _$jscoverage['server.js'][319] = 0;
  _$jscoverage['server.js'][320] = 0;
  _$jscoverage['server.js'][322] = 0;
  _$jscoverage['server.js'][324] = 0;
  _$jscoverage['server.js'][326] = 0;
  _$jscoverage['server.js'][329] = 0;
  _$jscoverage['server.js'][333] = 0;
  _$jscoverage['server.js'][336] = 0;
  _$jscoverage['server.js'][338] = 0;
  _$jscoverage['server.js'][342] = 0;
  _$jscoverage['server.js'][345] = 0;
  _$jscoverage['server.js'][347] = 0;
  _$jscoverage['server.js'][349] = 0;
  _$jscoverage['server.js'][351] = 0;
  _$jscoverage['server.js'][355] = 0;
  _$jscoverage['server.js'][358] = 0;
  _$jscoverage['server.js'][362] = 0;
  _$jscoverage['server.js'][363] = 0;
  _$jscoverage['server.js'][366] = 0;
  _$jscoverage['server.js'][374] = 0;
  _$jscoverage['server.js'][376] = 0;
  _$jscoverage['server.js'][380] = 0;
  _$jscoverage['server.js'][381] = 0;
  _$jscoverage['server.js'][385] = 0;
  _$jscoverage['server.js'][387] = 0;
  _$jscoverage['server.js'][388] = 0;
  _$jscoverage['server.js'][390] = 0;
  _$jscoverage['server.js'][391] = 0;
  _$jscoverage['server.js'][400] = 0;
  _$jscoverage['server.js'][401] = 0;
  _$jscoverage['server.js'][402] = 0;
  _$jscoverage['server.js'][403] = 0;
  _$jscoverage['server.js'][415] = 0;
  _$jscoverage['server.js'][416] = 0;
  _$jscoverage['server.js'][424] = 0;
  _$jscoverage['server.js'][425] = 0;
  _$jscoverage['server.js'][435] = 0;
  _$jscoverage['server.js'][438] = 0;
  _$jscoverage['server.js'][439] = 0;
  _$jscoverage['server.js'][442] = 0;
  _$jscoverage['server.js'][444] = 0;
  _$jscoverage['server.js'][445] = 0;
  _$jscoverage['server.js'][448] = 0;
  _$jscoverage['server.js'][450] = 0;
  _$jscoverage['server.js'][451] = 0;
  _$jscoverage['server.js'][456] = 0;
  _$jscoverage['server.js'][457] = 0;
  _$jscoverage['server.js'][459] = 0;
  _$jscoverage['server.js'][460] = 0;
  _$jscoverage['server.js'][462] = 0;
  _$jscoverage['server.js'][464] = 0;
  _$jscoverage['server.js'][471] = 0;
  _$jscoverage['server.js'][473] = 0;
  _$jscoverage['server.js'][477] = 0;
  _$jscoverage['server.js'][479] = 0;
  _$jscoverage['server.js'][480] = 0;
  _$jscoverage['server.js'][482] = 0;
  _$jscoverage['server.js'][486] = 0;
  _$jscoverage['server.js'][492] = 0;
  _$jscoverage['server.js'][506] = 0;
  _$jscoverage['server.js'][508] = 0;
  _$jscoverage['server.js'][517] = 0;
  _$jscoverage['server.js'][524] = 0;
  _$jscoverage['server.js'][528] = 0;
  _$jscoverage['server.js'][534] = 0;
  _$jscoverage['server.js'][536] = 0;
  _$jscoverage['server.js'][538] = 0;
  _$jscoverage['server.js'][540] = 0;
  _$jscoverage['server.js'][541] = 0;
  _$jscoverage['server.js'][543] = 0;
  _$jscoverage['server.js'][547] = 0;
  _$jscoverage['server.js'][552] = 0;
  _$jscoverage['server.js'][553] = 0;
  _$jscoverage['server.js'][555] = 0;
  _$jscoverage['server.js'][557] = 0;
  _$jscoverage['server.js'][559] = 0;
  _$jscoverage['server.js'][563] = 0;
  _$jscoverage['server.js'][564] = 0;
  _$jscoverage['server.js'][572] = 0;
  _$jscoverage['server.js'][574] = 0;
  _$jscoverage['server.js'][575] = 0;
  _$jscoverage['server.js'][577] = 0;
  _$jscoverage['server.js'][581] = 0;
  _$jscoverage['server.js'][588] = 0;
  _$jscoverage['server.js'][592] = 0;
  _$jscoverage['server.js'][593] = 0;
  _$jscoverage['server.js'][597] = 0;
  _$jscoverage['server.js'][598] = 0;
  _$jscoverage['server.js'][600] = 0;
  _$jscoverage['server.js'][601] = 0;
  _$jscoverage['server.js'][605] = 0;
  _$jscoverage['server.js'][606] = 0;
  _$jscoverage['server.js'][608] = 0;
  _$jscoverage['server.js'][609] = 0;
  _$jscoverage['server.js'][611] = 0;
  _$jscoverage['server.js'][615] = 0;
  _$jscoverage['server.js'][616] = 0;
  _$jscoverage['server.js'][624] = 0;
  _$jscoverage['server.js'][626] = 0;
  _$jscoverage['server.js'][628] = 0;
  _$jscoverage['server.js'][638] = 0;
  _$jscoverage['server.js'][640] = 0;
  _$jscoverage['server.js'][641] = 0;
  _$jscoverage['server.js'][642] = 0;
  _$jscoverage['server.js'][643] = 0;
  _$jscoverage['server.js'][645] = 0;
  _$jscoverage['server.js'][647] = 0;
  _$jscoverage['server.js'][648] = 0;
  _$jscoverage['server.js'][651] = 0;
  _$jscoverage['server.js'][653] = 0;
  _$jscoverage['server.js'][656] = 0;
  _$jscoverage['server.js'][658] = 0;
  _$jscoverage['server.js'][660] = 0;
  _$jscoverage['server.js'][662] = 0;
  _$jscoverage['server.js'][664] = 0;
  _$jscoverage['server.js'][666] = 0;
  _$jscoverage['server.js'][670] = 0;
  _$jscoverage['server.js'][673] = 0;
  _$jscoverage['server.js'][675] = 0;
  _$jscoverage['server.js'][679] = 0;
  _$jscoverage['server.js'][681] = 0;
  _$jscoverage['server.js'][685] = 0;
  _$jscoverage['server.js'][689] = 0;
  _$jscoverage['server.js'][692] = 0;
  _$jscoverage['server.js'][693] = 0;
  _$jscoverage['server.js'][697] = 0;
  _$jscoverage['server.js'][702] = 0;
  _$jscoverage['server.js'][705] = 0;
  _$jscoverage['server.js'][709] = 0;
  _$jscoverage['server.js'][711] = 0;
  _$jscoverage['server.js'][715] = 0;
  _$jscoverage['server.js'][720] = 0;
  _$jscoverage['server.js'][725] = 0;
  _$jscoverage['server.js'][730] = 0;
  _$jscoverage['server.js'][735] = 0;
  _$jscoverage['server.js'][742] = 0;
  _$jscoverage['server.js'][745] = 0;
  _$jscoverage['server.js'][749] = 0;
  _$jscoverage['server.js'][750] = 0;
  _$jscoverage['server.js'][759] = 0;
  _$jscoverage['server.js'][764] = 0;
  _$jscoverage['server.js'][766] = 0;
  _$jscoverage['server.js'][768] = 0;
  _$jscoverage['server.js'][773] = 0;
  _$jscoverage['server.js'][774] = 0;
  _$jscoverage['server.js'][775] = 0;
  _$jscoverage['server.js'][777] = 0;
  _$jscoverage['server.js'][779] = 0;
  _$jscoverage['server.js'][781] = 0;
  _$jscoverage['server.js'][783] = 0;
  _$jscoverage['server.js'][787] = 0;
  _$jscoverage['server.js'][792] = 0;
  _$jscoverage['server.js'][793] = 0;
  _$jscoverage['server.js'][796] = 0;
  _$jscoverage['server.js'][801] = 0;
  _$jscoverage['server.js'][802] = 0;
  _$jscoverage['server.js'][804] = 0;
  _$jscoverage['server.js'][805] = 0;
  _$jscoverage['server.js'][807] = 0;
  _$jscoverage['server.js'][809] = 0;
  _$jscoverage['server.js'][813] = 0;
  _$jscoverage['server.js'][814] = 0;
  _$jscoverage['server.js'][818] = 0;
  _$jscoverage['server.js'][820] = 0;
  _$jscoverage['server.js'][822] = 0;
  _$jscoverage['server.js'][825] = 0;
  _$jscoverage['server.js'][827] = 0;
  _$jscoverage['server.js'][829] = 0;
  _$jscoverage['server.js'][831] = 0;
  _$jscoverage['server.js'][833] = 0;
  _$jscoverage['server.js'][835] = 0;
  _$jscoverage['server.js'][839] = 0;
  _$jscoverage['server.js'][842] = 0;
  _$jscoverage['server.js'][851] = 0;
  _$jscoverage['server.js'][853] = 0;
  _$jscoverage['server.js'][855] = 0;
  _$jscoverage['server.js'][857] = 0;
  _$jscoverage['server.js'][858] = 0;
  _$jscoverage['server.js'][860] = 0;
  _$jscoverage['server.js'][862] = 0;
  _$jscoverage['server.js'][866] = 0;
  _$jscoverage['server.js'][870] = 0;
  _$jscoverage['server.js'][877] = 0;
  _$jscoverage['server.js'][879] = 0;
  _$jscoverage['server.js'][880] = 0;
  _$jscoverage['server.js'][882] = 0;
  _$jscoverage['server.js'][884] = 0;
  _$jscoverage['server.js'][888] = 0;
  _$jscoverage['server.js'][889] = 0;
  _$jscoverage['server.js'][895] = 0;
  _$jscoverage['server.js'][896] = 0;
  _$jscoverage['server.js'][899] = 0;
  _$jscoverage['server.js'][902] = 0;
  _$jscoverage['server.js'][903] = 0;
}
_$jscoverage['server.js'][8]++;
var Fs = require("fs");
_$jscoverage['server.js'][9]++;
var Http = require("http");
_$jscoverage['server.js'][10]++;
var Https = require("https");
_$jscoverage['server.js'][11]++;
var Url = require("url");
_$jscoverage['server.js'][12]++;
var Querystring = require("querystring");
_$jscoverage['server.js'][13]++;
var Director = require("director");
_$jscoverage['server.js'][14]++;
var MAC = require("mac");
_$jscoverage['server.js'][15]++;
var Utils = require("./utils");
_$jscoverage['server.js'][16]++;
var Err = require("./error");
_$jscoverage['server.js'][17]++;
var Log = require("./log");
_$jscoverage['server.js'][18]++;
var Process = require("./process");
_$jscoverage['server.js'][19]++;
var Validation = require("./validation");
_$jscoverage['server.js'][20]++;
var Defaults = require("./defaults");
_$jscoverage['server.js'][21]++;
var Fs = require("fs");
_$jscoverage['server.js'][22]++;
var Monitor = require("./monitor");
_$jscoverage['server.js'][23]++;
var Session = require("./session");
_$jscoverage['server.js'][28]++;
var internals = {servers: {}};
_$jscoverage['server.js'][38]++;
exports.create = (function (host, port, options, routes) {
  _$jscoverage['server.js'][42]++;
  var server = {settings: Utils.merge(Utils.clone(Defaults.server), options || {}), express: null, monitor: null, listener: null, router: null, initialize: (function () {
  _$jscoverage['server.js'][60]++;
  server.settings.host = host.toLowerCase();
  _$jscoverage['server.js'][61]++;
  server.settings.port = port;
  _$jscoverage['server.js'][62]++;
  server.settings.name = (server.settings.name? server.settings.name.toLowerCase(): (server.settings.host + ":" + server.settings.port));
  _$jscoverage['server.js'][63]++;
  server.settings.uri = (server.settings.tls? "https://": "http://") + server.settings.host + ":" + server.settings.port + "/";
  _$jscoverage['server.js'][67]++;
  if (server.settings.monitor && server.settings.monitor.log && Object.keys(server.settings.monitor.log).length > 0) {
    _$jscoverage['server.js'][69]++;
    Log.externalStores = server.settings.monitor.log;
  }
  _$jscoverage['server.js'][74]++;
  if (server.settings.authentication) {
    _$jscoverage['server.js'][76]++;
    server.settings.authentication = Utils.merge(Utils.clone(Defaults.authentication), server.settings.authentication);
    _$jscoverage['server.js'][78]++;
    if (server.settings.authentication.tokenEndpoint === null || server.settings.authentication.loadClientFunc === null || server.settings.authentication.loadUserFunc === null || server.settings.authentication.checkAuthorizationFunc === null || server.settings.authentication.aes256Keys.oauthRefresh === null || server.settings.authentication.aes256Keys.oauthToken === null) {
      _$jscoverage['server.js'][85]++;
      Log.err("Invalid authentication configuration");
      _$jscoverage['server.js'][86]++;
      process.exit(1);
    }
  }
  _$jscoverage['server.js'][92]++;
  if (internals.servers[server.settings.name]) {
    _$jscoverage['server.js'][94]++;
    Log.err("Cannot configure multiple server instances using the same name or uri");
    _$jscoverage['server.js'][95]++;
    process.exit(1);
  }
  _$jscoverage['server.js'][100]++;
  server.router = new Director.http.Router();
  _$jscoverage['server.js'][101]++;
  server.router.configure({async: true, notfound: server.unhandledRoute});
  _$jscoverage['server.js'][107]++;
  var listernerEntryFunc = (function (req, res) {
  _$jscoverage['server.js'][109]++;
  server.router.dispatch(req, res, (function (err) {
  _$jscoverage['server.js'][111]++;
  if (err) {
    _$jscoverage['server.js'][115]++;
    Log.err("Internal routing error");
    _$jscoverage['server.js'][116]++;
    res.writeHead(500);
    _$jscoverage['server.js'][117]++;
    res.end();
  }
}));
});
  _$jscoverage['server.js'][124]++;
  if (server.settings.tls) {
    _$jscoverage['server.js'][126]++;
    var tls = {key: Fs.readFileSync(server.settings.tls.key), cert: Fs.readFileSync(server.settings.tls.cert)};
    _$jscoverage['server.js'][132]++;
    server.listener = Https.createServer(tls, listernerEntryFunc);
  }
  else {
    _$jscoverage['server.js'][136]++;
    server.listener = Http.createServer(listernerEntryFunc);
  }
  _$jscoverage['server.js'][141]++;
  if (Object.keys(server.settings.monitor).length > 0) {
    _$jscoverage['server.js'][143]++;
    server.monitor = new Monitor(server);
    _$jscoverage['server.js'][144]++;
    server.express.configure((function () {
  _$jscoverage['server.js'][146]++;
  server.express.use(server.monitor.logger());
}));
  }
  _$jscoverage['server.js'][152]++;
  server.express.configure((function () {
  _$jscoverage['server.js'][154]++;
  server.express.use(server.settings.ext.onPreRoute);
  _$jscoverage['server.js'][155]++;
  server.express.use(server.preRoute);
  _$jscoverage['server.js'][156]++;
  server.express.use(server.settings.ext.onPreHandler);
  _$jscoverage['server.js'][157]++;
  server.express.use(server.express.router);
  _$jscoverage['server.js'][158]++;
  server.express.use(server.settings.ext.onPostHandler);
  _$jscoverage['server.js'][159]++;
  server.express.use(server.postRoute);
  _$jscoverage['server.js'][160]++;
  server.express.use(server.settings.ext.onPostRoute);
}));
  _$jscoverage['server.js'][165]++;
  internals.servers[server.settings.name] = server;
  _$jscoverage['server.js'][169]++;
  server.router.options(/.+/, (function () {
  _$jscoverage['server.js'][171]++;
  server.setCorsHeaders(this.res);
  _$jscoverage['server.js'][172]++;
  internals.respond(this.res, 200);
}));
  _$jscoverage['server.js'][177]++;
  if (server.settings.authentication) {
    _$jscoverage['server.js'][179]++;
    server["public"].addRoute({method: "POST", path: server.settings.authentication.tokenEndpoint, handler: Session.token, schema: Session.type.endpoint, mode: "raw", authentication: "optional", user: "any", tos: "none"});
  }
  _$jscoverage['server.js'][194]++;
  if (routes) {
    _$jscoverage['server.js'][196]++;
    server["public"].addRoutes(routes);
  }
}), preRoute: (function (req, res, next) {
  _$jscoverage['server.js'][205]++;
  req._startTime = new Date();
  _$jscoverage['server.js'][207]++;
  Log.info("Received", req);
  _$jscoverage['server.js'][209]++;
  req.hapi = {};
  _$jscoverage['server.js'][210]++;
  res.hapi = {};
  _$jscoverage['server.js'][212]++;
  req.query = req.url.indexOf("?") >= 0? Url.parse(req.url, true).query: {};
  _$jscoverage['server.js'][214]++;
  next();
}), routeValidator: (function (config) {
  _$jscoverage['server.js'][222]++;
  return (function (req, res, next) {
  _$jscoverage['server.js'][226]++;
  internals.authenticate(req, res, config, server, (function (err) {
  _$jscoverage['server.js'][228]++;
  if (err === null) {
    _$jscoverage['server.js'][232]++;
    Validation.validateQuery(req, config.query? Utils.map(config.query): null, (function (err) {
  _$jscoverage['server.js'][234]++;
  if (err === null) {
    _$jscoverage['server.js'][238]++;
    internals.processBody(req, config.payload || (config.schema? "parse": null), server, (function (err) {
  _$jscoverage['server.js'][240]++;
  if (err === null) {
    _$jscoverage['server.js'][244]++;
    Validation.validateData(req, config.schema || null, (function (err) {
  _$jscoverage['server.js'][246]++;
  if (err) {
    _$jscoverage['server.js'][248]++;
    res.hapi.error = err;
  }
  _$jscoverage['server.js'][251]++;
  next();
}));
  }
  else {
    _$jscoverage['server.js'][256]++;
    res.hapi.error = err;
    _$jscoverage['server.js'][257]++;
    next();
  }
}));
  }
  else {
    _$jscoverage['server.js'][263]++;
    res.hapi.error = err;
    _$jscoverage['server.js'][264]++;
    next();
  }
}));
  }
  else {
    _$jscoverage['server.js'][270]++;
    res.hapi.error = err;
    _$jscoverage['server.js'][271]++;
    next();
  }
}));
});
}), routeHandler: (function (config) {
  _$jscoverage['server.js'][282]++;
  return (function (req, res, next) {
  _$jscoverage['server.js'][284]++;
  if (! res.hapi.error) {
    _$jscoverage['server.js'][288]++;
    req.hapi.url = req.url;
    _$jscoverage['server.js'][289]++;
    req.hapi.query = req.query;
    _$jscoverage['server.js'][290]++;
    req.hapi.params = req.params;
    _$jscoverage['server.js'][291]++;
    req.hapi.server = server;
    _$jscoverage['server.js'][293]++;
    var request = (config.mode === "raw"? req: req.hapi);
    _$jscoverage['server.js'][295]++;
    config.handler(request, (function (result, options) {
  _$jscoverage['server.js'][297]++;
  res.hapi[result instanceof Error? "error": "result"] = result;
  _$jscoverage['server.js'][298]++;
  res.hapi.options = options || {};
  _$jscoverage['server.js'][299]++;
  next();
}));
  }
  else {
    _$jscoverage['server.js'][304]++;
    next();
  }
});
}), postRoute: (function (req, res, next) {
  _$jscoverage['server.js'][314]++;
  server.setCorsHeaders(res);
  _$jscoverage['server.js'][315]++;
  res.setHeader("Cache-Control", "must-revalidate");
  _$jscoverage['server.js'][317]++;
  if (res.hapi.result) {
    _$jscoverage['server.js'][319]++;
    var rev = null;
    _$jscoverage['server.js'][320]++;
    if (req.method === "GET" && rev) {
      _$jscoverage['server.js'][322]++;
      res.setHeader("ETag", rev);
      _$jscoverage['server.js'][324]++;
      var condition = internals.parseCondition(req.headers["if-none-match"]);
      _$jscoverage['server.js'][326]++;
      if (condition[rev] || condition["*"]) {
        _$jscoverage['server.js'][329]++;
        internals.respond(res, 304);
      }
      else {
        _$jscoverage['server.js'][333]++;
        internals.respond(res, 200, res.hapi.result);
      }
    }
    else {
      _$jscoverage['server.js'][336]++;
      if (res.hapi.options.created) {
        _$jscoverage['server.js'][338]++;
        internals.respond(res, 201, res.hapi.result, {"Location": server.settings.uri + res.hapi.options.created});
      }
      else {
        _$jscoverage['server.js'][342]++;
        internals.respond(res, 200, res.hapi.result);
      }
    }
    _$jscoverage['server.js'][345]++;
    Log.info("Replied", req);
  }
  else {
    _$jscoverage['server.js'][347]++;
    if (req.hapi.error) {
      _$jscoverage['server.js'][349]++;
      if (req.hapi.error.type === "oauth") {
        _$jscoverage['server.js'][351]++;
        internals.respond(res, req.hapi.error.code, {error: req.hapi.error.error, error_description: req.hapi.error.text});
      }
      else {
        _$jscoverage['server.js'][355]++;
        internals.respond(res, req.hapi.error.code, {error: req.hapi.error.text, message: req.hapi.error.message, code: req.hapi.error.code});
      }
      _$jscoverage['server.js'][358]++;
      Log.err(res.hapi.error, req);
    }
    else {
      _$jscoverage['server.js'][362]++;
      internals.respond(res, 200);
      _$jscoverage['server.js'][363]++;
      Log.info("Replied", req);
    }
  }
  _$jscoverage['server.js'][366]++;
  next();
}), unhandledRoute: (function (next) {
  _$jscoverage['server.js'][374]++;
  this.req._startTime = new Date();
  _$jscoverage['server.js'][376]++;
  if (server.settings.ext.onUnknownRoute) {
    _$jscoverage['server.js'][380]++;
    server.settings.ext.onUnknownRoute(this.req, this.res);
    _$jscoverage['server.js'][381]++;
    next();
  }
  else {
    _$jscoverage['server.js'][385]++;
    Log.info("Received", this.req);
    _$jscoverage['server.js'][387]++;
    var error = Err.notFound("No such path or method");
    _$jscoverage['server.js'][388]++;
    internals.respond(this.res, error.code, {error: error.text, message: error.message, code: error.code});
    _$jscoverage['server.js'][390]++;
    Log.info(error, this.req);
    _$jscoverage['server.js'][391]++;
    next();
  }
}), setCorsHeaders: (function (res) {
  _$jscoverage['server.js'][400]++;
  res.setHeader("Access-Control-Allow-Origin", "*");
  _$jscoverage['server.js'][401]++;
  res.setHeader("Access-Control-Allow-Methods", "GET, HEAD, POST, PUT, DELETE, OPTIONS");
  _$jscoverage['server.js'][402]++;
  res.setHeader("Access-Control-Allow-Headers", "Authorization, Content-Type, If-None-Match");
  _$jscoverage['server.js'][403]++;
  res.setHeader("Access-Control-Max-Age", server.settings.cors.maxAge);
}), public: {start: (function () {
  _$jscoverage['server.js'][415]++;
  server.listener.listen(server.settings.port, server.settings.host);
  _$jscoverage['server.js'][416]++;
  Log.info(Process.settings.name + " Server instance started at " + server.settings.uri);
}), stop: (function () {
  _$jscoverage['server.js'][424]++;
  server.listener.close();
  _$jscoverage['server.js'][425]++;
  Log.info(Process.settings.name + " Server instance stopped at " + server.settings.uri);
}), addRoute: (function (config) {
  _$jscoverage['server.js'][435]++;
  if (config.authentication !== "none" && server.settings.authentication === null) {
    _$jscoverage['server.js'][438]++;
    Log.err("Route requires authentication but none configured");
    _$jscoverage['server.js'][439]++;
    process.exit(1);
  }
  _$jscoverage['server.js'][442]++;
  if (! config.path) {
    _$jscoverage['server.js'][444]++;
    Log.err("Route missing path");
    _$jscoverage['server.js'][445]++;
    process.exit(1);
  }
  _$jscoverage['server.js'][448]++;
  if (! config.handler) {
    _$jscoverage['server.js'][450]++;
    Log.err("Route missing handler");
    _$jscoverage['server.js'][451]++;
    process.exit(1);
  }
  _$jscoverage['server.js'][456]++;
  var parameterNames = [];
  _$jscoverage['server.js'][457]++;
  if (/\*|\(|\)/.test(config.path) === false) {
    _$jscoverage['server.js'][459]++;
    var names = config.path.match(/:([^\/]+)/gi);
    _$jscoverage['server.js'][460]++;
    if (names) {
      _$jscoverage['server.js'][462]++;
      for (var i = 0, il = names.length; i < il; ++i) {
        _$jscoverage['server.js'][464]++;
        parameterNames.push(names[i].slice(1));
}
    }
  }
  _$jscoverage['server.js'][471]++;
  var wrapper = (function (func) {
  _$jscoverage['server.js'][473]++;
  return (function () {
  _$jscoverage['server.js'][477]++;
  if (arguments.length - 1 === parameterNames.length) {
    _$jscoverage['server.js'][479]++;
    this.req.params = {};
    _$jscoverage['server.js'][480]++;
    for (var i = 0, il = parameterNames.length; i < il; ++i) {
      _$jscoverage['server.js'][482]++;
      this.req.params[parameterNames[i]] = arguments[i];
}
  }
  _$jscoverage['server.js'][486]++;
  func(this.req, this.res, arguments[arguments.length - 1]);
});
});
  _$jscoverage['server.js'][492]++;
  server.router[config.method.toLowerCase()](config.path, {stream: true}, [wrapper(server.settings.ext.onPreRoute), wrapper(server.preRoute), wrapper(server.routeValidator(config)), wrapper(server.settings.ext.onPreHandler), wrapper(server.routeHandler(config)), wrapper(server.settings.ext.onPostHandler), wrapper(server.postRoute), wrapper(server.settings.ext.onPostRoute)]);
}), addRoutes: (function (routes) {
  _$jscoverage['server.js'][506]++;
  for (var i = 0, il = routes.length; i < il; ++i) {
    _$jscoverage['server.js'][508]++;
    server["public"].addRoute(routes[i]);
}
}), getListener: (function () {
  _$jscoverage['server.js'][517]++;
  return server.listener;
})}};
  _$jscoverage['server.js'][524]++;
  server.initialize();
  _$jscoverage['server.js'][528]++;
  return server["public"];
});
_$jscoverage['server.js'][534]++;
exports.instance = (function (name) {
  _$jscoverage['server.js'][536]++;
  if (name) {
    _$jscoverage['server.js'][538]++;
    name = name.toLowerCase();
    _$jscoverage['server.js'][540]++;
    var server = internals.servers[name];
    _$jscoverage['server.js'][541]++;
    if (server) {
      _$jscoverage['server.js'][543]++;
      return server;
    }
    else {
      _$jscoverage['server.js'][547]++;
      return null;
    }
  }
  else {
    _$jscoverage['server.js'][552]++;
    var names = Object.keys(internals.servers);
    _$jscoverage['server.js'][553]++;
    if (names.length === 1) {
      _$jscoverage['server.js'][555]++;
      return internals.servers[names[0]];
    }
    else {
      _$jscoverage['server.js'][557]++;
      if (names.length === 0) {
        _$jscoverage['server.js'][559]++;
        return null;
      }
      else {
        _$jscoverage['server.js'][563]++;
        Log.err("Cannot call Server.instance() without uri in a process with multiple server instances");
        _$jscoverage['server.js'][564]++;
        process.exit(1);
      }
    }
  }
});
_$jscoverage['server.js'][572]++;
exports.settings = (function (name) {
  _$jscoverage['server.js'][574]++;
  var server = exports.instance(name);
  _$jscoverage['server.js'][575]++;
  if (server) {
    _$jscoverage['server.js'][577]++;
    return server.settings;
  }
  else {
    _$jscoverage['server.js'][581]++;
    return null;
  }
});
_$jscoverage['server.js'][588]++;
exports.addRoutes = (function (arg0, arg1) {
  _$jscoverage['server.js'][592]++;
  var defaultInstances = (arguments.length === 2? (arguments[0] instanceof Array? arguments[0]: [arguments[0]]): null);
  _$jscoverage['server.js'][593]++;
  var routes = (arguments.length === 2? arguments[1]: arguments[0]);
  _$jscoverage['server.js'][597]++;
  routes = (routes instanceof Array? routes: [routes]);
  _$jscoverage['server.js'][598]++;
  for (var i = 0, il = routes.length; i < il; ++i) {
    _$jscoverage['server.js'][600]++;
    var route = routes[i];
    _$jscoverage['server.js'][601]++;
    if (route.instance || defaultInstances) {
      _$jscoverage['server.js'][605]++;
      var instances = (route.instance? (route.instance instanceof Array? route.instance: [route.instance]): defaultInstances);
      _$jscoverage['server.js'][606]++;
      for (var r = 0, rl = instances.length; r < rl; ++r) {
        _$jscoverage['server.js'][608]++;
        var server = internals.servers[instances[r].toLowerCase()];
        _$jscoverage['server.js'][609]++;
        if (server) {
          _$jscoverage['server.js'][611]++;
          server["public"].addRoute(route);
        }
        else {
          _$jscoverage['server.js'][615]++;
          Log.err("Cannot find server instance: " + instances[r]);
          _$jscoverage['server.js'][616]++;
          process.exit(1);
        }
}
    }
    else {
      _$jscoverage['server.js'][624]++;
      for (var s in internals.servers) {
        _$jscoverage['server.js'][626]++;
        if (internals.servers.hasOwnProperty(s)) {
          _$jscoverage['server.js'][628]++;
          internals.servers[s]["public"].addRoute(route);
        }
}
    }
}
});
_$jscoverage['server.js'][638]++;
internals.authenticate = (function (req, res, routeConfig, server, callback) {
  _$jscoverage['server.js'][640]++;
  var scope = routeConfig.scope || null;
  _$jscoverage['server.js'][641]++;
  var minTos = routeConfig.tos || server.settings.tos.min;
  _$jscoverage['server.js'][642]++;
  var userMode = routeConfig.user || "required";
  _$jscoverage['server.js'][643]++;
  var isOptional = (routeConfig.authentication === "optional");
  _$jscoverage['server.js'][645]++;
  if (routeConfig.authentication === "none") {
    _$jscoverage['server.js'][647]++;
    callback(null);
    _$jscoverage['server.js'][648]++;
    return;
  }
  _$jscoverage['server.js'][651]++;
  var loadTokenFunc = (function (token, callback) {
  _$jscoverage['server.js'][653]++;
  Session.loadToken(server.settings.authentication.aes256Keys.oauthToken, token, callback);
});
  _$jscoverage['server.js'][656]++;
  MAC.authenticate(req, loadTokenFunc, {isHTTPS: server.settings.tls}, (function (isAuthenticated, session, err) {
  _$jscoverage['server.js'][658]++;
  if (isAuthenticated) {
    _$jscoverage['server.js'][660]++;
    if (session) {
      _$jscoverage['server.js'][662]++;
      req.hapi.session = session;
      _$jscoverage['server.js'][664]++;
      if (session.client) {
        _$jscoverage['server.js'][666]++;
        req.hapi.clientId = session.client;
        _$jscoverage['server.js'][670]++;
        if (scope === null || session.scope[scope]) {
          _$jscoverage['server.js'][673]++;
          req.hapi.scope = session.scope;
          _$jscoverage['server.js'][675]++;
          if (userMode === "any") {
            _$jscoverage['server.js'][679]++;
            callback(null);
          }
          else {
            _$jscoverage['server.js'][681]++;
            if (userMode === "required") {
              _$jscoverage['server.js'][685]++;
              if (session.user) {
                _$jscoverage['server.js'][689]++;
                if (minTos === "none" || (session.tos && session.tos >= minTos)) {
                  _$jscoverage['server.js'][692]++;
                  req.hapi.userId = session.user;
                  _$jscoverage['server.js'][693]++;
                  callback(null);
                }
                else {
                  _$jscoverage['server.js'][697]++;
                  callback(Err.forbidden("Insufficient TOS accepted"));
                }
              }
              else {
                _$jscoverage['server.js'][702]++;
                callback(Err.forbidden("Client token cannot be used on a user endpoint"));
              }
            }
            else {
              _$jscoverage['server.js'][705]++;
              if (userMode === "none") {
                _$jscoverage['server.js'][709]++;
                if (session.user) {
                  _$jscoverage['server.js'][711]++;
                  callback(Err.forbidden("User token cannot be used on a client endpoint"));
                }
                else {
                  _$jscoverage['server.js'][715]++;
                  callback(null);
                }
              }
              else {
                _$jscoverage['server.js'][720]++;
                callback(Err.internal("Unknown endpoint user mode"));
              }
            }
          }
        }
        else {
          _$jscoverage['server.js'][725]++;
          callback(Err.forbidden("Insufficient token scope ('" + scope + "' expected for client " + session.client + ")"));
        }
      }
      else {
        _$jscoverage['server.js'][730]++;
        callback(Err.internal("Missing client identifier in authenticated token"));
      }
    }
    else {
      _$jscoverage['server.js'][735]++;
      callback(Err.internal("Missing user object in authenticated token"));
    }
  }
  else {
    _$jscoverage['server.js'][742]++;
    if (isOptional && ! req.headers.authorization) {
      _$jscoverage['server.js'][745]++;
      callback(null);
    }
    else {
      _$jscoverage['server.js'][749]++;
      res.setHeader("WWW-Authenticate", MAC.getWWWAuthenticateHeader(err));
      _$jscoverage['server.js'][750]++;
      callback(Err.generic(401, "Invalid authentication", err));
    }
  }
}));
});
_$jscoverage['server.js'][759]++;
internals.processBody = (function (req, level, server, callback) {
  _$jscoverage['server.js'][764]++;
  level = level || (req.method === "POST" || req.method === "PUT"? "parse": "none");
  _$jscoverage['server.js'][766]++;
  if (level === "none") {
    _$jscoverage['server.js'][768]++;
    return callback(null);
  }
  _$jscoverage['server.js'][773]++;
  var contentType = req.headers["content-type"];
  _$jscoverage['server.js'][774]++;
  var mime = (contentType? contentType.split(";")[0]: "application/json");
  _$jscoverage['server.js'][775]++;
  var parserFunc = null;
  _$jscoverage['server.js'][777]++;
  if (mime === "application/json") {
    _$jscoverage['server.js'][779]++;
    parserFunc = JSON.parse;
  }
  else {
    _$jscoverage['server.js'][781]++;
    if (mime === "application/x-www-form-urlencoded") {
      _$jscoverage['server.js'][783]++;
      parserFunc = Querystring.parse;
    }
    else {
      _$jscoverage['server.js'][787]++;
      return callback(Err.badRequest("Unsupported content-type: " + mime));
    }
  }
  _$jscoverage['server.js'][792]++;
  var contentLength = req.headers["content-length"];
  _$jscoverage['server.js'][793]++;
  if (contentLength && parseInt(contentLength, 10) > server.settings.payload.maxBytes) {
    _$jscoverage['server.js'][796]++;
    return callback(Err.badRequest("Payload content length greater than maximum allowed: " + server.settings.payload.maxBytes));
  }
  _$jscoverage['server.js'][801]++;
  var payload = "";
  _$jscoverage['server.js'][802]++;
  var isBailed = false;
  _$jscoverage['server.js'][804]++;
  req.setEncoding("utf8");
  _$jscoverage['server.js'][805]++;
  req.addListener("data", (function (chunk) {
  _$jscoverage['server.js'][807]++;
  if (payload.length + chunk.length <= server.settings.payload.maxBytes) {
    _$jscoverage['server.js'][809]++;
    payload += chunk;
  }
  else {
    _$jscoverage['server.js'][813]++;
    isBailed = true;
    _$jscoverage['server.js'][814]++;
    return callback(Err.badRequest("Payload size greater than maximum allowed: " + server.settings.payload.maxBytes));
  }
}));
  _$jscoverage['server.js'][818]++;
  req.addListener("end", (function () {
  _$jscoverage['server.js'][820]++;
  if (isBailed) {
    _$jscoverage['server.js'][822]++;
    return;
  }
  _$jscoverage['server.js'][825]++;
  req.hapi.rawBody = payload;
  _$jscoverage['server.js'][827]++;
  if (level === "parse") {
    _$jscoverage['server.js'][829]++;
    if (payload) {
      _$jscoverage['server.js'][831]++;
      req.hapi.payload = {};
      _$jscoverage['server.js'][833]++;
      try {
        _$jscoverage['server.js'][835]++;
        req.hapi.payload = parserFunc(payload);
      }
      catch (err) {
        _$jscoverage['server.js'][839]++;
        return callback(Err.badRequest("Invalid JSON body"));
      }
      _$jscoverage['server.js'][842]++;
      callback(null);
    }
  }
}));
});
_$jscoverage['server.js'][851]++;
internals.parseCondition = (function (condition) {
  _$jscoverage['server.js'][853]++;
  if (condition) {
    _$jscoverage['server.js'][855]++;
    result = {};
    _$jscoverage['server.js'][857]++;
    var conditionRegex = (condition.indexOf("\"") !== -1? /(?:^|,)(?:\s*")([^"]+)(?:"\s*)/g: /(?:^|,)(?:\s*)([^\s]+)(?:\s*)/g);
    _$jscoverage['server.js'][858]++;
    condition.replace(conditionRegex, (function ($0) {
  _$jscoverage['server.js'][860]++;
  if ($0) {
    _$jscoverage['server.js'][862]++;
    result[$0] = true;
  }
}));
    _$jscoverage['server.js'][866]++;
    return result;
  }
  else {
    _$jscoverage['server.js'][870]++;
    return ({});
  }
});
_$jscoverage['server.js'][877]++;
internals.respond = (function (res, code, payload, headers) {
  _$jscoverage['server.js'][879]++;
  headers = headers || {};
  _$jscoverage['server.js'][880]++;
  var data = null;
  _$jscoverage['server.js'][882]++;
  if (payload) {
    _$jscoverage['server.js'][884]++;
    if (typeof payload === "object") {
      _$jscoverage['server.js'][888]++;
      headers["Content-Type"] = "application/json";
      _$jscoverage['server.js'][889]++;
      data = JSON.stringify(payload);
    }
    else {
      _$jscoverage['server.js'][895]++;
      headers["Content-Type"] = "text/plain";
      _$jscoverage['server.js'][896]++;
      data = payload;
    }
    _$jscoverage['server.js'][899]++;
    headers["Content-Length"] = Buffer.byteLength(data);
  }
  _$jscoverage['server.js'][902]++;
  res.writeHeader(code, headers);
  _$jscoverage['server.js'][903]++;
  res.end(data);
});
_$jscoverage['server.js'].source = ["/*","* Copyright (c) 2012 Walmart. All rights reserved. Copyrights licensed under the New BSD License.","* See LICENSE file included with this code project for license terms.","*/","","// Load modules","","var Fs = require('fs');","var Http = require('http');","var Https = require('https');","var Url = require('url');","var Querystring = require('querystring');","var Director = require('director');","var MAC = require('mac');","var Utils = require('./utils');","var Err = require('./error');","var Log = require('./log');","var Process = require('./process');","var Validation = require('./validation');","var Defaults = require('./defaults');","var Fs = require('fs');","var Monitor = require(\"./monitor\");","var Session = require('./session');","","","// Declare internals","","var internals = {","","    // Servers instances by uri or name","","    servers: {}","};","","","// Create and configure server instance","","exports.create = function (host, port, options, routes) {","","    // Create server object","","    var server = {","","        // Private members","        // ----------------------------------------------------------------","","        settings: Utils.merge(Utils.clone(Defaults.server), options || {}),","        express: null,","        monitor: null,","        listener: null,","        router: null,","","        // Initialize server","        // ----------------------------------------------------------------","","        initialize: function () {","","            // Set basic configuration","","            server.settings.host = host.toLowerCase();","            server.settings.port = port;","            server.settings.name = (server.settings.name ? server.settings.name.toLowerCase() : (server.settings.host + ':' + server.settings.port));","            server.settings.uri = (server.settings.tls ? 'https://' : 'http://') + server.settings.host + ':' + server.settings.port + '/';","","            // Initialize Log downstream if set","","            if (server.settings.monitor &amp;&amp; server.settings.monitor.log &amp;&amp; Object.keys(server.settings.monitor.log).length &gt; 0){","","                Log.externalStores = server.settings.monitor.log;","            }","","            // Initialize authentication configuration and validate","","            if (server.settings.authentication) {","","                server.settings.authentication = Utils.merge(Utils.clone(Defaults.authentication), server.settings.authentication);","","                if (server.settings.authentication.tokenEndpoint === null ||","                    server.settings.authentication.loadClientFunc === null ||","                    server.settings.authentication.loadUserFunc === null ||","                    server.settings.authentication.checkAuthorizationFunc === null ||","                    server.settings.authentication.aes256Keys.oauthRefresh === null ||","                    server.settings.authentication.aes256Keys.oauthToken === null) {","","                    Log.err('Invalid authentication configuration');","                    process.exit(1);","                }","            }","","            // Verify no existing instances using the same uri or name","","            if (internals.servers[server.settings.name]) {","","                Log.err('Cannot configure multiple server instances using the same name or uri');","                process.exit(1);","            }","","            // Create router","","            server.router = new Director.http.Router();","            server.router.configure({","","                async: true,","                notfound: server.unhandledRoute","            });","","            var listernerEntryFunc = function (req, res) {","","                server.router.dispatch(req, res, function (err) {","","                    if (err) {","","                        // Should never get called since 'notfound' is set","","                        Log.err('Internal routing error');","                        res.writeHead(500);","                        res.end();","                    }","                });","            };","","            // Create server","","            if (server.settings.tls) {","","                var tls = {","","                    key: Fs.readFileSync(server.settings.tls.key),","                    cert: Fs.readFileSync(server.settings.tls.cert)","                };","","                server.listener = Https.createServer(tls, listernerEntryFunc);","            }","            else {","","                server.listener = Http.createServer(listernerEntryFunc);","            }","","            // Configure Monitoring (if enabled)","","            if (Object.keys(server.settings.monitor).length &gt; 0){","","                server.monitor = new Monitor(server);","                server.express.configure(function () {","","                    server.express.use(server.monitor.logger())","                })","            }","","            // Configure Express","","            server.express.configure(function () {","","                server.express.use(server.settings.ext.onPreRoute);","                server.express.use(server.preRoute);                                                        // Pre-Routes Middleware","                server.express.use(server.settings.ext.onPreHandler);","                server.express.use(server.express.router);                                                  // Load Routes","                server.express.use(server.settings.ext.onPostHandler);","                server.express.use(server.postRoute);                                                       // Post-Routes Middleware","                server.express.use(server.settings.ext.onPostRoute);","            });","            ","            // Add to instance list","","            internals.servers[server.settings.name] = server;","","            // Setup OPTIONS handler","","            server.router.options(/.+/, function () {","","                server.setCorsHeaders(this.res);","                internals.respond(this.res, 200);","            });","","            // Setup OAuth token endpoint","","            if (server.settings.authentication) {","","                server.public.addRoute({","","                    method: 'POST',","                    path: server.settings.authentication.tokenEndpoint,","                    handler: Session.token,","                    schema: Session.type.endpoint,","                    mode: 'raw',","                    authentication: 'optional',","                    user: 'any',","                    tos: 'none'","                });","            }","","            // Add routes","","            if (routes) {","","                server.public.addRoutes(routes);","            }","        },","","        // Route preprocessor handler","        // ----------------------------------------------------------------","","        preRoute: function (req, res, next) {","","            req._startTime = new Date; // Used to determine request response time ","","            Log.info('Received', req);","","            req.hapi = {};","            res.hapi = {};","","            req.query = req.url.indexOf('?') &gt;= 0 ? Url.parse(req.url, true).query : {};","","            next();","        },","","        // Route validator","        // ----------------------------------------------------------------","","        routeValidator: function (config) {","","            return function (req, res, next) {","","                // Authentication","","                internals.authenticate(req, res, config, server, function (err) {","","                    if (err === null) {","","                        // Query parameters","","                        Validation.validateQuery(req, config.query ? Utils.map(config.query) : null, function (err) {","","                            if (err === null) {","","                                // Load payload","","                                internals.processBody(req, config.payload || (config.schema ? 'parse' : null), server, function (err) {","","                                    if (err === null) {","","                                        // Validate payload schema","","                                        Validation.validateData(req, config.schema || null, function (err) {","","                                            if (err) {","","                                                res.hapi.error = err;","                                            }","","                                            next();","                                        });","                                    }","                                    else {","","                                        res.hapi.error = err;","                                        next();","                                    }","                                });","                            }","                            else {","","                                res.hapi.error = err;","                                next();","                            }","                        });","                    }","                    else {","","                        res.hapi.error = err;","                        next();","                    }","                });","            };","        },","","        // Request handler wrapper","        // ----------------------------------------------------------------","","        routeHandler: function (config) {","","            return function (req, res, next) {","","                if (!res.hapi.error) {","","                    // Link req stuff into hapi object","","                    req.hapi.url = req.url;","                    req.hapi.query = req.query;","                    req.hapi.params = req.params;","                    req.hapi.server = server;","","                    var request = (config.mode === 'raw' ? req : req.hapi);","","                    config.handler(request, function (result, options) {","","                        res.hapi[result instanceof Error ? 'error' : 'result'] = result;","                        res.hapi.options = options || {};","                        next();","                    });","                }","                else {","","                    next();","                }","            };","        },","","        // Set default response headers and send response","        // ----------------------------------------------------------------","","        postRoute: function (req, res, next) {","","            server.setCorsHeaders(res);","            res.setHeader('Cache-Control', 'must-revalidate');","","            if (res.hapi.result) {","","                var rev = null;                         // Need to set to something useful","                if (req.method === 'GET' &amp;&amp; rev) {","","                    res.setHeader('ETag', rev);","","                    var condition = internals.parseCondition(req.headers['if-none-match']);","","                    if (condition[rev] ||","                        condition['*']) {","","                        internals.respond(res, 304);","                    }","                    else {","","                        internals.respond(res, 200, res.hapi.result);","                    }","                }","                else if (res.hapi.options.created) {","","                    internals.respond(res, 201, res.hapi.result, { 'Location': server.settings.uri + res.hapi.options.created });","                }","                else {","","                    internals.respond(res, 200, res.hapi.result);","                }","","                Log.info('Replied', req);","            }","            else if (req.hapi.error) {","","                if (req.hapi.error.type === 'oauth') {","","                    internals.respond(res, req.hapi.error.code, { error: req.hapi.error.error, error_description: req.hapi.error.text });","                }","                else {","","                    internals.respond(res, req.hapi.error.code, { error: req.hapi.error.text, message: req.hapi.error.message, code: req.hapi.error.code });","                }","","                Log.err(res.hapi.error, req);","            }","            else {","","                internals.respond(res, 200);","                Log.info('Replied', req);","            }","","            next();","        },","","        // 404 Route handler","        // ----------------------------------------------------------------","","        unhandledRoute: function (next) {","","            this.req._startTime = new Date;                             // Used to determine request response time ","","            if (server.settings.ext.onUnknownRoute) {","","                // Extension handler is called, but the router continues processing the request regardless","","                server.settings.ext.onUnknownRoute(this.req, this.res);","                next();","            }","            else {","","                Log.info('Received', this.req);","","                var error = Err.notFound('No such path or method');","                internals.respond(this.res, error.code, { error: error.text, message: error.message, code: error.code });","","                Log.info(error, this.req);","                next();","            }","        },","","        // Set CORS headers","        // ----------------------------------------------------------------","","        setCorsHeaders: function (res) {","","            res.setHeader('Access-Control-Allow-Origin', '*');","            res.setHeader('Access-Control-Allow-Methods', 'GET, HEAD, POST, PUT, DELETE, OPTIONS');","            res.setHeader('Access-Control-Allow-Headers', 'Authorization, Content-Type, If-None-Match');","            res.setHeader('Access-Control-Max-Age', server.settings.cors.maxAge);","        },","","        // Public members","","        public: {","","            // Start server listener","            // ----------------------------------------------------------------","","            start: function () {","","                server.listener.listen(server.settings.port, server.settings.host);","                Log.info(Process.settings.name + ' Server instance started at ' + server.settings.uri);","            },","","            // Stop server","            // ----------------------------------------------------------------","","            stop: function () {","","                server.listener.close();","                Log.info(Process.settings.name + ' Server instance stopped at ' + server.settings.uri);","            },","","            // Add server route","            // ----------------------------------------------------------------","","            addRoute: function (config) {","","                // Validate configuration","","                if (config.authentication !== 'none' &amp;&amp;","                    server.settings.authentication === null) {","","                    Log.err('Route requires authentication but none configured');","                    process.exit(1);","                }","","                if (!config.path) {","","                    Log.err('Route missing path');","                    process.exit(1);","                }","","                if (!config.handler) {","","                    Log.err('Route missing handler');","                    process.exit(1);","                }","","                // Parse path to identify :parameter names, only if no other regex or wildcards are included","","                var parameterNames = [];","                if (/\\*|\\(|\\)/.test(config.path) === false) {","","                    var names = config.path.match(/:([^\\/]+)/ig);","                    if (names) {","","                        for (var i = 0, il = names.length; i &lt; il; ++i) {","","                            parameterNames.push(names[i].slice(1));","                        }","                    }","                }","","                // Handler wrapper","","                var wrapper = function (func) {","","                    return function () {","","                        // Convert director arguements to parameters object","","                        if (arguments.length - 1 === parameterNames.length) {","","                            this.req.params = {};","                            for (var i = 0, il = parameterNames.length; i &lt; il; ++i) {","","                                this.req.params[parameterNames[i]] = arguments[i];","                            }","                        }","","                        func(this.req, this.res, arguments[arguments.length - 1]);","                    };","                };","","                // Add route to Director","","                server.router[config.method.toLowerCase()](config.path, { stream: true }, [","","                    wrapper(server.settings.ext.onPreRoute),","                    wrapper(server.preRoute),","                    wrapper(server.routeValidator(config)),","                    wrapper(server.settings.ext.onPreHandler),","                    wrapper(server.routeHandler(config)),","                    wrapper(server.settings.ext.onPostHandler),","                    wrapper(server.postRoute),","                    wrapper(server.settings.ext.onPostRoute)]);","            },","","            addRoutes: function (routes) {","","                for (var i = 0, il = routes.length; i &lt; il; ++i) {","","                    server.public.addRoute(routes[i]);","                }","            },","","            // Access internal server instance","            // ----------------------------------------------------------------","","            getListener: function () {","","                return server.listener;","            }","        }","    };","","    // Initialize","","    server.initialize();","","    // Return public interface","","    return server.public;","};","","","// Return server object","","exports.instance = function (name) {","","    if (name) {","","        name = name.toLowerCase();","","        var server = internals.servers[name];","        if (server) {","","            return server;","        }","        else {","","            return null;","        }","    }","    else {","","        var names = Object.keys(internals.servers);","        if (names.length === 1) {","","            return internals.servers[names[0]];","        }","        else if (names.length === 0) {","","            return null;","        }","        else {","","            Log.err('Cannot call Server.instance() without uri in a process with multiple server instances');","            process.exit(1);","        }","    }","};","","","// Return server object configuration","","exports.settings = function (name) {","","    var server = exports.instance(name);","    if (server) {","","        return server.settings;","    }","    else {","","        return null;","    }","};","","","// Add routes to multiple instances","","exports.addRoutes = function (arg0, arg1) { // [defaultInstances,] routes","","    // Handle optional arguments","","    var defaultInstances = (arguments.length === 2 ? (arguments[0] instanceof Array ? arguments[0] : [arguments[0]]) : null);","    var routes = (arguments.length === 2 ? arguments[1] : arguments[0]);","","    // Process each route","","    routes = (routes instanceof Array ? routes : [routes]);","    for (var i = 0, il = routes.length; i &lt; il; ++i) {","","        var route = routes[i];","        if (route.instance || defaultInstances) {","","            // Select instances","","            var instances = (route.instance ? (route.instance instanceof Array ? route.instance : [route.instance]) : defaultInstances);","            for (var r = 0, rl = instances.length; r &lt; rl; ++r) {","","                var server = internals.servers[instances[r].toLowerCase()];","                if (server) {","","                    server.public.addRoute(route);","                }","                else {","","                    Log.err('Cannot find server instance: ' + instances[r]);","                    process.exit(1);","                }","            }","        }","        else {","","            // All instances","","            for (var s in internals.servers) {","","                if (internals.servers.hasOwnProperty(s)) {","","                    internals.servers[s].public.addRoute(route);","                }","            }","        }","    }","};","","","// Token Authentication","","internals.authenticate = function (req, res, routeConfig, server, callback) {","","    var scope = routeConfig.scope || null;","    var minTos = routeConfig.tos || server.settings.tos.min;","    var userMode = routeConfig.user || 'required';","    var isOptional = (routeConfig.authentication === 'optional');","","    if (routeConfig.authentication === 'none') {","","        callback(null);","        return;","    }","","    var loadTokenFunc = function (token, callback) {","","        Session.loadToken(server.settings.authentication.aes256Keys.oauthToken, token, callback);","    };","","    MAC.authenticate(req, loadTokenFunc, { isHTTPS: server.settings.tls }, function (isAuthenticated, session, err) {","","        if (isAuthenticated) {","","            if (session) {","","                req.hapi.session = session;","","                if (session.client) {","","                    req.hapi.clientId = session.client;","","                    // Check scope","","                    if (scope === null ||","                        session.scope[scope]) {","","                        req.hapi.scope = session.scope;","","                        if (userMode === 'any') {","","                            // User Mode: any","","                            callback(null);","                        }","                        else if (userMode === 'required') {","","                            // User Mode: required","","                            if (session.user) {","","                                // Check TOS","","                                if (minTos === 'none' ||","                                    (session.tos &amp;&amp; session.tos &gt;= minTos)) {","","                                    req.hapi.userId = session.user;","                                    callback(null);","                                }","                                else {","","                                    callback(Err.forbidden('Insufficient TOS accepted'));","                                }","                            }","                            else {","","                                callback(Err.forbidden('Client token cannot be used on a user endpoint'));","                            }","                        }","                        else if (userMode === 'none') {","","                            // User Mode: none","","                            if (session.user) {","","                                callback(Err.forbidden('User token cannot be used on a client endpoint'));","                            }","                            else {","","                                callback(null);","                            }","                        }","                        else {","","                            callback(Err.internal('Unknown endpoint user mode'));","                        }","                    }","                    else {","","                        callback(Err.forbidden('Insufficient token scope (\\'' + scope + '\\' expected for client ' + session.client + ')'));","                    }","                }","                else {","","                    callback(Err.internal('Missing client identifier in authenticated token'));","                }","            }","            else {","","                callback(Err.internal('Missing user object in authenticated token'));","            }","        }","        else {","","            // Unauthenticated","","            if (isOptional &amp;&amp;","                !req.headers.authorization) {","","                callback(null);","            }","            else {","","                res.setHeader('WWW-Authenticate', MAC.getWWWAuthenticateHeader(err));","                callback(Err.generic(401, 'Invalid authentication', err));","            }","        }","    });","};","","","// Read and parse body","","internals.processBody = function (req, level, server, callback) {","","    // Levels are: 'none', 'raw', 'parse'","    // Default is 'parse' for POST and PUT otherwise 'none'","","    level = level || (req.method === 'POST' || req.method === 'PUT' ? 'parse' : 'none');","","    if (level === 'none') {","","        return callback(null);","    }","","    // Check content type (defaults to 'application/json')","","    var contentType = req.headers['content-type'];","    var mime = (contentType ? contentType.split(';')[0] : 'application/json');","    var parserFunc = null;","","    if (mime === 'application/json') {","","        parserFunc = JSON.parse;","    }","    else if (mime === 'application/x-www-form-urlencoded') {","","        parserFunc = Querystring.parse;","    }","    else {","","        return callback(Err.badRequest('Unsupported content-type: ' + mime));","    }","","    // Check content size","","    var contentLength = req.headers['content-length'];","    if (contentLength &amp;&amp;","        parseInt(contentLength, 10) &gt; server.settings.payload.maxBytes) {","","        return callback(Err.badRequest('Payload content length greater than maximum allowed: ' + server.settings.payload.maxBytes));","    }","","    // Read incoming payload","","    var payload = '';","    var isBailed = false;","","    req.setEncoding('utf8');","    req.addListener('data', function (chunk) {","","        if (payload.length + chunk.length &lt;= server.settings.payload.maxBytes) {","","            payload += chunk;","        }","        else {","","            isBailed = true;","            return callback(Err.badRequest('Payload size greater than maximum allowed: ' + server.settings.payload.maxBytes));","        }","    });","","    req.addListener('end', function () {","","        if (isBailed) {","","            return;","        }","","        req.hapi.rawBody = payload;","","        if (level === 'parse') {","","            if (payload) {","","                req.hapi.payload = {};","","                try {","","                    req.hapi.payload = parserFunc(payload);","                }","                catch (err) {","","                    return callback(Err.badRequest('Invalid JSON body'));","                }","","                callback(null);","            }","        }","    });","};","","","// Parse If-None-Match request header","","internals.parseCondition = function (condition) {","","    if (condition) {","","        result = {};","","        var conditionRegex = (condition.indexOf('\"') !== -1 ? /(?:^|,)(?:\\s*\")([^\"]+)(?:\"\\s*)/g : /(?:^|,)(?:\\s*)([^\\s]+)(?:\\s*)/g);","        condition.replace(conditionRegex, function ($0) {","","            if ($0) {","","                result[$0] = true;","            }","        });","","        return result;","    }","    else {","","        return {};","    }","};","","","// Format and send HTTP response","","internals.respond = function (res, code, payload, headers) {","","    headers = headers || {};","    var data = null;","","    if (payload) {","","        if (typeof payload === 'object') {","","            // Object","","            headers['Content-Type'] = 'application/json';","            data = JSON.stringify(payload);","        }","        else {","","            // String","","            headers['Content-Type'] = 'text/plain';","            data = payload;","        }","","        headers['Content-Length'] = Buffer.byteLength(data);","    }","","    res.writeHeader(code, headers);","    res.end(data);","};",""];
