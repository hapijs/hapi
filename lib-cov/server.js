/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['server.js']) {
  _$jscoverage['server.js'] = [];
  _$jscoverage['server.js'][8] = 0;
  _$jscoverage['server.js'][9] = 0;
  _$jscoverage['server.js'][10] = 0;
  _$jscoverage['server.js'][11] = 0;
  _$jscoverage['server.js'][12] = 0;
  _$jscoverage['server.js'][13] = 0;
  _$jscoverage['server.js'][14] = 0;
  _$jscoverage['server.js'][15] = 0;
  _$jscoverage['server.js'][16] = 0;
  _$jscoverage['server.js'][17] = 0;
  _$jscoverage['server.js'][22] = 0;
  _$jscoverage['server.js'][32] = 0;
  _$jscoverage['server.js'][36] = 0;
  _$jscoverage['server.js'][51] = 0;
  _$jscoverage['server.js'][52] = 0;
  _$jscoverage['server.js'][53] = 0;
  _$jscoverage['server.js'][54] = 0;
  _$jscoverage['server.js'][58] = 0;
  _$jscoverage['server.js'][60] = 0;
  _$jscoverage['server.js'][61] = 0;
  _$jscoverage['server.js'][66] = 0;
  _$jscoverage['server.js'][68] = 0;
  _$jscoverage['server.js'][74] = 0;
  _$jscoverage['server.js'][78] = 0;
  _$jscoverage['server.js'][83] = 0;
  _$jscoverage['server.js'][85] = 0;
  _$jscoverage['server.js'][86] = 0;
  _$jscoverage['server.js'][87] = 0;
  _$jscoverage['server.js'][88] = 0;
  _$jscoverage['server.js'][89] = 0;
  _$jscoverage['server.js'][90] = 0;
  _$jscoverage['server.js'][91] = 0;
  _$jscoverage['server.js'][92] = 0;
  _$jscoverage['server.js'][97] = 0;
  _$jscoverage['server.js'][99] = 0;
  _$jscoverage['server.js'][100] = 0;
  _$jscoverage['server.js'][105] = 0;
  _$jscoverage['server.js'][109] = 0;
  _$jscoverage['server.js'][111] = 0;
  _$jscoverage['server.js'][120] = 0;
  _$jscoverage['server.js'][122] = 0;
  _$jscoverage['server.js'][130] = 0;
  _$jscoverage['server.js'][132] = 0;
  _$jscoverage['server.js'][133] = 0;
  _$jscoverage['server.js'][135] = 0;
  _$jscoverage['server.js'][137] = 0;
  _$jscoverage['server.js'][145] = 0;
  _$jscoverage['server.js'][147] = 0;
  _$jscoverage['server.js'][148] = 0;
  _$jscoverage['server.js'][149] = 0;
  _$jscoverage['server.js'][150] = 0;
  _$jscoverage['server.js'][152] = 0;
  _$jscoverage['server.js'][154] = 0;
  _$jscoverage['server.js'][156] = 0;
  _$jscoverage['server.js'][157] = 0;
  _$jscoverage['server.js'][159] = 0;
  _$jscoverage['server.js'][161] = 0;
  _$jscoverage['server.js'][163] = 0;
  _$jscoverage['server.js'][166] = 0;
  _$jscoverage['server.js'][170] = 0;
  _$jscoverage['server.js'][173] = 0;
  _$jscoverage['server.js'][175] = 0;
  _$jscoverage['server.js'][179] = 0;
  _$jscoverage['server.js'][182] = 0;
  _$jscoverage['server.js'][186] = 0;
  _$jscoverage['server.js'][188] = 0;
  _$jscoverage['server.js'][190] = 0;
  _$jscoverage['server.js'][194] = 0;
  _$jscoverage['server.js'][197] = 0;
  _$jscoverage['server.js'][199] = 0;
  _$jscoverage['server.js'][203] = 0;
  _$jscoverage['server.js'][207] = 0;
  _$jscoverage['server.js'][220] = 0;
  _$jscoverage['server.js'][221] = 0;
  _$jscoverage['server.js'][229] = 0;
  _$jscoverage['server.js'][230] = 0;
  _$jscoverage['server.js'][238] = 0;
  _$jscoverage['server.js'][240] = 0;
  _$jscoverage['server.js'][244] = 0;
  _$jscoverage['server.js'][246] = 0;
  _$jscoverage['server.js'][250] = 0;
  _$jscoverage['server.js'][252] = 0;
  _$jscoverage['server.js'][256] = 0;
  _$jscoverage['server.js'][258] = 0;
  _$jscoverage['server.js'][262] = 0;
  _$jscoverage['server.js'][264] = 0;
  _$jscoverage['server.js'][268] = 0;
  _$jscoverage['server.js'][272] = 0;
  _$jscoverage['server.js'][273] = 0;
  _$jscoverage['server.js'][274] = 0;
  _$jscoverage['server.js'][276] = 0;
  _$jscoverage['server.js'][278] = 0;
  _$jscoverage['server.js'][280] = 0;
  _$jscoverage['server.js'][284] = 0;
  _$jscoverage['server.js'][287] = 0;
  _$jscoverage['server.js'][288] = 0;
  _$jscoverage['server.js'][293] = 0;
  _$jscoverage['server.js'][294] = 0;
  _$jscoverage['server.js'][299] = 0;
  _$jscoverage['server.js'][300] = 0;
  _$jscoverage['server.js'][306] = 0;
  _$jscoverage['server.js'][307] = 0;
  _$jscoverage['server.js'][313] = 0;
  _$jscoverage['server.js'][314] = 0;
  _$jscoverage['server.js'][320] = 0;
  _$jscoverage['server.js'][321] = 0;
  _$jscoverage['server.js'][328] = 0;
  _$jscoverage['server.js'][330] = 0;
  _$jscoverage['server.js'][331] = 0;
  _$jscoverage['server.js'][332] = 0;
  _$jscoverage['server.js'][333] = 0;
  _$jscoverage['server.js'][334] = 0;
  _$jscoverage['server.js'][340] = 0;
  _$jscoverage['server.js'][342] = 0;
  _$jscoverage['server.js'][351] = 0;
  _$jscoverage['server.js'][358] = 0;
  _$jscoverage['server.js'][362] = 0;
  _$jscoverage['server.js'][368] = 0;
  _$jscoverage['server.js'][370] = 0;
  _$jscoverage['server.js'][372] = 0;
  _$jscoverage['server.js'][374] = 0;
  _$jscoverage['server.js'][375] = 0;
  _$jscoverage['server.js'][377] = 0;
  _$jscoverage['server.js'][381] = 0;
  _$jscoverage['server.js'][386] = 0;
  _$jscoverage['server.js'][387] = 0;
  _$jscoverage['server.js'][389] = 0;
  _$jscoverage['server.js'][391] = 0;
  _$jscoverage['server.js'][393] = 0;
  _$jscoverage['server.js'][397] = 0;
  _$jscoverage['server.js'][398] = 0;
  _$jscoverage['server.js'][406] = 0;
  _$jscoverage['server.js'][408] = 0;
  _$jscoverage['server.js'][409] = 0;
  _$jscoverage['server.js'][411] = 0;
  _$jscoverage['server.js'][415] = 0;
  _$jscoverage['server.js'][422] = 0;
  _$jscoverage['server.js'][426] = 0;
  _$jscoverage['server.js'][427] = 0;
  _$jscoverage['server.js'][431] = 0;
  _$jscoverage['server.js'][432] = 0;
  _$jscoverage['server.js'][434] = 0;
  _$jscoverage['server.js'][435] = 0;
  _$jscoverage['server.js'][439] = 0;
  _$jscoverage['server.js'][440] = 0;
  _$jscoverage['server.js'][442] = 0;
  _$jscoverage['server.js'][443] = 0;
  _$jscoverage['server.js'][445] = 0;
  _$jscoverage['server.js'][449] = 0;
  _$jscoverage['server.js'][450] = 0;
  _$jscoverage['server.js'][458] = 0;
  _$jscoverage['server.js'][460] = 0;
  _$jscoverage['server.js'][462] = 0;
  _$jscoverage['server.js'][472] = 0;
  _$jscoverage['server.js'][474] = 0;
  _$jscoverage['server.js'][475] = 0;
  _$jscoverage['server.js'][476] = 0;
  _$jscoverage['server.js'][477] = 0;
  _$jscoverage['server.js'][479] = 0;
  _$jscoverage['server.js'][481] = 0;
  _$jscoverage['server.js'][482] = 0;
  _$jscoverage['server.js'][485] = 0;
  _$jscoverage['server.js'][487] = 0;
  _$jscoverage['server.js'][489] = 0;
  _$jscoverage['server.js'][491] = 0;
  _$jscoverage['server.js'][496] = 0;
  _$jscoverage['server.js'][497] = 0;
  _$jscoverage['server.js'][501] = 0;
  _$jscoverage['server.js'][503] = 0;
  _$jscoverage['server.js'][505] = 0;
  _$jscoverage['server.js'][507] = 0;
  _$jscoverage['server.js'][509] = 0;
  _$jscoverage['server.js'][511] = 0;
  _$jscoverage['server.js'][515] = 0;
  _$jscoverage['server.js'][518] = 0;
  _$jscoverage['server.js'][520] = 0;
  _$jscoverage['server.js'][522] = 0;
  _$jscoverage['server.js'][526] = 0;
  _$jscoverage['server.js'][529] = 0;
  _$jscoverage['server.js'][530] = 0;
  _$jscoverage['server.js'][534] = 0;
  _$jscoverage['server.js'][539] = 0;
  _$jscoverage['server.js'][542] = 0;
  _$jscoverage['server.js'][544] = 0;
  _$jscoverage['server.js'][546] = 0;
  _$jscoverage['server.js'][550] = 0;
  _$jscoverage['server.js'][553] = 0;
  _$jscoverage['server.js'][555] = 0;
  _$jscoverage['server.js'][559] = 0;
  _$jscoverage['server.js'][564] = 0;
  _$jscoverage['server.js'][569] = 0;
  _$jscoverage['server.js'][574] = 0;
  _$jscoverage['server.js'][581] = 0;
  _$jscoverage['server.js'][584] = 0;
  _$jscoverage['server.js'][588] = 0;
  _$jscoverage['server.js'][589] = 0;
  _$jscoverage['server.js'][598] = 0;
  _$jscoverage['server.js'][603] = 0;
  _$jscoverage['server.js'][605] = 0;
  _$jscoverage['server.js'][607] = 0;
  _$jscoverage['server.js'][612] = 0;
  _$jscoverage['server.js'][613] = 0;
  _$jscoverage['server.js'][614] = 0;
  _$jscoverage['server.js'][616] = 0;
  _$jscoverage['server.js'][618] = 0;
  _$jscoverage['server.js'][620] = 0;
  _$jscoverage['server.js'][622] = 0;
  _$jscoverage['server.js'][626] = 0;
  _$jscoverage['server.js'][631] = 0;
  _$jscoverage['server.js'][632] = 0;
  _$jscoverage['server.js'][635] = 0;
  _$jscoverage['server.js'][640] = 0;
  _$jscoverage['server.js'][641] = 0;
  _$jscoverage['server.js'][643] = 0;
  _$jscoverage['server.js'][644] = 0;
  _$jscoverage['server.js'][646] = 0;
  _$jscoverage['server.js'][648] = 0;
  _$jscoverage['server.js'][652] = 0;
  _$jscoverage['server.js'][653] = 0;
  _$jscoverage['server.js'][657] = 0;
  _$jscoverage['server.js'][659] = 0;
  _$jscoverage['server.js'][661] = 0;
  _$jscoverage['server.js'][664] = 0;
  _$jscoverage['server.js'][666] = 0;
  _$jscoverage['server.js'][668] = 0;
  _$jscoverage['server.js'][670] = 0;
  _$jscoverage['server.js'][672] = 0;
  _$jscoverage['server.js'][674] = 0;
  _$jscoverage['server.js'][678] = 0;
  _$jscoverage['server.js'][681] = 0;
  _$jscoverage['server.js'][690] = 0;
  _$jscoverage['server.js'][692] = 0;
  _$jscoverage['server.js'][694] = 0;
  _$jscoverage['server.js'][696] = 0;
  _$jscoverage['server.js'][697] = 0;
  _$jscoverage['server.js'][699] = 0;
  _$jscoverage['server.js'][701] = 0;
  _$jscoverage['server.js'][705] = 0;
  _$jscoverage['server.js'][709] = 0;
}
_$jscoverage['server.js'][8]++;
var Express = require("express");
_$jscoverage['server.js'][9]++;
var Qs = require("qs");
_$jscoverage['server.js'][10]++;
var MAC = require("mac");
_$jscoverage['server.js'][11]++;
var Utils = require("./utils");
_$jscoverage['server.js'][12]++;
var Err = require("./error");
_$jscoverage['server.js'][13]++;
var Log = require("./log");
_$jscoverage['server.js'][14]++;
var Process = require("./process");
_$jscoverage['server.js'][15]++;
var Validation = require("./validation");
_$jscoverage['server.js'][16]++;
var Defaults = require("./defaults");
_$jscoverage['server.js'][17]++;
var Fs = require("fs");
_$jscoverage['server.js'][22]++;
var internals = {servers: {}};
_$jscoverage['server.js'][32]++;
exports.create = (function (host, port, options, routes) {
  _$jscoverage['server.js'][36]++;
  var server = {settings: Utils.merge(Utils.clone(Defaults.server), options || {}), express: null, initialize: (function () {
  _$jscoverage['server.js'][51]++;
  server.settings.host = host.toLowerCase();
  _$jscoverage['server.js'][52]++;
  server.settings.port = port;
  _$jscoverage['server.js'][53]++;
  server.settings.name = (server.settings.name? server.settings.name.toLowerCase(): (server.settings.host + ":" + server.settings.port));
  _$jscoverage['server.js'][54]++;
  server.settings.uri = (server.settings.tls? "https://": "http://") + server.settings.host + ":" + server.settings.port + "/";
  _$jscoverage['server.js'][58]++;
  if (internals.servers[server.settings.name]) {
    _$jscoverage['server.js'][60]++;
    Log.err("Cannot configure multiple server instances using the same name or uri");
    _$jscoverage['server.js'][61]++;
    process.exit(1);
  }
  _$jscoverage['server.js'][66]++;
  if (server.settings.tls) {
    _$jscoverage['server.js'][68]++;
    var tls = {key: Fs.readFileSync(server.settings.tls.key), cert: Fs.readFileSync(server.settings.tls.cert)};
    _$jscoverage['server.js'][74]++;
    server.express = Express.createServer(tls);
  }
  else {
    _$jscoverage['server.js'][78]++;
    server.express = Express.createServer();
  }
  _$jscoverage['server.js'][83]++;
  server.express.configure((function () {
  _$jscoverage['server.js'][85]++;
  server.express.use(server.preRequest);
  _$jscoverage['server.js'][86]++;
  server.express.use(server.settings.ext.onPreRoute);
  _$jscoverage['server.js'][87]++;
  server.express.use(server.preRoute);
  _$jscoverage['server.js'][88]++;
  server.express.use(server.settings.ext.onPreHandler);
  _$jscoverage['server.js'][89]++;
  server.express.use(server.express.router);
  _$jscoverage['server.js'][90]++;
  server.express.use(server.settings.ext.onPostHandler);
  _$jscoverage['server.js'][91]++;
  server.express.use(server.postRoute);
  _$jscoverage['server.js'][92]++;
  server.express.use(server.settings.ext.onPostRoute);
}));
  _$jscoverage['server.js'][97]++;
  server.express.options(/.+/, (function (req, res, next) {
  _$jscoverage['server.js'][99]++;
  res.hapi.result = " ";
  _$jscoverage['server.js'][100]++;
  server.postRoute(req, res, next);
}));
  _$jscoverage['server.js'][105]++;
  internals.servers[server.settings.name] = server;
  _$jscoverage['server.js'][109]++;
  if (routes) {
    _$jscoverage['server.js'][111]++;
    server["public"].addRoutes(routes);
  }
}), preRequest: (function (req, res, next) {
  _$jscoverage['server.js'][120]++;
  req._startTime = new Date();
  _$jscoverage['server.js'][122]++;
  next();
}), preRoute: (function (req, res, next) {
  _$jscoverage['server.js'][130]++;
  Log.info("Received", req);
  _$jscoverage['server.js'][132]++;
  req.hapi = {};
  _$jscoverage['server.js'][133]++;
  res.hapi = {};
  _$jscoverage['server.js'][135]++;
  res.hapi.wasProcessed = false;
  _$jscoverage['server.js'][137]++;
  next();
}), postRoute: (function (req, res, next) {
  _$jscoverage['server.js'][145]++;
  if (res.hapi.isReplied !== true) {
    _$jscoverage['server.js'][147]++;
    res.header("Access-Control-Allow-Origin", "*");
    _$jscoverage['server.js'][148]++;
    res.header("Access-Control-Allow-Methods", "GET, HEAD, POST, PUT, DELETE, OPTIONS");
    _$jscoverage['server.js'][149]++;
    res.header("Access-Control-Allow-Headers", "Authorization, Content-Type, If-None-Match");
    _$jscoverage['server.js'][150]++;
    res.header("Access-Control-Max-Age", server.settings.cors.maxAge);
    _$jscoverage['server.js'][152]++;
    res.header("Cache-Control", "must-revalidate");
    _$jscoverage['server.js'][154]++;
    if (res.hapi.result) {
      _$jscoverage['server.js'][156]++;
      var rev = null;
      _$jscoverage['server.js'][157]++;
      if (req.method === "GET" && rev) {
        _$jscoverage['server.js'][159]++;
        res.header("ETag", rev);
        _$jscoverage['server.js'][161]++;
        var condition = internals.parseCondition(req.headers["if-none-match"]);
        _$jscoverage['server.js'][163]++;
        if (condition[rev] || condition["*"]) {
          _$jscoverage['server.js'][166]++;
          res.send("", 304);
        }
        else {
          _$jscoverage['server.js'][170]++;
          res.send(res.hapi.result);
        }
      }
      else {
        _$jscoverage['server.js'][173]++;
        if (res.hapi.options.created) {
          _$jscoverage['server.js'][175]++;
          res.send(res.hapi.result, {"Location": server.settings.uri + res.hapi.options.created}, 201);
        }
        else {
          _$jscoverage['server.js'][179]++;
          res.send(res.hapi.result);
        }
      }
      _$jscoverage['server.js'][182]++;
      Log.info("Replied", req);
    }
    else {
      _$jscoverage['server.js'][186]++;
      var error = res.hapi.error || Err.notFound("No such path or method");
      _$jscoverage['server.js'][188]++;
      if (error.type === "oauth") {
        _$jscoverage['server.js'][190]++;
        res.send({error: error.error, error_description: error.text}, error.code);
      }
      else {
        _$jscoverage['server.js'][194]++;
        res.send({error: error.text, message: error.message, code: error.code}, error.code);
      }
      _$jscoverage['server.js'][197]++;
      if (res.hapi.error) {
        _$jscoverage['server.js'][199]++;
        Log.err(res.hapi.error, req);
      }
      else {
        _$jscoverage['server.js'][203]++;
        Log.info(error, req);
      }
    }
    _$jscoverage['server.js'][207]++;
    res.hapi.isReplied = true;
  }
}), public: {start: (function () {
  _$jscoverage['server.js'][220]++;
  server.express.listen(server.settings.port, server.settings.host);
  _$jscoverage['server.js'][221]++;
  Log.info(Process.settings.name + " Server instance started at " + server.settings.uri);
}), stop: (function () {
  _$jscoverage['server.js'][229]++;
  server.express.close();
  _$jscoverage['server.js'][230]++;
  Log.info(Process.settings.name + " Server instance stopped at " + server.settings.uri);
}), addRoute: (function (config) {
  _$jscoverage['server.js'][238]++;
  var handler = (function (req, res, next) {
  _$jscoverage['server.js'][240]++;
  res.hapi.wasProcessed = true;
  _$jscoverage['server.js'][244]++;
  internals.authenticate(req, res, config, server, (function (err) {
  _$jscoverage['server.js'][246]++;
  if (err === null) {
    _$jscoverage['server.js'][250]++;
    Validation.validateQuery(req, config.query? Utils.map(config.query): null, (function (err) {
  _$jscoverage['server.js'][252]++;
  if (err === null) {
    _$jscoverage['server.js'][256]++;
    internals.processBody(req, config.payload || (config.schema? "parse": null), server, (function (err) {
  _$jscoverage['server.js'][258]++;
  if (err === null) {
    _$jscoverage['server.js'][262]++;
    Validation.validateData(req, config.schema || null, (function (err) {
  _$jscoverage['server.js'][264]++;
  if (err === null) {
    _$jscoverage['server.js'][268]++;
    if (config.handler) {
      _$jscoverage['server.js'][272]++;
      req.hapi.url = req.url;
      _$jscoverage['server.js'][273]++;
      req.hapi.query = req.query;
      _$jscoverage['server.js'][274]++;
      req.hapi.params = req.params;
      _$jscoverage['server.js'][276]++;
      config.handler(req.hapi, (function (result, options) {
  _$jscoverage['server.js'][278]++;
  if (result instanceof Error) {
    _$jscoverage['server.js'][280]++;
    res.hapi.error = result;
  }
  else {
    _$jscoverage['server.js'][284]++;
    res.hapi.result = result;
  }
  _$jscoverage['server.js'][287]++;
  res.hapi.options = options || {};
  _$jscoverage['server.js'][288]++;
  next();
}));
    }
    else {
      _$jscoverage['server.js'][293]++;
      res.hapi.error = Err.internal("Route missing handler");
      _$jscoverage['server.js'][294]++;
      next();
    }
  }
  else {
    _$jscoverage['server.js'][299]++;
    res.hapi.error = err;
    _$jscoverage['server.js'][300]++;
    next();
  }
}));
  }
  else {
    _$jscoverage['server.js'][306]++;
    res.hapi.error = err;
    _$jscoverage['server.js'][307]++;
    next();
  }
}));
  }
  else {
    _$jscoverage['server.js'][313]++;
    res.hapi.error = err;
    _$jscoverage['server.js'][314]++;
    next();
  }
}));
  }
  else {
    _$jscoverage['server.js'][320]++;
    res.hapi.error = err;
    _$jscoverage['server.js'][321]++;
    next();
  }
}));
});
  _$jscoverage['server.js'][328]++;
  switch (config.method) {
  case "GET":
    _$jscoverage['server.js'][330]++;
    server.express.get(config.path, handler);
    _$jscoverage['server.js'][330]++;
    break;
  case "POST":
    _$jscoverage['server.js'][331]++;
    server.express.post(config.path, handler);
    _$jscoverage['server.js'][331]++;
    break;
  case "PUT":
    _$jscoverage['server.js'][332]++;
    server.express.put(config.path, handler);
    _$jscoverage['server.js'][332]++;
    break;
  case "DELETE":
    _$jscoverage['server.js'][333]++;
    server.express.del(config.path, handler);
    _$jscoverage['server.js'][333]++;
    break;
  default:
    _$jscoverage['server.js'][334]++;
    process.exit(1);
    _$jscoverage['server.js'][334]++;
    break;
  }
}), addRoutes: (function (routes) {
  _$jscoverage['server.js'][340]++;
  for (var i = 0, il = routes.length; i < il; ++i) {
    _$jscoverage['server.js'][342]++;
    server["public"].addRoute(routes[i]);
}
}), getExpress: (function () {
  _$jscoverage['server.js'][351]++;
  return server.express;
})}};
  _$jscoverage['server.js'][358]++;
  server.initialize();
  _$jscoverage['server.js'][362]++;
  return server["public"];
});
_$jscoverage['server.js'][368]++;
exports.instance = (function (name) {
  _$jscoverage['server.js'][370]++;
  if (name) {
    _$jscoverage['server.js'][372]++;
    name = name.toLowerCase();
    _$jscoverage['server.js'][374]++;
    var server = internals.servers[name];
    _$jscoverage['server.js'][375]++;
    if (server) {
      _$jscoverage['server.js'][377]++;
      return server;
    }
    else {
      _$jscoverage['server.js'][381]++;
      return null;
    }
  }
  else {
    _$jscoverage['server.js'][386]++;
    var names = Object.keys(internals.servers);
    _$jscoverage['server.js'][387]++;
    if (names.length === 1) {
      _$jscoverage['server.js'][389]++;
      return internals.servers[names[0]];
    }
    else {
      _$jscoverage['server.js'][391]++;
      if (names.length === 0) {
        _$jscoverage['server.js'][393]++;
        return null;
      }
      else {
        _$jscoverage['server.js'][397]++;
        Log.err("Cannot call Server.instance() without uri in a process with multiple server instances");
        _$jscoverage['server.js'][398]++;
        process.exit(1);
      }
    }
  }
});
_$jscoverage['server.js'][406]++;
exports.settings = (function (name) {
  _$jscoverage['server.js'][408]++;
  var server = exports.instance(name);
  _$jscoverage['server.js'][409]++;
  if (server) {
    _$jscoverage['server.js'][411]++;
    return server.settings;
  }
  else {
    _$jscoverage['server.js'][415]++;
    return null;
  }
});
_$jscoverage['server.js'][422]++;
exports.addRoutes = (function (arg0, arg1) {
  _$jscoverage['server.js'][426]++;
  var defaultInstances = (arguments.length === 2? (arguments[0] instanceof Array? arguments[0]: [arguments[0]]): null);
  _$jscoverage['server.js'][427]++;
  var routes = (arguments.length === 2? arguments[1]: arguments[0]);
  _$jscoverage['server.js'][431]++;
  routes = (routes instanceof Array? routes: [routes]);
  _$jscoverage['server.js'][432]++;
  for (var i = 0, il = routes.length; i < il; ++i) {
    _$jscoverage['server.js'][434]++;
    var route = routes[i];
    _$jscoverage['server.js'][435]++;
    if (route.instance || defaultInstances) {
      _$jscoverage['server.js'][439]++;
      var instances = (route.instance? (route.instance instanceof Array? route.instance: [route.instance]): defaultInstances);
      _$jscoverage['server.js'][440]++;
      for (var r = 0, rl = instances.length; r < rl; ++r) {
        _$jscoverage['server.js'][442]++;
        var server = internals.servers[instances[r].toLowerCase()];
        _$jscoverage['server.js'][443]++;
        if (server) {
          _$jscoverage['server.js'][445]++;
          server["public"].addRoute(route);
        }
        else {
          _$jscoverage['server.js'][449]++;
          Log.err("Cannot find server instance: " + instances[r]);
          _$jscoverage['server.js'][450]++;
          process.exit(1);
        }
}
    }
    else {
      _$jscoverage['server.js'][458]++;
      for (var s in internals.servers) {
        _$jscoverage['server.js'][460]++;
        if (internals.servers.hasOwnProperty(s)) {
          _$jscoverage['server.js'][462]++;
          internals.servers[s]["public"].addRoute(route);
        }
}
    }
}
});
_$jscoverage['server.js'][472]++;
internals.authenticate = (function (req, res, routeConfig, server, callback) {
  _$jscoverage['server.js'][474]++;
  var scope = routeConfig.scope || null;
  _$jscoverage['server.js'][475]++;
  var minTos = routeConfig.tos || server.settings.tos.min;
  _$jscoverage['server.js'][476]++;
  var userMode = routeConfig.user || "required";
  _$jscoverage['server.js'][477]++;
  var isOptional = (routeConfig.authentication === "optional");
  _$jscoverage['server.js'][479]++;
  if (routeConfig.authentication === "none") {
    _$jscoverage['server.js'][481]++;
    callback(null);
    _$jscoverage['server.js'][482]++;
    return;
  }
  _$jscoverage['server.js'][485]++;
  var getSession = (function (id, callback) {
  _$jscoverage['server.js'][487]++;
  if (server.settings.authentication.loadSessionFunc) {
    _$jscoverage['server.js'][489]++;
    server.settings.authentication.loadSessionFunc(id, (function (session) {
  _$jscoverage['server.js'][491]++;
  callback(session);
}));
  }
  else {
    _$jscoverage['server.js'][496]++;
    Log.err("Not configured to recieve authenticated requests");
    _$jscoverage['server.js'][497]++;
    callback(null);
  }
});
  _$jscoverage['server.js'][501]++;
  MAC.authenticate(req, getSession, {isHTTPS: server.settings.tls}, (function (isAuthenticated, session, err) {
  _$jscoverage['server.js'][503]++;
  if (isAuthenticated) {
    _$jscoverage['server.js'][505]++;
    if (session) {
      _$jscoverage['server.js'][507]++;
      req.hapi.session = session;
      _$jscoverage['server.js'][509]++;
      if (session.client) {
        _$jscoverage['server.js'][511]++;
        req.hapi.clientId = session.client;
        _$jscoverage['server.js'][515]++;
        if (scope === null || session.scope[scope]) {
          _$jscoverage['server.js'][518]++;
          req.hapi.scope = session.scope;
          _$jscoverage['server.js'][520]++;
          if (userMode === "required") {
            _$jscoverage['server.js'][522]++;
            if (session.user) {
              _$jscoverage['server.js'][526]++;
              if (minTos === "none" || (session.tos && session.tos >= minTos)) {
                _$jscoverage['server.js'][529]++;
                req.hapi.userId = session.user;
                _$jscoverage['server.js'][530]++;
                callback(null);
              }
              else {
                _$jscoverage['server.js'][534]++;
                callback(Err.forbidden("Insufficient TOS accepted"));
              }
            }
            else {
              _$jscoverage['server.js'][539]++;
              callback(Err.forbidden("Client token cannot be used on a user endpoint"));
            }
          }
          else {
            _$jscoverage['server.js'][542]++;
            if (userMode === "none") {
              _$jscoverage['server.js'][544]++;
              if (session.user) {
                _$jscoverage['server.js'][546]++;
                callback(Err.forbidden("User token cannot be used on a client endpoint"));
              }
              else {
                _$jscoverage['server.js'][550]++;
                callback(null);
              }
            }
            else {
              _$jscoverage['server.js'][553]++;
              if (userMode === "any") {
                _$jscoverage['server.js'][555]++;
                callback(null);
              }
              else {
                _$jscoverage['server.js'][559]++;
                callback(Err.internal("Unknown endpoint user mode"));
              }
            }
          }
        }
        else {
          _$jscoverage['server.js'][564]++;
          callback(Err.forbidden("Insufficient token scope ('" + scope + "' expected for client " + session.client + ")"));
        }
      }
      else {
        _$jscoverage['server.js'][569]++;
        callback(Err.internal("Missing client identifier in authenticated token"));
      }
    }
    else {
      _$jscoverage['server.js'][574]++;
      callback(Err.internal("Missing user object in authenticated token"));
    }
  }
  else {
    _$jscoverage['server.js'][581]++;
    if (isOptional && ! req.headers.authorization) {
      _$jscoverage['server.js'][584]++;
      callback(null);
    }
    else {
      _$jscoverage['server.js'][588]++;
      res.header("WWW-Authenticate", MAC.getWWWAuthenticateHeader(err));
      _$jscoverage['server.js'][589]++;
      callback(Err.generic(401, "Invalid authentication", err));
    }
  }
}));
});
_$jscoverage['server.js'][598]++;
internals.processBody = (function (req, level, server, callback) {
  _$jscoverage['server.js'][603]++;
  level = level || (req.method === "POST" || req.method === "PUT"? "parse": "none");
  _$jscoverage['server.js'][605]++;
  if (level === "none") {
    _$jscoverage['server.js'][607]++;
    return callback(null);
  }
  _$jscoverage['server.js'][612]++;
  var contentType = req.headers["content-type"];
  _$jscoverage['server.js'][613]++;
  var mime = (contentType? contentType.split(";")[0]: "application/json");
  _$jscoverage['server.js'][614]++;
  var parserFunc = null;
  _$jscoverage['server.js'][616]++;
  if (mime === "application/json") {
    _$jscoverage['server.js'][618]++;
    parserFunc = JSON.parse;
  }
  else {
    _$jscoverage['server.js'][620]++;
    if (mime === "application/x-www-form-urlencoded") {
      _$jscoverage['server.js'][622]++;
      parserFunc = Qs.parse;
    }
    else {
      _$jscoverage['server.js'][626]++;
      return callback(Err.badRequest("Unsupported content-type: " + mime));
    }
  }
  _$jscoverage['server.js'][631]++;
  var contentLength = req.headers["content-length"];
  _$jscoverage['server.js'][632]++;
  if (contentLength && parseInt(contentLength, 10) > server.settings.payload.maxBytes) {
    _$jscoverage['server.js'][635]++;
    return callback(Err.badRequest("Payload content length greater than maximum allowed: " + server.settings.payload.maxBytes));
  }
  _$jscoverage['server.js'][640]++;
  var payload = "";
  _$jscoverage['server.js'][641]++;
  var isBailed = false;
  _$jscoverage['server.js'][643]++;
  req.setEncoding("utf8");
  _$jscoverage['server.js'][644]++;
  req.addListener("data", (function (chunk) {
  _$jscoverage['server.js'][646]++;
  if (payload.length + chunk.length <= server.settings.payload.maxBytes) {
    _$jscoverage['server.js'][648]++;
    payload += chunk;
  }
  else {
    _$jscoverage['server.js'][652]++;
    isBailed = true;
    _$jscoverage['server.js'][653]++;
    return callback(Err.badRequest("Payload size greater than maximum allowed: " + server.settings.payload.maxBytes));
  }
}));
  _$jscoverage['server.js'][657]++;
  req.addListener("end", (function () {
  _$jscoverage['server.js'][659]++;
  if (isBailed) {
    _$jscoverage['server.js'][661]++;
    return;
  }
  _$jscoverage['server.js'][664]++;
  req.hapi.rawBody = payload;
  _$jscoverage['server.js'][666]++;
  if (level === "parse") {
    _$jscoverage['server.js'][668]++;
    if (payload) {
      _$jscoverage['server.js'][670]++;
      req.hapi.payload = {};
      _$jscoverage['server.js'][672]++;
      try {
        _$jscoverage['server.js'][674]++;
        req.hapi.payload = parserFunc(payload);
      }
      catch (err) {
        _$jscoverage['server.js'][678]++;
        return callback(Err.badRequest("Invalid JSON body"));
      }
      _$jscoverage['server.js'][681]++;
      callback(null);
    }
  }
}));
});
_$jscoverage['server.js'][690]++;
internals.parseCondition = (function (condition) {
  _$jscoverage['server.js'][692]++;
  if (condition) {
    _$jscoverage['server.js'][694]++;
    result = {};
    _$jscoverage['server.js'][696]++;
    var conditionRegex = (condition.indexOf("\"") !== -1? /(?:^|,)(?:\s*")([^"]+)(?:"\s*)/g: /(?:^|,)(?:\s*)([^\s]+)(?:\s*)/g);
    _$jscoverage['server.js'][697]++;
    condition.replace(conditionRegex, (function ($0) {
  _$jscoverage['server.js'][699]++;
  if ($0) {
    _$jscoverage['server.js'][701]++;
    result[$0] = true;
  }
}));
    _$jscoverage['server.js'][705]++;
    return result;
  }
  else {
    _$jscoverage['server.js'][709]++;
    return ({});
  }
});
_$jscoverage['server.js'].source = ["/*","* Copyright (c) 2012 Walmart. All rights reserved. Copyrights licensed under the New BSD License.","* See LICENSE file included with this code project for license terms.","*/","","// Load modules","","var Express = require('express');","var Qs = require('qs');","var MAC = require('mac');","var Utils = require('./utils');","var Err = require('./error');","var Log = require('./log');","var Process = require('./process');","var Validation = require('./validation');","var Defaults = require('./defaults');","var Fs = require('fs');","","","// Declare internals","","var internals = {","","    // Servers instances by uri or name","","    servers: {}","};","","","// Create and configure server instance","","exports.create = function (host, port, options, routes) {","","    // Create server object","","    var server = {","","        // Private members","        // ----------------------------------------------------------------","","        settings: Utils.merge(Utils.clone(Defaults.server), options || {}),","        express: null,","","        // Initialize server","        // ----------------------------------------------------------------","","        initialize: function () {","","            // Set basic configuration","","            server.settings.host = host.toLowerCase();","            server.settings.port = port;","            server.settings.name = (server.settings.name ? server.settings.name.toLowerCase() : (server.settings.host + ':' + server.settings.port));","            server.settings.uri = (server.settings.tls ? 'https://' : 'http://') + server.settings.host + ':' + server.settings.port + '/';","","            // Verify no existing instances using the same uri or name","","            if (internals.servers[server.settings.name]) {","","                Log.err('Cannot configure multiple server instances using the same name or uri');","                process.exit(1);","            }","","            // Create server","","            if (server.settings.tls) {","","                var tls = {","","                    key: Fs.readFileSync(server.settings.tls.key),","                    cert: Fs.readFileSync(server.settings.tls.cert)","                };","","                server.express = Express.createServer(tls);","            }","            else {","","                server.express = Express.createServer();","            }","","            // Configure Express","","            server.express.configure(function () {","","                server.express.use(server.preRequest);                                                      // Pre-Request Middleware","                server.express.use(server.settings.ext.onPreRoute);","                server.express.use(server.preRoute);                                                        // Pre-Routes Middleware","                server.express.use(server.settings.ext.onPreHandler);","                server.express.use(server.express.router);                                                  // Load Routes","                server.express.use(server.settings.ext.onPostHandler);","                server.express.use(server.postRoute);                                                       // Post-Routes Middleware","                server.express.use(server.settings.ext.onPostRoute);","            });","","            // Override generic OPTIONS route","","            server.express.options(/.+/, function (req, res, next) {","","                res.hapi.result = ' ';","                server.postRoute(req, res, next);","            });","","            // Add to instance list","","            internals.servers[server.settings.name] = server;","","            // Add routes","","            if (routes) {","","                server.public.addRoutes(routes);","            }","        },","","        // Request pre-processor","        // ----------------------------------------------------------------","","        preRequest: function (req, res, next) {","","            req._startTime = new Date; // Used to determine request response time ","","            next();","        },","","        // Route pre-processor","        // ----------------------------------------------------------------","","        preRoute: function (req, res, next) {","","            Log.info('Received', req);","","            req.hapi = {};","            res.hapi = {};","","            res.hapi.wasProcessed = false;","","            next();","        },","","        // Set default response headers and send response","        // ----------------------------------------------------------------","","        postRoute: function (req, res, next) {","","            if (res.hapi.isReplied !== true) {","","                res.header('Access-Control-Allow-Origin', '*');","                res.header('Access-Control-Allow-Methods', 'GET, HEAD, POST, PUT, DELETE, OPTIONS');","                res.header('Access-Control-Allow-Headers', 'Authorization, Content-Type, If-None-Match');","                res.header('Access-Control-Max-Age', server.settings.cors.maxAge);","","                res.header('Cache-Control', 'must-revalidate');","","                if (res.hapi.result) {","","                    var rev = null;                         // Need to set to something useful","                    if (req.method === 'GET' &amp;&amp; rev) {","","                        res.header('ETag', rev);","","                        var condition = internals.parseCondition(req.headers['if-none-match']);","","                        if (condition[rev] ||","                            condition['*']) {","","                            res.send('', 304);","                        }","                        else {","","                            res.send(res.hapi.result);","                        }","                    }","                    else if (res.hapi.options.created) {","","                        res.send(res.hapi.result, { 'Location': server.settings.uri + res.hapi.options.created }, 201);","                    }","                    else {","","                        res.send(res.hapi.result);","                    }","","                    Log.info('Replied', req);","                }","                else {","","                    var error = res.hapi.error || Err.notFound('No such path or method');","","                    if (error.type === 'oauth') {","","                        res.send({ error: error.error, error_description: error.text }, error.code);","                    }","                    else {","","                        res.send({ error: error.text, message: error.message, code: error.code }, error.code);","                    }","","                    if (res.hapi.error) {","","                        Log.err(res.hapi.error, req);","                    }","                    else {","","                        Log.info(error, req);","                    }","                }","","                res.hapi.isReplied = true;","            }","        },","","        // Public members","","        public: {","","            // Start server listener","            // ----------------------------------------------------------------","","            start: function () {","","                server.express.listen(server.settings.port, server.settings.host);","                Log.info(Process.settings.name + ' Server instance started at ' + server.settings.uri);","            },","","            // Stop server","            // ----------------------------------------------------------------","","            stop: function () {","","                server.express.close();","                Log.info(Process.settings.name + ' Server instance stopped at ' + server.settings.uri);","            },","","            // Add server route","            // ----------------------------------------------------------------","","            addRoute: function (config) {","","                var handler = function (req, res, next) {","","                    res.hapi.wasProcessed = true;","","                    // Authentication","","                    internals.authenticate(req, res, config, server, function (err) {","","                        if (err === null) {","","                            // Query parameters","","                            Validation.validateQuery(req, config.query ? Utils.map(config.query) : null, function (err) {","","                                if (err === null) {","","                                    // Load payload","","                                    internals.processBody(req, config.payload || (config.schema ? 'parse' : null), server, function (err) {","","                                        if (err === null) {","","                                            // Validate payload schema","","                                            Validation.validateData(req, config.schema || null, function (err) {","","                                                if (err === null) {","","                                                    // Route handler","","                                                    if (config.handler) {","","                                                        // Move req stuff into hapi object","","                                                        req.hapi.url = req.url;","                                                        req.hapi.query = req.query;","                                                        req.hapi.params = req.params;","","                                                        config.handler(req.hapi, function (result, options) {","","                                                            if (result instanceof Error) {","","                                                                res.hapi.error = result;","                                                            }","                                                            else {","","                                                                res.hapi.result = result;","                                                            }","","                                                            res.hapi.options = options || {};","                                                            next();","                                                        });","                                                    }","                                                    else {","","                                                        res.hapi.error = Err.internal('Route missing handler');","                                                        next();","                                                    }","                                                }","                                                else {","","                                                    res.hapi.error = err;","                                                    next();","                                                }","                                            });","                                        }","                                        else {","","                                            res.hapi.error = err;","                                            next();","                                        }","                                    });","                                }","                                else {","","                                    res.hapi.error = err;","                                    next();","                                }","                            });","                        }","                        else {","","                            res.hapi.error = err;","                            next();","                        }","                    });","                };","","                // Add route to Express","","                switch (config.method) {","","                    case 'GET': server.express.get(config.path, handler); break;","                    case 'POST': server.express.post(config.path, handler); break;","                    case 'PUT': server.express.put(config.path, handler); break;","                    case 'DELETE': server.express.del(config.path, handler); break;","                    default: process.exit(1); break;","                }","            },","","            addRoutes: function (routes) {","","                for (var i = 0, il = routes.length; i &lt; il; ++i) {","","                    server.public.addRoute(routes[i]);","                }","            },","","            // Access internal Express server object","            // ----------------------------------------------------------------","","            getExpress: function () {","","                return server.express;","            }","        }","    };","","    // Initialize","","    server.initialize();","","    // Return public interface","","    return server.public;","};","","","// Return server object","","exports.instance = function (name) {","","    if (name) {","","        name = name.toLowerCase();","","        var server = internals.servers[name];","        if (server) {","","            return server;","        }","        else {","","            return null;","        }","    }","    else {","","        var names = Object.keys(internals.servers);","        if (names.length === 1) {","","            return internals.servers[names[0]];","        }","        else if (names.length === 0) {","","            return null;","        }","        else {","","            Log.err('Cannot call Server.instance() without uri in a process with multiple server instances');","            process.exit(1);","        }","    }","};","","","// Return server object configuration","","exports.settings = function (name) {","","    var server = exports.instance(name);","    if (server) {","","        return server.settings;","    }","    else {","","        return null;","    }","};","","","// Add routes to multiple instances","","exports.addRoutes = function (arg0, arg1) { // [defaultInstances,] routes","","    // Handle optional arguments","","    var defaultInstances = (arguments.length === 2 ? (arguments[0] instanceof Array ? arguments[0] : [arguments[0]]) : null);","    var routes = (arguments.length === 2 ? arguments[1] : arguments[0]);","","    // Process each route","","    routes = (routes instanceof Array ? routes : [routes]);","    for (var i = 0, il = routes.length; i &lt; il; ++i) {","","        var route = routes[i];","        if (route.instance || defaultInstances) {","","            // Select instances","","            var instances = (route.instance ? (route.instance instanceof Array ? route.instance : [route.instance]) : defaultInstances);","            for (var r = 0, rl = instances.length; r &lt; rl; ++r) {","","                var server = internals.servers[instances[r].toLowerCase()];","                if (server) {","","                    server.public.addRoute(route);","                }","                else {","","                    Log.err('Cannot find server instance: ' + instances[r]);","                    process.exit(1);","                }","            }","        }","        else {","","            // All instances","","            for (var s in internals.servers) {","","                if (internals.servers.hasOwnProperty(s)) {","","                    internals.servers[s].public.addRoute(route);","                }","            }","        }","    }","};","","","// Token Authentication","","internals.authenticate = function (req, res, routeConfig, server, callback) {","","    var scope = routeConfig.scope || null;","    var minTos = routeConfig.tos || server.settings.tos.min;","    var userMode = routeConfig.user || 'required';","    var isOptional = (routeConfig.authentication === 'optional');","","    if (routeConfig.authentication === 'none') {","","        callback(null);","        return;","    }","","    var getSession = function (id, callback) {","","        if (server.settings.authentication.loadSessionFunc) {","","            server.settings.authentication.loadSessionFunc(id, function (session) {","","                callback(session);","            });","        }","        else {","","            Log.err('Not configured to recieve authenticated requests');","            callback(null);","        }","    };","","    MAC.authenticate(req, getSession, { isHTTPS: server.settings.tls }, function (isAuthenticated, session, err) {","","        if (isAuthenticated) {","","            if (session) {","","                req.hapi.session = session;","","                if (session.client) {","","                    req.hapi.clientId = session.client;","","                    // Check scope","","                    if (scope === null ||","                        session.scope[scope]) {","","                        req.hapi.scope = session.scope;","","                        if (userMode === 'required') {","","                            if (session.user) {","","                                // Check TOS","","                                if (minTos === 'none' ||","                                    (session.tos &amp;&amp; session.tos &gt;= minTos)) {","","                                    req.hapi.userId = session.user;","                                    callback(null);","                                }","                                else {","","                                    callback(Err.forbidden('Insufficient TOS accepted'));","                                }","                            }","                            else {","","                                callback(Err.forbidden('Client token cannot be used on a user endpoint'));","                            }","                        }","                        else if (userMode === 'none') {","","                            if (session.user) {","","                                callback(Err.forbidden('User token cannot be used on a client endpoint'));","                            }","                            else {","","                                callback(null);","                            }","                        }","                        else if (userMode === 'any') {","","                            callback(null);","                        }","                        else {","","                            callback(Err.internal('Unknown endpoint user mode'));","                        }","                    }","                    else {","","                        callback(Err.forbidden('Insufficient token scope (\\'' + scope + '\\' expected for client ' + session.client + ')'));","                    }","                }","                else {","","                    callback(Err.internal('Missing client identifier in authenticated token'));","                }","            }","            else {","","                callback(Err.internal('Missing user object in authenticated token'));","            }","        }","        else {","","            // Unauthenticated","","            if (isOptional &amp;&amp;","                !req.headers.authorization) {","","                callback(null);","            }","            else {","","                res.header('WWW-Authenticate', MAC.getWWWAuthenticateHeader(err));","                callback(Err.generic(401, 'Invalid authentication', err));","            }","        }","    });","};","","","// Read and parse body","","internals.processBody = function (req, level, server, callback) {","","    // Levels are: 'none', 'raw', 'parse'","    // Default is 'parse' for POST and PUT otherwise 'none'","","    level = level || (req.method === 'POST' || req.method === 'PUT' ? 'parse' : 'none');","","    if (level === 'none') {","","        return callback(null);","    }","","    // Check content type (defaults to 'application/json')","","    var contentType = req.headers['content-type'];","    var mime = (contentType ? contentType.split(';')[0] : 'application/json');","    var parserFunc = null;","","    if (mime === 'application/json') {","","        parserFunc = JSON.parse;","    }","    else if (mime === 'application/x-www-form-urlencoded') {","","        parserFunc = Qs.parse;","    }","    else {","","        return callback(Err.badRequest('Unsupported content-type: ' + mime));","    }","","    // Check content size","","    var contentLength = req.headers['content-length'];","    if (contentLength &amp;&amp;","        parseInt(contentLength, 10) &gt; server.settings.payload.maxBytes) {","","        return callback(Err.badRequest('Payload content length greater than maximum allowed: ' + server.settings.payload.maxBytes));","    }","","    // Read incoming payload","","    var payload = '';","    var isBailed = false;","","    req.setEncoding('utf8');","    req.addListener('data', function (chunk) {","","        if (payload.length + chunk.length &lt;= server.settings.payload.maxBytes) {","","            payload += chunk;","        }","        else {","","            isBailed = true;","            return callback(Err.badRequest('Payload size greater than maximum allowed: ' + server.settings.payload.maxBytes));","        }","    });","","    req.addListener('end', function () {","","        if (isBailed) {","","            return;","        }","","        req.hapi.rawBody = payload;","","        if (level === 'parse') {","","            if (payload) {","","                req.hapi.payload = {};","","                try {","","                    req.hapi.payload = parserFunc(payload);","                }","                catch (err) {","","                    return callback(Err.badRequest('Invalid JSON body'));","                }","","                callback(null);","            }","        }","    });","};","","","// Parse If-None-Match request header","","internals.parseCondition = function (condition) {","","    if (condition) {","","        result = {};","","        var conditionRegex = (condition.indexOf('\"') !== -1 ? /(?:^|,)(?:\\s*\")([^\"]+)(?:\"\\s*)/g : /(?:^|,)(?:\\s*)([^\\s]+)(?:\\s*)/g);","        condition.replace(conditionRegex, function ($0) {","","            if ($0) {","","                result[$0] = true;","            }","        });","","        return result;","    }","    else {","","        return {};","    }","};"];
