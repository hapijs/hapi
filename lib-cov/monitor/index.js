/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['monitor/index.js']) {
  _$jscoverage['monitor/index.js'] = [];
  _$jscoverage['monitor/index.js'][4] = 0;
  _$jscoverage['monitor/index.js'][5] = 0;
  _$jscoverage['monitor/index.js'][12] = 0;
  _$jscoverage['monitor/index.js'][13] = 0;
  _$jscoverage['monitor/index.js'][14] = 0;
  _$jscoverage['monitor/index.js'][17] = 0;
  _$jscoverage['monitor/index.js'][20] = 0;
  _$jscoverage['monitor/index.js'][23] = 0;
  _$jscoverage['monitor/index.js'][24] = 0;
  _$jscoverage['monitor/index.js'][26] = 0;
  _$jscoverage['monitor/index.js'][32] = 0;
  _$jscoverage['monitor/index.js'][37] = 0;
  _$jscoverage['monitor/index.js'][38] = 0;
  _$jscoverage['monitor/index.js'][39] = 0;
  _$jscoverage['monitor/index.js'][41] = 0;
  _$jscoverage['monitor/index.js'][42] = 0;
  _$jscoverage['monitor/index.js'][49] = 0;
  _$jscoverage['monitor/index.js'][50] = 0;
  _$jscoverage['monitor/index.js'][52] = 0;
  _$jscoverage['monitor/index.js'][53] = 0;
  _$jscoverage['monitor/index.js'][54] = 0;
  _$jscoverage['monitor/index.js'][57] = 0;
  _$jscoverage['monitor/index.js'][58] = 0;
  _$jscoverage['monitor/index.js'][59] = 0;
  _$jscoverage['monitor/index.js'][60] = 0;
  _$jscoverage['monitor/index.js'][61] = 0;
  _$jscoverage['monitor/index.js'][66] = 0;
  _$jscoverage['monitor/index.js'][69] = 0;
  _$jscoverage['monitor/index.js'][70] = 0;
  _$jscoverage['monitor/index.js'][72] = 0;
  _$jscoverage['monitor/index.js'][73] = 0;
  _$jscoverage['monitor/index.js'][74] = 0;
  _$jscoverage['monitor/index.js'][75] = 0;
  _$jscoverage['monitor/index.js'][77] = 0;
  _$jscoverage['monitor/index.js'][81] = 0;
  _$jscoverage['monitor/index.js'][82] = 0;
  _$jscoverage['monitor/index.js'][83] = 0;
  _$jscoverage['monitor/index.js'][84] = 0;
  _$jscoverage['monitor/index.js'][85] = 0;
  _$jscoverage['monitor/index.js'][86] = 0;
  _$jscoverage['monitor/index.js'][87] = 0;
  _$jscoverage['monitor/index.js'][88] = 0;
  _$jscoverage['monitor/index.js'][89] = 0;
  _$jscoverage['monitor/index.js'][107] = 0;
}
_$jscoverage['monitor/index.js'][4]++;
var Client = require("../client");
_$jscoverage['monitor/index.js'][5]++;
var Utils = require("../utils");
_$jscoverage['monitor/index.js'][12]++;
function Monitor(server) {
  _$jscoverage['monitor/index.js'][13]++;
  this.server = server.express;
  _$jscoverage['monitor/index.js'][14]++;
  this.options = Utils.merge({}, server.settings || {});
  _$jscoverage['monitor/index.js'][17]++;
  this.process = require("./process");
  _$jscoverage['monitor/index.js'][20]++;
  this.os = require("./os");
  _$jscoverage['monitor/index.js'][23]++;
  this.clients = {};
  _$jscoverage['monitor/index.js'][24]++;
  this.timer = null;
  _$jscoverage['monitor/index.js'][26]++;
  return this;
}
_$jscoverage['monitor/index.js'][32]++;
Monitor.prototype._options = {};
_$jscoverage['monitor/index.js'][37]++;
Monitor.prototype.getClient = (function (host) {
  _$jscoverage['monitor/index.js'][38]++;
  if (this.clients.hasOwnProperty(host)) {
    _$jscoverage['monitor/index.js'][39]++;
    return this.clients[host];
  }
  else {
    _$jscoverage['monitor/index.js'][41]++;
    this.clients[host] = new Client({host: host});
    _$jscoverage['monitor/index.js'][42]++;
    return this.clients[host];
  }
});
_$jscoverage['monitor/index.js'][49]++;
Monitor.prototype.logger = (function () {
  _$jscoverage['monitor/index.js'][50]++;
  var self = this;
  _$jscoverage['monitor/index.js'][52]++;
  if (this.server) {
    _$jscoverage['monitor/index.js'][53]++;
    this.server.removeListener("request", this.handle("request"));
    _$jscoverage['monitor/index.js'][54]++;
    this.server.on("request", this.handle("request"));
  }
  _$jscoverage['monitor/index.js'][57]++;
  if (this.options.monitor.interval && Object.keys(this.options.monitor.ops).length > 0) {
    _$jscoverage['monitor/index.js'][58]++;
    clearInterval(this.timer);
    _$jscoverage['monitor/index.js'][59]++;
    this.timer = setInterval((function (s) {
  _$jscoverage['monitor/index.js'][60]++;
  return (function () {
  _$jscoverage['monitor/index.js'][61]++;
  return s.meter();
});
})(self), this.options.monitor.interval);
  }
  _$jscoverage['monitor/index.js'][66]++;
  return this.process.instrument;
});
_$jscoverage['monitor/index.js'][69]++;
Monitor.prototype.meter = (function () {
  _$jscoverage['monitor/index.js'][70]++;
  var event = "ops";
  _$jscoverage['monitor/index.js'][72]++;
  var hosts = Object.keys(this.options.monitor[event]);
  _$jscoverage['monitor/index.js'][73]++;
  for (var i in hosts) {
    _$jscoverage['monitor/index.js'][74]++;
    var host = hosts[i];
    _$jscoverage['monitor/index.js'][75]++;
    var client = this.getClient(host);
    _$jscoverage['monitor/index.js'][77]++;
    this.options.monitor[event][host](client, this)();
}
});
_$jscoverage['monitor/index.js'][81]++;
Monitor.prototype.handle = (function (event) {
  _$jscoverage['monitor/index.js'][82]++;
  var self = this;
  _$jscoverage['monitor/index.js'][83]++;
  return (function (req, res) {
  _$jscoverage['monitor/index.js'][84]++;
  if (typeof self.options.monitor[event] !== "undefined" && self.options.monitor[event] !== null) {
    _$jscoverage['monitor/index.js'][85]++;
    var hosts = Object.keys(self.options.monitor[event]);
    _$jscoverage['monitor/index.js'][86]++;
    for (var i in hosts) {
      _$jscoverage['monitor/index.js'][87]++;
      var host = hosts[i];
      _$jscoverage['monitor/index.js'][88]++;
      var client = self.getClient(host);
      _$jscoverage['monitor/index.js'][89]++;
      self.options.monitor[event][host](client, self)(req, res);
}
  }
});
});
_$jscoverage['monitor/index.js'][107]++;
module.exports = exports = Monitor;
_$jscoverage['monitor/index.js'].source = ["/**"," * Module dependencies."," */","var Client = require(\"../client\");","var Utils = require(\"../utils\");","","/**"," * Monitor constructor"," *"," * @api public"," */","function Monitor(server) {","  this.server = server.express;","  this.options = Utils.merge({}, server.settings || {});","  ","  // Load process level fns","  this.process = require('./process');","  ","  // Load OS level fns","  this.os = require(\"./os\");","  ","  // Public properties","  this.clients = {};","  this.timer = null;","  ","  return this;","}","","/**"," * Default options for Monitor"," */","Monitor.prototype._options = {","  // client: new Client(),","  // handlers: {}","};","","Monitor.prototype.getClient = function(host){","  if (this.clients.hasOwnProperty(host)){","    return this.clients[host];","  } else {","    this.clients[host] = new Client({host: host});","    return this.clients[host];","  }","}","","/**"," * Hapi Middleware"," */","Monitor.prototype.logger = function(){","  var self = this;","  ","  if (this.server){","    this.server.removeListener('request', this.handle('request'));","    this.server.on('request', this.handle('request'));","  }","  ","  if (this.options.monitor.interval &amp;&amp; Object.keys(this.options.monitor.ops).length &gt; 0){","    clearInterval(this.timer);","    this.timer = setInterval((function(s){","      return function(){","        return s.meter();","      }","    })(self), this.options.monitor.interval);","  }","  ","  return this.process.instrument;","};","","Monitor.prototype.meter = function(){","  var event = \"ops\";","  // TODO: factor out into shared fn","  var hosts = Object.keys(this.options.monitor[event]);","  for(var i in hosts){","    var host = hosts[i];","    var client = this.getClient(host);","    // console.log(this.os.poll_cpu.toString())","    this.options.monitor[event][host](client, this)();","  }","}","","Monitor.prototype.handle = function(event){","  var self = this;","  return function(req, res){","    if (typeof self.options.monitor[event] !== 'undefined' &amp;&amp; self.options.monitor[event] !== null){","      var hosts = Object.keys(self.options.monitor[event]);","      for(var i in hosts){","        var host = hosts[i];","        var client = self.getClient(host);","        self.options.monitor[event][host](client, self)(req, res);","      }","    }","  }","}","","// Monitor.prototype.handle = function(signal){","//   var fns = [];","//   if (!this.monitor.hasOwnProperty(signal)){","//     throw \"No such handler found (\" + signal + \")\";","//   } else {","//     for(var host in this.monitor[signal]){","//       fns.append([host, this.monitor[signal][host]])","//     }","//   }","// }","","// Module exports","module.exports = exports = Monitor;"];
