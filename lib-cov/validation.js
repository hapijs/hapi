/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['validation.js']) {
  _$jscoverage['validation.js'] = [];
  _$jscoverage['validation.js'][8] = 0;
  _$jscoverage['validation.js'][9] = 0;
  _$jscoverage['validation.js'][14] = 0;
  _$jscoverage['validation.js'][19] = 0;
  _$jscoverage['validation.js'][21] = 0;
  _$jscoverage['validation.js'][23] = 0;
  _$jscoverage['validation.js'][26] = 0;
  _$jscoverage['validation.js'][27] = 0;
  _$jscoverage['validation.js'][29] = 0;
  _$jscoverage['validation.js'][31] = 0;
  _$jscoverage['validation.js'][33] = 0;
  _$jscoverage['validation.js'][34] = 0;
  _$jscoverage['validation.js'][39] = 0;
  _$jscoverage['validation.js'][41] = 0;
  _$jscoverage['validation.js'][45] = 0;
  _$jscoverage['validation.js'][52] = 0;
  _$jscoverage['validation.js'][54] = 0;
  _$jscoverage['validation.js'][56] = 0;
  _$jscoverage['validation.js'][59] = 0;
  _$jscoverage['validation.js'][60] = 0;
  _$jscoverage['validation.js'][64] = 0;
  _$jscoverage['validation.js'][66] = 0;
  _$jscoverage['validation.js'][68] = 0;
  _$jscoverage['validation.js'][70] = 0;
  _$jscoverage['validation.js'][72] = 0;
  _$jscoverage['validation.js'][73] = 0;
  _$jscoverage['validation.js'][74] = 0;
  _$jscoverage['validation.js'][80] = 0;
  _$jscoverage['validation.js'][84] = 0;
  _$jscoverage['validation.js'][86] = 0;
  _$jscoverage['validation.js'][90] = 0;
  _$jscoverage['validation.js'][92] = 0;
  _$jscoverage['validation.js'][93] = 0;
  _$jscoverage['validation.js'][94] = 0;
  _$jscoverage['validation.js'][99] = 0;
  _$jscoverage['validation.js'][101] = 0;
  _$jscoverage['validation.js'][102] = 0;
  _$jscoverage['validation.js'][103] = 0;
  _$jscoverage['validation.js'][108] = 0;
  _$jscoverage['validation.js'][112] = 0;
  _$jscoverage['validation.js'][116] = 0;
  _$jscoverage['validation.js'][119] = 0;
  _$jscoverage['validation.js'][120] = 0;
  _$jscoverage['validation.js'][121] = 0;
  _$jscoverage['validation.js'][126] = 0;
  _$jscoverage['validation.js'][128] = 0;
  _$jscoverage['validation.js'][129] = 0;
  _$jscoverage['validation.js'][131] = 0;
  _$jscoverage['validation.js'][132] = 0;
  _$jscoverage['validation.js'][133] = 0;
  _$jscoverage['validation.js'][139] = 0;
  _$jscoverage['validation.js'][141] = 0;
  _$jscoverage['validation.js'][146] = 0;
  _$jscoverage['validation.js'][147] = 0;
  _$jscoverage['validation.js'][148] = 0;
  _$jscoverage['validation.js'][153] = 0;
  _$jscoverage['validation.js'][155] = 0;
  _$jscoverage['validation.js'][156] = 0;
  _$jscoverage['validation.js'][158] = 0;
  _$jscoverage['validation.js'][159] = 0;
  _$jscoverage['validation.js'][160] = 0;
  _$jscoverage['validation.js'][168] = 0;
  _$jscoverage['validation.js'][170] = 0;
  _$jscoverage['validation.js'][174] = 0;
  _$jscoverage['validation.js'][179] = 0;
  _$jscoverage['validation.js'][183] = 0;
  _$jscoverage['validation.js'][187] = 0;
  _$jscoverage['validation.js'][189] = 0;
  _$jscoverage['validation.js'][193] = 0;
  _$jscoverage['validation.js'][199] = 0;
  _$jscoverage['validation.js'][201] = 0;
  _$jscoverage['validation.js'][203] = 0;
  _$jscoverage['validation.js'][204] = 0;
  _$jscoverage['validation.js'][205] = 0;
  _$jscoverage['validation.js'][206] = 0;
  _$jscoverage['validation.js'][207] = 0;
  _$jscoverage['validation.js'][208] = 0;
  _$jscoverage['validation.js'][211] = 0;
  _$jscoverage['validation.js'][213] = 0;
  _$jscoverage['validation.js'][216] = 0;
  _$jscoverage['validation.js'][217] = 0;
  _$jscoverage['validation.js'][219] = 0;
  _$jscoverage['validation.js'][221] = 0;
  _$jscoverage['validation.js'][224] = 0;
  _$jscoverage['validation.js'][225] = 0;
  _$jscoverage['validation.js'][226] = 0;
  _$jscoverage['validation.js'][228] = 0;
  _$jscoverage['validation.js'][230] = 0;
  _$jscoverage['validation.js'][233] = 0;
  _$jscoverage['validation.js'][235] = 0;
  _$jscoverage['validation.js'][238] = 0;
  _$jscoverage['validation.js'][240] = 0;
  _$jscoverage['validation.js'][243] = 0;
  _$jscoverage['validation.js'][244] = 0;
  _$jscoverage['validation.js'][248] = 0;
  _$jscoverage['validation.js'][250] = 0;
  _$jscoverage['validation.js'][253] = 0;
  _$jscoverage['validation.js'][254] = 0;
  _$jscoverage['validation.js'][256] = 0;
  _$jscoverage['validation.js'][258] = 0;
  _$jscoverage['validation.js'][261] = 0;
  _$jscoverage['validation.js'][262] = 0;
  _$jscoverage['validation.js'][263] = 0;
  _$jscoverage['validation.js'][265] = 0;
  _$jscoverage['validation.js'][267] = 0;
  _$jscoverage['validation.js'][270] = 0;
  _$jscoverage['validation.js'][272] = 0;
  _$jscoverage['validation.js'][275] = 0;
  _$jscoverage['validation.js'][277] = 0;
  _$jscoverage['validation.js'][280] = 0;
  _$jscoverage['validation.js'][281] = 0;
  _$jscoverage['validation.js'][284] = 0;
}
_$jscoverage['validation.js'][8]++;
var Utils = require("./utils");
_$jscoverage['validation.js'][9]++;
var Err = require("./error");
_$jscoverage['validation.js'][14]++;
var internals = {};
_$jscoverage['validation.js'][19]++;
exports.validateQuery = (function (req, parameters, callback) {
  _$jscoverage['validation.js'][21]++;
  if (parameters === null) {
    _$jscoverage['validation.js'][23]++;
    return callback(null);
  }
  _$jscoverage['validation.js'][26]++;
  var isInvalid = false;
  _$jscoverage['validation.js'][27]++;
  for (var i in req.query) {
    _$jscoverage['validation.js'][29]++;
    if (req.query.hasOwnProperty(i)) {
      _$jscoverage['validation.js'][31]++;
      if (parameters[i] !== true) {
        _$jscoverage['validation.js'][33]++;
        isInvalid = true;
        _$jscoverage['validation.js'][34]++;
        break;
      }
    }
}
  _$jscoverage['validation.js'][39]++;
  if (isInvalid) {
    _$jscoverage['validation.js'][41]++;
    callback(Err.badRequest("Unknown parameter: " + i));
  }
  else {
    _$jscoverage['validation.js'][45]++;
    callback(null);
  }
});
_$jscoverage['validation.js'][52]++;
exports.validateData = (function (req, definition, callback) {
  _$jscoverage['validation.js'][54]++;
  if (definition === null) {
    _$jscoverage['validation.js'][56]++;
    return callback(null);
  }
  _$jscoverage['validation.js'][59]++;
  var isInvalid = false;
  _$jscoverage['validation.js'][60]++;
  var err = "";
  _$jscoverage['validation.js'][64]++;
  for (var i in definition) {
    _$jscoverage['validation.js'][66]++;
    if (definition.hasOwnProperty(i)) {
      _$jscoverage['validation.js'][68]++;
      if (definition[i].required === true) {
        _$jscoverage['validation.js'][70]++;
        if (req.hapi.payload[i] === undefined) {
          _$jscoverage['validation.js'][72]++;
          err = "missing required parameter";
          _$jscoverage['validation.js'][73]++;
          isInvalid = true;
          _$jscoverage['validation.js'][74]++;
          break;
        }
      }
    }
}
  _$jscoverage['validation.js'][80]++;
  if (isInvalid === false) {
    _$jscoverage['validation.js'][84]++;
    for (var i in req.hapi.payload) {
      _$jscoverage['validation.js'][86]++;
      if (req.hapi.payload.hasOwnProperty(i)) {
        _$jscoverage['validation.js'][90]++;
        if (definition[i] === undefined) {
          _$jscoverage['validation.js'][92]++;
          err = "unknown parameter";
          _$jscoverage['validation.js'][93]++;
          isInvalid = true;
          _$jscoverage['validation.js'][94]++;
          break;
        }
        _$jscoverage['validation.js'][99]++;
        if (definition[i].set === false) {
          _$jscoverage['validation.js'][101]++;
          err = "forbidden parameter";
          _$jscoverage['validation.js'][102]++;
          isInvalid = true;
          _$jscoverage['validation.js'][103]++;
          break;
        }
        _$jscoverage['validation.js'][108]++;
        if (definition[i].array === true) {
          _$jscoverage['validation.js'][112]++;
          if (req.hapi.payload[i] instanceof Array) {
            _$jscoverage['validation.js'][116]++;
            if (req.hapi.payload[i].length === 0 && definition[i].empty !== true) {
              _$jscoverage['validation.js'][119]++;
              err = "empty array not allowed";
              _$jscoverage['validation.js'][120]++;
              isInvalid = true;
              _$jscoverage['validation.js'][121]++;
              break;
            }
            _$jscoverage['validation.js'][126]++;
            for (var a = 0, al = req.hapi.payload[i].length; a < al; ++a) {
              _$jscoverage['validation.js'][128]++;
              var message = internals.checkValue(req.hapi.payload[i][a], definition[i], false);
              _$jscoverage['validation.js'][129]++;
              if (message) {
                _$jscoverage['validation.js'][131]++;
                err = "invalid array value - " + message;
                _$jscoverage['validation.js'][132]++;
                isInvalid = true;
                _$jscoverage['validation.js'][133]++;
                break;
              }
}
            _$jscoverage['validation.js'][139]++;
            if (isInvalid === true) {
              _$jscoverage['validation.js'][141]++;
              break;
            }
          }
          else {
            _$jscoverage['validation.js'][146]++;
            err = "array value required";
            _$jscoverage['validation.js'][147]++;
            isInvalid = true;
            _$jscoverage['validation.js'][148]++;
            break;
          }
        }
        else {
          _$jscoverage['validation.js'][153]++;
          if (definition[i].type !== "any") {
            _$jscoverage['validation.js'][155]++;
            var result = internals.checkValue(req.hapi.payload[i], definition[i], definition[i].empty);
            _$jscoverage['validation.js'][156]++;
            if (result) {
              _$jscoverage['validation.js'][158]++;
              err = result;
              _$jscoverage['validation.js'][159]++;
              isInvalid = true;
              _$jscoverage['validation.js'][160]++;
              break;
            }
          }
        }
      }
}
  }
  _$jscoverage['validation.js'][168]++;
  if (isInvalid) {
    _$jscoverage['validation.js'][170]++;
    callback(Err.badRequest("'" + i + "': " + err));
  }
  else {
    _$jscoverage['validation.js'][174]++;
    callback(null);
  }
});
_$jscoverage['validation.js'][179]++;
internals.checkValue = (function (value, definition, isEmptyAllowed) {
  _$jscoverage['validation.js'][183]++;
  if (value === null || (typeof value === "number" && isNaN(value)) || (typeof value === "string" && value === "")) {
    _$jscoverage['validation.js'][187]++;
    if (isEmptyAllowed !== true) {
      _$jscoverage['validation.js'][189]++;
      return "empty value not allowed";
    }
    else {
      _$jscoverage['validation.js'][193]++;
      return "";
    }
  }
  _$jscoverage['validation.js'][199]++;
  var isValid = false;
  _$jscoverage['validation.js'][201]++;
  switch (definition.type) {
  case "string":
    _$jscoverage['validation.js'][203]++;
    isValid = (typeof value === "string");
    _$jscoverage['validation.js'][203]++;
    break;
  case "id":
    _$jscoverage['validation.js'][204]++;
    isValid = (typeof value === "string");
    _$jscoverage['validation.js'][204]++;
    break;
  case "number":
    _$jscoverage['validation.js'][205]++;
    isValid = (typeof value === "number");
    _$jscoverage['validation.js'][205]++;
    break;
  case "enum":
    _$jscoverage['validation.js'][206]++;
    isValid = (typeof value === "string" && definition.values && definition.values[value] > 0);
    _$jscoverage['validation.js'][206]++;
    break;
  case "object":
    _$jscoverage['validation.js'][207]++;
    isValid = (typeof value === "object");
    _$jscoverage['validation.js'][207]++;
    break;
  case "email":
    _$jscoverage['validation.js'][208]++;
    isValid = Utils.checkEmail(value);
    _$jscoverage['validation.js'][208]++;
    break;
  case "date":
    _$jscoverage['validation.js'][211]++;
    if (typeof value !== "string") {
      _$jscoverage['validation.js'][213]++;
      return "value must be a string";
    }
    _$jscoverage['validation.js'][216]++;
    var dateRegex = /^([12]\d\d\d)-([01]\d)-([0123]\d)$/;
    _$jscoverage['validation.js'][217]++;
    var date = dateRegex.exec(value);
    _$jscoverage['validation.js'][219]++;
    if (date === null || date.length !== 4) {
      _$jscoverage['validation.js'][221]++;
      return "invalid date string format";
    }
    _$jscoverage['validation.js'][224]++;
    var year = parseInt(date[1], 10);
    _$jscoverage['validation.js'][225]++;
    var month = parseInt(date[2], 10);
    _$jscoverage['validation.js'][226]++;
    var day = parseInt(date[3], 10);
    _$jscoverage['validation.js'][228]++;
    if (year < 1970 || year > 3000) {
      _$jscoverage['validation.js'][230]++;
      return "invalid year: " + date[1];
    }
    _$jscoverage['validation.js'][233]++;
    if (month < 1 || month > 12) {
      _$jscoverage['validation.js'][235]++;
      return "invalid month: " + date[2];
    }
    _$jscoverage['validation.js'][238]++;
    if (day < 1 || day > 31) {
      _$jscoverage['validation.js'][240]++;
      return "invalid day: " + date[3];
    }
    _$jscoverage['validation.js'][243]++;
    isValid = true;
    _$jscoverage['validation.js'][244]++;
    break;
  case "time":
    _$jscoverage['validation.js'][248]++;
    if (typeof value !== "string") {
      _$jscoverage['validation.js'][250]++;
      return "value must be a string";
    }
    _$jscoverage['validation.js'][253]++;
    var timeRegex = /^([012]\d):([012345]\d):([012345]\d)$/;
    _$jscoverage['validation.js'][254]++;
    var time = timeRegex.exec(value);
    _$jscoverage['validation.js'][256]++;
    if (time === null || time.length !== 4) {
      _$jscoverage['validation.js'][258]++;
      return "invalid time string format";
    }
    _$jscoverage['validation.js'][261]++;
    var hour = parseInt(time[1], 10);
    _$jscoverage['validation.js'][262]++;
    var minute = parseInt(time[2], 10);
    _$jscoverage['validation.js'][263]++;
    var second = parseInt(time[3], 10);
    _$jscoverage['validation.js'][265]++;
    if (hour < 0 || hour > 23) {
      _$jscoverage['validation.js'][267]++;
      return "invalid hour";
    }
    _$jscoverage['validation.js'][270]++;
    if (minute < 0 || minute > 59) {
      _$jscoverage['validation.js'][272]++;
      return "invalid minute";
    }
    _$jscoverage['validation.js'][275]++;
    if (second < 0 || second > 59) {
      _$jscoverage['validation.js'][277]++;
      return "invalid second";
    }
    _$jscoverage['validation.js'][280]++;
    isValid = true;
    _$jscoverage['validation.js'][281]++;
    break;
  }
  _$jscoverage['validation.js'][284]++;
  return (isValid? "": "bad value type, " + definition.type + " expected");
});
_$jscoverage['validation.js'].source = ["/*","* Copyright (c) 2012 Walmart. All rights reserved. Copyrights licensed under the New BSD License.","* See LICENSE file included with this code project for license terms.","*/","","// Load modules","","var Utils = require('./utils');","var Err = require('./error');","","","// Declare internals","","var internals = {};","","","// Validate query","","exports.validateQuery = function (req, parameters, callback) {","","    if (parameters === null) {","","        return callback(null);","    }","","    var isInvalid = false;","    for (var i in req.query) {","","        if (req.query.hasOwnProperty(i)) {","","            if (parameters[i] !== true) {","","                isInvalid = true;","                break;","            }","        }","    }","","    if (isInvalid) {","","        callback(Err.badRequest('Unknown parameter: ' + i));","    }","    else {","","        callback(null);","    }","};","","","// Validate payload schema","","exports.validateData = function (req, definition, callback) {","","    if (definition === null) {","","        return callback(null);","    }","","    var isInvalid = false;","    var err = '';","","    // Check required variables","","    for (var i in definition) {","","        if (definition.hasOwnProperty(i)) {","","            if (definition[i].required === true) {","","                if (req.hapi.payload[i] === undefined) {","","                    err = 'missing required parameter';","                    isInvalid = true;","                    break;","                }","            }","        }","    }","","    if (isInvalid === false) {","","        // Check each incoming variable","","        for (var i in req.hapi.payload) {","","            if (req.hapi.payload.hasOwnProperty(i)) {","","                // Lookup variable definition","","                if (definition[i] === undefined) {","","                    err = 'unknown parameter';","                    isInvalid = true;","                    break;","                }","","                // Check if update allowed","","                if (definition[i].set === false) {","","                    err = 'forbidden parameter';","                    isInvalid = true;","                    break;","                }","","                // Check for array type","","                if (definition[i].array === true) {","","                    // If variable is an array","","                    if (req.hapi.payload[i] instanceof Array) {","","                        // Check for empty array","","                        if (req.hapi.payload[i].length === 0 &amp;&amp;","                            definition[i].empty !== true) {","","                            err = 'empty array not allowed';","                            isInvalid = true;","                            break;","                        }","","                        // For each array element, check type","","                        for (var a = 0, al = req.hapi.payload[i].length; a &lt; al; ++a) {","","                            var message = internals.checkValue(req.hapi.payload[i][a], definition[i], false);","                            if (message) {","","                                err = 'invalid array value - ' + message;","                                isInvalid = true;","                                break;","                            }","                        }","","                        // Double break","","                        if (isInvalid === true) {","","                            break;","                        }","                    }","                    else {","","                        err = 'array value required';","                        isInvalid = true;","                        break;","                    }","                }","                else {","","                    if (definition[i].type !== 'any') {","","                        var result = internals.checkValue(req.hapi.payload[i], definition[i], definition[i].empty);","                        if (result) {","","                            err = result;","                            isInvalid = true;","                            break;","                        }","                    }","                }","            }","        }","    }","","    if (isInvalid) {","","        callback(Err.badRequest('\\'' + i + '\\': ' + err));","    }","    else {","","        callback(null);","    }","};","","","internals.checkValue = function (value, definition, isEmptyAllowed) {","","    // Check for empty value","","    if (value === null ||","        (typeof value === 'number' &amp;&amp; isNaN(value)) ||","        (typeof value === 'string' &amp;&amp; value === '')) {","","        if (isEmptyAllowed !== true) {","","            return 'empty value not allowed';","        }","        else {","","            return '';","        }","    }","","    // Check types","","    var isValid = false;","","    switch (definition.type) {","","        case 'string': isValid = (typeof value === 'string'); break;","        case 'id': isValid = (typeof value === 'string'); break;","        case 'number': isValid = (typeof value === 'number'); break;","        case 'enum': isValid = (typeof value === 'string' &amp;&amp; definition.values &amp;&amp; definition.values[value] &gt; 0); break;","        case 'object': isValid = (typeof value === 'object'); break;","        case 'email': isValid = Utils.checkEmail(value); break;","        case 'date':","","            if (typeof value !== 'string') {","","                return 'value must be a string';","            }","","            var dateRegex = /^([12]\\d\\d\\d)-([01]\\d)-([0123]\\d)$/;","            var date = dateRegex.exec(value);","","            if (date === null || date.length !== 4) {","","                return 'invalid date string format';","            }","","            var year = parseInt(date[1], 10);","            var month = parseInt(date[2], 10);","            var day = parseInt(date[3], 10);","","            if (year &lt; 1970 || year &gt; 3000) {","","                return 'invalid year: ' + date[1];","            }","","            if (month &lt; 1 || month &gt; 12) {","","                return 'invalid month: ' + date[2];","            }","","            if (day &lt; 1 || day &gt; 31) {","","                return 'invalid day: ' + date[3];","            }","","            isValid = true;","            break;","","        case 'time':","","            if (typeof value !== 'string') {","","                return 'value must be a string';","            }","","            var timeRegex = /^([012]\\d):([012345]\\d):([012345]\\d)$/;","            var time = timeRegex.exec(value);","","            if (time === null || time.length !== 4) {","","                return 'invalid time string format';","            }","","            var hour = parseInt(time[1], 10);","            var minute = parseInt(time[2], 10);","            var second = parseInt(time[3], 10);","","            if (hour &lt; 0 || hour &gt; 23) {","","                return 'invalid hour';","            }","","            if (minute &lt; 0 || minute &gt; 59) {","","                return 'invalid minute';","            }","","            if (second &lt; 0 || second &gt; 59) {","","                return 'invalid second';","            }","","            isValid = true;","            break;","    }","","    return (isValid ? '' : 'bad value type, ' + definition.type + ' expected');","};",""];
