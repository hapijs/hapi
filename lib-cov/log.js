/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['log.js']) {
  _$jscoverage['log.js'] = [];
  _$jscoverage['log.js'][8] = 0;
  _$jscoverage['log.js'][9] = 0;
  _$jscoverage['log.js'][10] = 0;
  _$jscoverage['log.js'][15] = 0;
  _$jscoverage['log.js'][22] = 0;
  _$jscoverage['log.js'][24] = 0;
  _$jscoverage['log.js'][30] = 0;
  _$jscoverage['log.js'][32] = 0;
  _$jscoverage['log.js'][37] = 0;
  _$jscoverage['log.js'][41] = 0;
  _$jscoverage['log.js'][43] = 0;
  _$jscoverage['log.js'][45] = 0;
  _$jscoverage['log.js'][48] = 0;
  _$jscoverage['log.js'][50] = 0;
  _$jscoverage['log.js'][52] = 0;
  _$jscoverage['log.js'][54] = 0;
  _$jscoverage['log.js'][56] = 0;
  _$jscoverage['log.js'][58] = 0;
  _$jscoverage['log.js'][62] = 0;
  _$jscoverage['log.js'][65] = 0;
  _$jscoverage['log.js'][67] = 0;
  _$jscoverage['log.js'][72] = 0;
  _$jscoverage['log.js'][79] = 0;
  _$jscoverage['log.js'][82] = 0;
  _$jscoverage['log.js'][88] = 0;
  _$jscoverage['log.js'][90] = 0;
  _$jscoverage['log.js'][92] = 0;
  _$jscoverage['log.js'][95] = 0;
  _$jscoverage['log.js'][99] = 0;
  _$jscoverage['log.js'][104] = 0;
  _$jscoverage['log.js'][106] = 0;
  _$jscoverage['log.js'][107] = 0;
  _$jscoverage['log.js'][108] = 0;
  _$jscoverage['log.js'][110] = 0;
  _$jscoverage['log.js'][111] = 0;
  _$jscoverage['log.js'][113] = 0;
  _$jscoverage['log.js'][118] = 0;
  _$jscoverage['log.js'][120] = 0;
  _$jscoverage['log.js'][122] = 0;
  _$jscoverage['log.js'][124] = 0;
  _$jscoverage['log.js'][126] = 0;
  _$jscoverage['log.js'][127] = 0;
  _$jscoverage['log.js'][128] = 0;
  _$jscoverage['log.js'][129] = 0;
  _$jscoverage['log.js'][131] = 0;
  _$jscoverage['log.js'][136] = 0;
  _$jscoverage['log.js'][142] = 0;
  _$jscoverage['log.js'][144] = 0;
  _$jscoverage['log.js'][146] = 0;
  _$jscoverage['log.js'][149] = 0;
  _$jscoverage['log.js'][150] = 0;
  _$jscoverage['log.js'][160] = 0;
  _$jscoverage['log.js'][162] = 0;
  _$jscoverage['log.js'][165] = 0;
}
_$jscoverage['log.js'][8]++;
var async = require("async");
_$jscoverage['log.js'][9]++;
var Client = require("./client");
_$jscoverage['log.js'][10]++;
var Process = require("./process");
_$jscoverage['log.js'][15]++;
var internals = {levels: ["debug", "info", "warn", "error"]};
_$jscoverage['log.js'][22]++;
exports.info = (function (message, req) {
  _$jscoverage['log.js'][24]++;
  internals.log("info", message, req);
});
_$jscoverage['log.js'][30]++;
exports.err = (function (error, req) {
  _$jscoverage['log.js'][32]++;
  internals.log("err", error, req);
});
_$jscoverage['log.js'][37]++;
exports.outbound = null;
_$jscoverage['log.js'][41]++;
internals.log = (function (level, message, req) {
  _$jscoverage['log.js'][43]++;
  if (process.env.NODE_ENV === "test") {
    _$jscoverage['log.js'][45]++;
    return;
  }
  _$jscoverage['log.js'][48]++;
  if (Process.settings === null || Process.settings.log.levels[level]) {
    _$jscoverage['log.js'][50]++;
    if (typeof message === "string") {
      _$jscoverage['log.js'][52]++;
      internals.print(level, message, req);
    }
    else {
      _$jscoverage['log.js'][54]++;
      if (req) {
        _$jscoverage['log.js'][56]++;
        if (message.type === "oauth") {
          _$jscoverage['log.js'][58]++;
          internals.print(level, "OAuth: " + message.error + " (" + message.text + ")", req);
        }
        else {
          _$jscoverage['log.js'][62]++;
          internals.print(level, "HTTP: " + message.code + " " + (message.message || message.text), req);
        }
        _$jscoverage['log.js'][65]++;
        if (message.log) {
          _$jscoverage['log.js'][67]++;
          internals.print(level, "Log: " + JSON.stringify(message.log), req);
        }
      }
      else {
        _$jscoverage['log.js'][72]++;
        internals.print(level, JSON.stringify(message));
      }
    }
  }
});
_$jscoverage['log.js'][79]++;
internals.pack = (function (ts, level, msg, req) {
  _$jscoverage['log.js'][82]++;
  var _package = {timestamp: ts, level: level, message: msg};
  _$jscoverage['log.js'][88]++;
  if (typeof req !== "undefined" && req !== null) {
    _$jscoverage['log.js'][90]++;
    if (typeof req === "object") {
      _$jscoverage['log.js'][92]++;
      _package.cdr = querystring.stringify(req);
    }
    else {
      _$jscoverage['log.js'][95]++;
      _package.cdr = req;
    }
  }
  _$jscoverage['log.js'][99]++;
  return _package;
});
_$jscoverage['log.js'][104]++;
internals.isWithinLevels = (function (level, store) {
  _$jscoverage['log.js'][106]++;
  var min = store.minLevel || -1;
  _$jscoverage['log.js'][107]++;
  var max = store.maxLevel || internals.levels.length;
  _$jscoverage['log.js'][108]++;
  var currentLevel = internals.levels.indexOf(level);
  _$jscoverage['log.js'][110]++;
  if (currentLevel >= min && currentLevel <= max) {
    _$jscoverage['log.js'][111]++;
    return true;
  }
  _$jscoverage['log.js'][113]++;
  return false;
});
_$jscoverage['log.js'][118]++;
internals.send = (function (ts, level, msg, req, callback) {
  _$jscoverage['log.js'][120]++;
  callback = callback || (function () {
});
  _$jscoverage['log.js'][122]++;
  async.forEach(Object.keys(exports.externalStores), (function (host, complete) {
  _$jscoverage['log.js'][124]++;
  if (internals.isWithinLevels(level, exports.externalStores[host])) {
    _$jscoverage['log.js'][126]++;
    var uri = exports.externalStores[host].uri;
    _$jscoverage['log.js'][127]++;
    var cli = new Client({host: host});
    _$jscoverage['log.js'][128]++;
    var data = internals.pack(ts, level, msg, req);
    _$jscoverage['log.js'][129]++;
    cli.post(uri, data, (function (err, res, body) {
  _$jscoverage['log.js'][131]++;
  return complete(err);
}));
  }
}), (function finish(err) {
  _$jscoverage['log.js'][136]++;
  return callback(err);
}));
});
_$jscoverage['log.js'][142]++;
internals.print = (function (level, message, req) {
  _$jscoverage['log.js'][144]++;
  function pad(value) {
    _$jscoverage['log.js'][146]++;
    return (value < 10? "0": "") + value;
}
  _$jscoverage['log.js'][149]++;
  var now = new Date();
  _$jscoverage['log.js'][150]++;
  var timestamp = (now.getYear() - 100).toString() + pad(now.getMonth() + 1) + pad(now.getDate()) + "/" + pad(now.getHours()) + pad(now.getMinutes()) + pad(now.getSeconds()) + "." + now.getMilliseconds();
  _$jscoverage['log.js'][160]++;
  if (typeof exports.externalStores !== "undefined" && exports.externalStores !== null) {
    _$jscoverage['log.js'][162]++;
    internals.send(timestamp, level, message, req);
  }
  else {
    _$jscoverage['log.js'][165]++;
    console.log(timestamp + ", " + level + ", " + message + (req? ", " + req.method + ", " + req.url: ""));
  }
});
_$jscoverage['log.js'].source = ["/*","* Copyright (c) 2012 Walmart. All rights reserved. Copyrights licensed under the New BSD License.","* See LICENSE file included with this code project for license terms.","*/","","// Load modules","","var async = require('async');","var Client = require('./client');","var Process = require('./process');","","","// Declare internals","","var internals = {","    levels: [\"debug\", \"info\", \"warn\", \"error\"]","};","","","// Info","","exports.info = function (message, req) {","","    internals.log('info', message, req);","};","","","// Err","","exports.err = function (error, req) {","","    internals.log('err', error, req);","};","","// Outbound callback","","exports.outbound = null;","","// Log output","","internals.log = function (level, message, req) {","","    if (process.env.NODE_ENV === 'test') {","","        return; // Silence log output during Jenkins test execution","    }","","    if (Process.settings === null || Process.settings.log.levels[level]) {","","        if (typeof message === 'string') {","","            internals.print(level, message, req);","        }","        else if (req) {","","            if (message.type === 'oauth') {","","                internals.print(level, 'OAuth: ' + message.error + ' (' + message.text + ')', req);","            }","            else {","","                internals.print(level, 'HTTP: ' + message.code + ' ' + (message.message || message.text), req);","            }","","            if (message.log) {","","                internals.print(level, 'Log: ' + JSON.stringify(message.log), req);","            }","        }","        else {","","            internals.print(level, JSON.stringify(message));","        }","    }","};","","// Package log for writing to external store","","internals.pack = function(ts, level, msg, req) {","","    ","    var _package = {","        timestamp: ts,","        level: level,","        message: msg","    }","    ","    if (typeof req !== \"undefined\" &amp;&amp; req !== null) {","","        if (typeof req === \"object\") {","","            _package.cdr = querystring.stringify(req);","        } else {","","            _package.cdr = req;","        }","    }","    ","    return _package;","}","","// Return true|false if loglevel within external store acceptable levels","","internals.isWithinLevels = function(level, store) {","","    var min = store.minLevel || -1;","    var max = store.maxLevel || internals.levels.length;","    var currentLevel = internals.levels.indexOf(level);","    ","    if (currentLevel &gt;= min &amp;&amp; currentLevel &lt;= max) {","        return true;","    }","    return false;","}","","// Write log to external store","","internals.send = function(ts, level, msg, req, callback) {","","    callback = callback || function(){};","    ","    async.forEach(Object.keys(exports.externalStores), function(host, complete) {","","        if (internals.isWithinLevels(level, exports.externalStores[host])) {","            ","            var uri = exports.externalStores[host].uri;","            var cli = new Client({host: host});","            var data = internals.pack(ts, level, msg, req);","            cli.post(uri, data, function(err, res, body) {","","                return complete(err);","            });","        }","    }, function finish(err) {","","        return callback(err);","    })","}","","// Format output","","internals.print = function (level, message, req) {","","    function pad(value) {","","        return (value &lt; 10 ? '0' : '') + value;","    }","","    var now = new Date();","    var timestamp = (now.getYear() - 100).toString() +","                    pad(now.getMonth() + 1) +","                    pad(now.getDate()) +","                    '/' +","                    pad(now.getHours()) +","                    pad(now.getMinutes()) +","                    pad(now.getSeconds()) +","                    '.' +","                    now.getMilliseconds();","","    if (typeof exports.externalStores !== \"undefined\" &amp;&amp; exports.externalStores !== null) {","","        internals.send(timestamp, level, message, req);","    } else {","","        console.log(timestamp + ', ' + level + ', ' + message + (req ? ', ' + req.method + ', ' + req.url : ''));","    }","};"];
