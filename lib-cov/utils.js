/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['utils.js']) {
  _$jscoverage['utils.js'] = [];
  _$jscoverage['utils.js'][8] = 0;
  _$jscoverage['utils.js'][9] = 0;
  _$jscoverage['utils.js'][10] = 0;
  _$jscoverage['utils.js'][11] = 0;
  _$jscoverage['utils.js'][12] = 0;
  _$jscoverage['utils.js'][13] = 0;
  _$jscoverage['utils.js'][14] = 0;
  _$jscoverage['utils.js'][19] = 0;
  _$jscoverage['utils.js'][21] = 0;
  _$jscoverage['utils.js'][27] = 0;
  _$jscoverage['utils.js'][29] = 0;
  _$jscoverage['utils.js'][32] = 0;
  _$jscoverage['utils.js'][35] = 0;
  _$jscoverage['utils.js'][37] = 0;
  _$jscoverage['utils.js'][39] = 0;
  _$jscoverage['utils.js'][41] = 0;
  _$jscoverage['utils.js'][43] = 0;
  _$jscoverage['utils.js'][47] = 0;
  _$jscoverage['utils.js'][52] = 0;
  _$jscoverage['utils.js'][58] = 0;
  _$jscoverage['utils.js'][60] = 0;
  _$jscoverage['utils.js'][62] = 0;
  _$jscoverage['utils.js'][64] = 0;
  _$jscoverage['utils.js'][66] = 0;
  _$jscoverage['utils.js'][68] = 0;
  _$jscoverage['utils.js'][70] = 0;
  _$jscoverage['utils.js'][73] = 0;
  _$jscoverage['utils.js'][75] = 0;
  _$jscoverage['utils.js'][77] = 0;
  _$jscoverage['utils.js'][79] = 0;
  _$jscoverage['utils.js'][80] = 0;
  _$jscoverage['utils.js'][84] = 0;
  _$jscoverage['utils.js'][85] = 0;
  _$jscoverage['utils.js'][90] = 0;
  _$jscoverage['utils.js'][96] = 0;
  _$jscoverage['utils.js'][102] = 0;
  _$jscoverage['utils.js'][104] = 0;
  _$jscoverage['utils.js'][105] = 0;
  _$jscoverage['utils.js'][107] = 0;
  _$jscoverage['utils.js'][109] = 0;
  _$jscoverage['utils.js'][111] = 0;
  _$jscoverage['utils.js'][112] = 0;
  _$jscoverage['utils.js'][116] = 0;
  _$jscoverage['utils.js'][122] = 0;
  _$jscoverage['utils.js'][124] = 0;
  _$jscoverage['utils.js'][125] = 0;
  _$jscoverage['utils.js'][127] = 0;
  _$jscoverage['utils.js'][129] = 0;
  _$jscoverage['utils.js'][131] = 0;
  _$jscoverage['utils.js'][136] = 0;
  _$jscoverage['utils.js'][140] = 0;
  _$jscoverage['utils.js'][146] = 0;
  _$jscoverage['utils.js'][148] = 0;
  _$jscoverage['utils.js'][150] = 0;
  _$jscoverage['utils.js'][154] = 0;
  _$jscoverage['utils.js'][157] = 0;
  _$jscoverage['utils.js'][163] = 0;
  _$jscoverage['utils.js'][165] = 0;
  _$jscoverage['utils.js'][167] = 0;
  _$jscoverage['utils.js'][169] = 0;
  _$jscoverage['utils.js'][172] = 0;
  _$jscoverage['utils.js'][181] = 0;
  _$jscoverage['utils.js'][183] = 0;
  _$jscoverage['utils.js'][184] = 0;
  _$jscoverage['utils.js'][186] = 0;
  _$jscoverage['utils.js'][188] = 0;
  _$jscoverage['utils.js'][190] = 0;
  _$jscoverage['utils.js'][193] = 0;
  _$jscoverage['utils.js'][199] = 0;
  _$jscoverage['utils.js'][201] = 0;
  _$jscoverage['utils.js'][203] = 0;
  _$jscoverage['utils.js'][204] = 0;
  _$jscoverage['utils.js'][205] = 0;
  _$jscoverage['utils.js'][207] = 0;
  _$jscoverage['utils.js'][208] = 0;
  _$jscoverage['utils.js'][212] = 0;
  _$jscoverage['utils.js'][214] = 0;
  _$jscoverage['utils.js'][216] = 0;
  _$jscoverage['utils.js'][217] = 0;
  _$jscoverage['utils.js'][218] = 0;
  _$jscoverage['utils.js'][220] = 0;
  _$jscoverage['utils.js'][222] = 0;
  _$jscoverage['utils.js'][224] = 0;
  _$jscoverage['utils.js'][228] = 0;
  _$jscoverage['utils.js'][231] = 0;
  _$jscoverage['utils.js'][237] = 0;
  _$jscoverage['utils.js'][239] = 0;
  _$jscoverage['utils.js'][247] = 0;
  _$jscoverage['utils.js'][249] = 0;
  _$jscoverage['utils.js'][251] = 0;
  _$jscoverage['utils.js'][254] = 0;
  _$jscoverage['utils.js'][255] = 0;
  _$jscoverage['utils.js'][257] = 0;
  _$jscoverage['utils.js'][260] = 0;
  _$jscoverage['utils.js'][262] = 0;
  _$jscoverage['utils.js'][267] = 0;
  _$jscoverage['utils.js'][269] = 0;
  _$jscoverage['utils.js'][273] = 0;
}
_$jscoverage['utils.js'][8]++;
var Validator = require("validator");
_$jscoverage['utils.js'][9]++;
var Crypto = require("crypto");
_$jscoverage['utils.js'][10]++;
var Email = require("emailjs");
_$jscoverage['utils.js'][11]++;
var Err = require("./error");
_$jscoverage['utils.js'][12]++;
var Base64 = require("./base64");
_$jscoverage['utils.js'][13]++;
var Log = require("./log");
_$jscoverage['utils.js'][14]++;
var Process = require("./process");
_$jscoverage['utils.js'][19]++;
exports.getTimestamp = (function () {
  _$jscoverage['utils.js'][21]++;
  return (new Date()).getTime();
});
_$jscoverage['utils.js'][27]++;
exports.clone = (function (obj) {
  _$jscoverage['utils.js'][29]++;
  if (obj === null || obj === undefined) {
    _$jscoverage['utils.js'][32]++;
    return null;
  }
  _$jscoverage['utils.js'][35]++;
  var newObj = (obj instanceof Array)? []: {};
  _$jscoverage['utils.js'][37]++;
  for (var i in obj) {
    _$jscoverage['utils.js'][39]++;
    if (obj.hasOwnProperty(i)) {
      _$jscoverage['utils.js'][41]++;
      if (obj[i] && typeof obj[i] === "object") {
        _$jscoverage['utils.js'][43]++;
        newObj[i] = exports.clone(obj[i]);
      }
      else {
        _$jscoverage['utils.js'][47]++;
        newObj[i] = obj[i];
      }
    }
}
  _$jscoverage['utils.js'][52]++;
  return newObj;
});
_$jscoverage['utils.js'][58]++;
exports.merge = (function (target, source) {
  _$jscoverage['utils.js'][60]++;
  if (source) {
    _$jscoverage['utils.js'][62]++;
    target = target || (source instanceof Array? []: {});
    _$jscoverage['utils.js'][64]++;
    for (var key in source) {
      _$jscoverage['utils.js'][66]++;
      if (source.hasOwnProperty(key)) {
        _$jscoverage['utils.js'][68]++;
        var value = source[key];
        _$jscoverage['utils.js'][70]++;
        if (value && typeof value === "object") {
          _$jscoverage['utils.js'][73]++;
          if (value instanceof Date) {
            _$jscoverage['utils.js'][75]++;
            target[key] = new Date(value.getTime());
          }
          else {
            _$jscoverage['utils.js'][77]++;
            if (value instanceof RegExp) {
              _$jscoverage['utils.js'][79]++;
              var flags = "" + (value.global? "g": "") + (value.ignoreCase? "i": "") + (value.multiline? "m": "") + (value.sticky? "y": "");
              _$jscoverage['utils.js'][80]++;
              target[key] = new RegExp(value.source, flags);
            }
            else {
              _$jscoverage['utils.js'][84]++;
              target[key] = target[key] || (value instanceof Array? []: {});
              _$jscoverage['utils.js'][85]++;
              exports.merge(target[key], source[key]);
            }
          }
        }
        else {
          _$jscoverage['utils.js'][90]++;
          target[key] = value;
        }
      }
}
  }
  _$jscoverage['utils.js'][96]++;
  return target;
});
_$jscoverage['utils.js'][102]++;
exports.unique = (function (array, key) {
  _$jscoverage['utils.js'][104]++;
  var index = {};
  _$jscoverage['utils.js'][105]++;
  var result = [];
  _$jscoverage['utils.js'][107]++;
  for (var i = 0, il = array.length; i < il; ++i) {
    _$jscoverage['utils.js'][109]++;
    if (index[array[i][key]] !== true) {
      _$jscoverage['utils.js'][111]++;
      result.push(array[i]);
      _$jscoverage['utils.js'][112]++;
      index[array[i][key]] = true;
    }
}
  _$jscoverage['utils.js'][116]++;
  return result;
});
_$jscoverage['utils.js'][122]++;
exports.map = (function (array, key) {
  _$jscoverage['utils.js'][124]++;
  var obj = {};
  _$jscoverage['utils.js'][125]++;
  for (var i = 0, il = array.length; i < il; ++i) {
    _$jscoverage['utils.js'][127]++;
    if (key) {
      _$jscoverage['utils.js'][129]++;
      if (array[i][key]) {
        _$jscoverage['utils.js'][131]++;
        obj[array[i][key]] = true;
      }
    }
    else {
      _$jscoverage['utils.js'][136]++;
      obj[array[i]] = true;
    }
}
  _$jscoverage['utils.js'][140]++;
  return obj;
});
_$jscoverage['utils.js'][146]++;
exports.checkEmail = (function (email) {
  _$jscoverage['utils.js'][148]++;
  try {
    _$jscoverage['utils.js'][150]++;
    Validator.check(email).len(6, 64).isEmail();
  }
  catch (e) {
    _$jscoverage['utils.js'][154]++;
    return false;
  }
  _$jscoverage['utils.js'][157]++;
  return true;
});
_$jscoverage['utils.js'][163]++;
exports.hide = (function (object, definition) {
  _$jscoverage['utils.js'][165]++;
  for (var i in definition) {
    _$jscoverage['utils.js'][167]++;
    if (definition.hasOwnProperty(i)) {
      _$jscoverage['utils.js'][169]++;
      if (definition[i].hide && definition[i].hide === true) {
        _$jscoverage['utils.js'][172]++;
        delete object[i];
      }
    }
}
});
_$jscoverage['utils.js'][181]++;
exports.getRandomString = (function (size) {
  _$jscoverage['utils.js'][183]++;
  var randomSource = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
  _$jscoverage['utils.js'][184]++;
  var len = randomSource.length;
  _$jscoverage['utils.js'][186]++;
  var result = [];
  _$jscoverage['utils.js'][188]++;
  for (var i = 0; i < size; ++i) {
    _$jscoverage['utils.js'][190]++;
    result[i] = randomSource[Math.floor(Math.random() * len)];
}
  _$jscoverage['utils.js'][193]++;
  return result.join("");
});
_$jscoverage['utils.js'][199]++;
exports.encrypt = (function (key, value) {
  _$jscoverage['utils.js'][201]++;
  var envelope = JSON.stringify({v: value, a: exports.getRandomString(2)});
  _$jscoverage['utils.js'][203]++;
  var cipher = Crypto.createCipher("aes256", key);
  _$jscoverage['utils.js'][204]++;
  var enc = cipher.update(envelope, input_encoding = "utf8", output_encoding = "binary");
  _$jscoverage['utils.js'][205]++;
  enc += cipher["final"](output_encoding = "binary");
  _$jscoverage['utils.js'][207]++;
  var result = Base64.encode(enc).replace(/\+/g, "-").replace(/\//g, ":").replace(/\=/g, "");
  _$jscoverage['utils.js'][208]++;
  return result;
});
_$jscoverage['utils.js'][212]++;
exports.decrypt = (function (key, value) {
  _$jscoverage['utils.js'][214]++;
  var input = Base64.decode(value.replace(/-/g, "+").replace(/:/g, "/"));
  _$jscoverage['utils.js'][216]++;
  var decipher = Crypto.createDecipher("aes256", key);
  _$jscoverage['utils.js'][217]++;
  var dec = decipher.update(input, input_encoding = "binary", output_encoding = "utf8");
  _$jscoverage['utils.js'][218]++;
  dec += decipher["final"](output_encoding = "utf8");
  _$jscoverage['utils.js'][220]++;
  var envelope = null;
  _$jscoverage['utils.js'][222]++;
  try {
    _$jscoverage['utils.js'][224]++;
    envelope = JSON.parse(dec);
  }
  catch (e) {
    _$jscoverage['utils.js'][228]++;
    Log.err("Invalid encrypted envelope: " + dec + " / Exception: " + JSON.stringify(e));
  }
  _$jscoverage['utils.js'][231]++;
  return envelope? envelope.v: null;
});
_$jscoverage['utils.js'][237]++;
exports.email = (function (to, subject, text, html, callback) {
  _$jscoverage['utils.js'][239]++;
  var headers = {from: Process.settings.email.fromName + " <" + Process.settings.email.replyTo + ">", to: to, subject: subject, text: text};
  _$jscoverage['utils.js'][247]++;
  var message = Email.message.create(headers);
  _$jscoverage['utils.js'][249]++;
  if (html) {
    _$jscoverage['utils.js'][251]++;
    message.attach_alternative(html);
  }
  _$jscoverage['utils.js'][254]++;
  var mailer = Email.server.connect(Process.settings.email.server);
  _$jscoverage['utils.js'][255]++;
  mailer.send(message, (function (err, message) {
  _$jscoverage['utils.js'][257]++;
  if (err === null || err === undefined) {
    _$jscoverage['utils.js'][260]++;
    if (callback) {
      _$jscoverage['utils.js'][262]++;
      callback(null);
    }
  }
  else {
    _$jscoverage['utils.js'][267]++;
    if (callback) {
      _$jscoverage['utils.js'][269]++;
      callback(Err.internal("Failed sending email: " + JSON.stringify(err)));
    }
    else {
      _$jscoverage['utils.js'][273]++;
      Log.err("Email error: " + JSON.stringify(err));
    }
  }
}));
});
_$jscoverage['utils.js'].source = ["/*","* Copyright (c) 2012 Walmart. All rights reserved. Copyrights licensed under the New BSD License.","* See LICENSE file included with this code project for license terms.","*/","","// Load modules","","var Validator = require('validator');","var Crypto = require('crypto');","var Email = require('emailjs');","var Err = require(\"./error\");","var Base64 = require('./base64');","var Log = require('./log');","var Process = require('./process');","","","// Get current date/time msec count","","exports.getTimestamp = function () {","","    return (new Date()).getTime();","};","","","// Clone object or array","","exports.clone = function (obj) {","","    if (obj === null ||","        obj === undefined) {","","        return null;","    }","","    var newObj = (obj instanceof Array) ? [] : {};","","    for (var i in obj) {","","        if (obj.hasOwnProperty(i)) {","","            if (obj[i] &amp;&amp; typeof obj[i] === 'object') {","","                newObj[i] = exports.clone(obj[i]);","            }","            else {","","                newObj[i] = obj[i];","            }","        }","    }","","    return newObj;","};","","","// Merge all the properties of source into target; source wins in conflic","","exports.merge = function (target, source) {","","    if (source) {","","        target = target || (source instanceof Array ? [] : {});","","        for (var key in source) {","","            if (source.hasOwnProperty(key)) {","","                var value = source[key];","","                if (value &amp;&amp;","                typeof value === 'object') {","","                    if (value instanceof Date) {","","                        target[key] = new Date(value.getTime());","                    }","                    else if (value instanceof RegExp) {","","                        var flags = '' + (value.global ? 'g' : '') + (value.ignoreCase ? 'i' : '') + (value.multiline ? 'm' : '') + (value.sticky ? 'y' : '');","                        target[key] = new RegExp(value.source, flags);","                    }","                    else {","","                        target[key] = target[key] || (value instanceof Array ? [] : {});","                        exports.merge(target[key], source[key]);","                    }","                }","                else {","","                    target[key] = value;","                }","            }","        }","    }","","    return target;","};","","","// Remove duplicate items from array","","exports.unique = function (array, key) {","","    var index = {};","    var result = [];","","    for (var i = 0, il = array.length; i &lt; il; ++i) {","","        if (index[array[i][key]] !== true) {","","            result.push(array[i]);","            index[array[i][key]] = true;","        }","    }","","    return result;","};","","","// Convert array into object","","exports.map = function (array, key) {","","    var obj = {};","    for (var i = 0, il = array.length; i &lt; il; ++i) {","","        if (key) {","","            if (array[i][key]) {","","                obj[array[i][key]] = true;","            }","        }","        else {","","            obj[array[i]] = true;","        }","    }","","    return obj;","};","","","// Check if a valid email address","","exports.checkEmail = function (email) {","","    try {","","        Validator.check(email).len(6, 64).isEmail();","    }","    catch (e) {","","        return false;","    }","","    return true;","};","","","// Remove hidden keys","","exports.hide = function (object, definition) {","","    for (var i in definition) {","","        if (definition.hasOwnProperty(i)) {","","            if (definition[i].hide &amp;&amp;","                definition[i].hide === true) {","","                delete object[i];","            }","        }","    }","};","","","// Random string","","exports.getRandomString = function (size) {","","    var randomSource = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';","    var len = randomSource.length;","","    var result = [];","","    for (var i = 0; i &lt; size; ++i) {","","        result[i] = randomSource[Math.floor(Math.random() * len)];","    }","","    return result.join('');","};","","","// AES256 Symmetric encryption","","exports.encrypt = function (key, value) {","","    var envelope = JSON.stringify({ v: value, a: exports.getRandomString(2) });","","    var cipher = Crypto.createCipher('aes256', key);","    var enc = cipher.update(envelope, input_encoding = 'utf8', output_encoding = 'binary');","    enc += cipher.final(output_encoding = 'binary');","","    var result = Base64.encode(enc).replace(/\\+/g, '-').replace(/\\//g, ':').replace(/\\=/g, '');","    return result;","};","","","exports.decrypt = function (key, value) {","","    var input = Base64.decode(value.replace(/-/g, '+').replace(/:/g, '/'));","","    var decipher = Crypto.createDecipher('aes256', key);","    var dec = decipher.update(input, input_encoding = 'binary', output_encoding = 'utf8');","    dec += decipher.final(output_encoding = 'utf8');","","    var envelope = null;","","    try {","","        envelope = JSON.parse(dec);","    }","    catch (e) {","","        Log.err('Invalid encrypted envelope: ' + dec + ' / Exception: ' + JSON.stringify(e));","    }","","    return envelope ? envelope.v : null;","};","","","// Send email","","exports.email = function (to, subject, text, html, callback) {","","    var headers = {","","        from: Process.settings.email.fromName + ' &lt;' + Process.settings.email.replyTo + '&gt;',","        to: to,","        subject: subject,","        text: text","    };","","    var message = Email.message.create(headers);","","    if (html) {","","        message.attach_alternative(html);","    }","","    var mailer = Email.server.connect(Process.settings.email.server);","    mailer.send(message, function (err, message) {","","        if (err === null ||","            err === undefined) {","","            if (callback) {","","                callback(null);","            }","        }","        else {","","            if (callback) {","","                callback(Err.internal('Failed sending email: ' + JSON.stringify(err)));","            }","            else {","","                Log.err('Email error: ' + JSON.stringify(err));","            }","        }","    });","};"];
