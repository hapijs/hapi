/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['session.js']) {
  _$jscoverage['session.js'] = [];
  _$jscoverage['session.js'][8] = 0;
  _$jscoverage['session.js'][9] = 0;
  _$jscoverage['session.js'][10] = 0;
  _$jscoverage['session.js'][15] = 0;
  _$jscoverage['session.js'][20] = 0;
  _$jscoverage['session.js'][22] = 0;
  _$jscoverage['session.js'][36] = 0;
  _$jscoverage['session.js'][38] = 0;
  _$jscoverage['session.js'][42] = 0;
  _$jscoverage['session.js'][46] = 0;
  _$jscoverage['session.js'][48] = 0;
  _$jscoverage['session.js'][52] = 0;
  _$jscoverage['session.js'][56] = 0;
  _$jscoverage['session.js'][60] = 0;
  _$jscoverage['session.js'][62] = 0;
  _$jscoverage['session.js'][66] = 0;
  _$jscoverage['session.js'][68] = 0;
  _$jscoverage['session.js'][69] = 0;
  _$jscoverage['session.js'][73] = 0;
  _$jscoverage['session.js'][75] = 0;
  _$jscoverage['session.js'][77] = 0;
  _$jscoverage['session.js'][79] = 0;
  _$jscoverage['session.js'][83] = 0;
  _$jscoverage['session.js'][89] = 0;
  _$jscoverage['session.js'][94] = 0;
  _$jscoverage['session.js'][99] = 0;
  _$jscoverage['session.js'][102] = 0;
  _$jscoverage['session.js'][104] = 0;
  _$jscoverage['session.js'][106] = 0;
  _$jscoverage['session.js'][108] = 0;
  _$jscoverage['session.js'][113] = 0;
  _$jscoverage['session.js'][120] = 0;
  _$jscoverage['session.js'][126] = 0;
  _$jscoverage['session.js'][132] = 0;
  _$jscoverage['session.js'][136] = 0;
  _$jscoverage['session.js'][138] = 0;
  _$jscoverage['session.js'][144] = 0;
  _$jscoverage['session.js'][150] = 0;
  _$jscoverage['session.js'][152] = 0;
  _$jscoverage['session.js'][154] = 0;
  _$jscoverage['session.js'][158] = 0;
  _$jscoverage['session.js'][163] = 0;
  _$jscoverage['session.js'][170] = 0;
  _$jscoverage['session.js'][179] = 0;
  _$jscoverage['session.js'][181] = 0;
  _$jscoverage['session.js'][182] = 0;
  _$jscoverage['session.js'][185] = 0;
  _$jscoverage['session.js'][195] = 0;
  _$jscoverage['session.js'][197] = 0;
  _$jscoverage['session.js'][199] = 0;
  _$jscoverage['session.js'][201] = 0;
  _$jscoverage['session.js'][206] = 0;
  _$jscoverage['session.js'][208] = 0;
  _$jscoverage['session.js'][211] = 0;
  _$jscoverage['session.js'][219] = 0;
  _$jscoverage['session.js'][221] = 0;
  _$jscoverage['session.js'][223] = 0;
  _$jscoverage['session.js'][224] = 0;
  _$jscoverage['session.js'][226] = 0;
  _$jscoverage['session.js'][231] = 0;
  _$jscoverage['session.js'][232] = 0;
  _$jscoverage['session.js'][237] = 0;
  _$jscoverage['session.js'][243] = 0;
  _$jscoverage['session.js'][249] = 0;
  _$jscoverage['session.js'][256] = 0;
  _$jscoverage['session.js'][258] = 0;
  _$jscoverage['session.js'][262] = 0;
  _$jscoverage['session.js'][263] = 0;
  _$jscoverage['session.js'][265] = 0;
  _$jscoverage['session.js'][266] = 0;
  _$jscoverage['session.js'][270] = 0;
  _$jscoverage['session.js'][276] = 0;
  _$jscoverage['session.js'][278] = 0;
  _$jscoverage['session.js'][279] = 0;
  _$jscoverage['session.js'][281] = 0;
  _$jscoverage['session.js'][283] = 0;
  _$jscoverage['session.js'][286] = 0;
  _$jscoverage['session.js'][289] = 0;
  _$jscoverage['session.js'][292] = 0;
  _$jscoverage['session.js'][294] = 0;
  _$jscoverage['session.js'][297] = 0;
  _$jscoverage['session.js'][299] = 0;
  _$jscoverage['session.js'][301] = 0;
  _$jscoverage['session.js'][303] = 0;
  _$jscoverage['session.js'][308] = 0;
  _$jscoverage['session.js'][312] = 0;
  _$jscoverage['session.js'][314] = 0;
  _$jscoverage['session.js'][315] = 0;
  _$jscoverage['session.js'][317] = 0;
  _$jscoverage['session.js'][320] = 0;
  _$jscoverage['session.js'][323] = 0;
  _$jscoverage['session.js'][324] = 0;
  _$jscoverage['session.js'][327] = 0;
  _$jscoverage['session.js'][328] = 0;
  _$jscoverage['session.js'][329] = 0;
  _$jscoverage['session.js'][330] = 0;
  _$jscoverage['session.js'][334] = 0;
  _$jscoverage['session.js'][339] = 0;
  _$jscoverage['session.js'][341] = 0;
  _$jscoverage['session.js'][342] = 0;
  _$jscoverage['session.js'][346] = 0;
}
_$jscoverage['session.js'][8]++;
var Utils = require("./utils");
_$jscoverage['session.js'][9]++;
var Err = require("./error");
_$jscoverage['session.js'][10]++;
var Log = require("./log");
_$jscoverage['session.js'][15]++;
var internals = {};
_$jscoverage['session.js'][20]++;
exports.type = {};
_$jscoverage['session.js'][22]++;
exports.type.endpoint = {grant_type: {type: "string", required: true}, client_id: {type: "string"}, client_secret: {type: "string", empty: true}, refresh_token: {type: "string"}, x_user_id: {type: "string"}, x_email_token: {type: "string"}};
_$jscoverage['session.js'][36]++;
exports.token = (function (req, reply) {
  _$jscoverage['session.js'][38]++;
  var serverSettings = req.hapi.server.settings.authentication;
  _$jscoverage['session.js'][42]++;
  internals.parseClientCredentials(req);
  _$jscoverage['session.js'][46]++;
  serverSettings.loadClientFunc(req.hapi.payload.client_id, (function (client, err) {
  _$jscoverage['session.js'][48]++;
  if (client) {
    _$jscoverage['session.js'][52]++;
    if ((client.secret || "") === (req.hapi.payload.client_secret || "")) {
      _$jscoverage['session.js'][56]++;
      if (req.hapi.payload.grant_type === "client_credentials") {
        _$jscoverage['session.js'][60]++;
        getOrCreate(null, client);
      }
      else {
        _$jscoverage['session.js'][62]++;
        if (req.hapi.payload.grant_type === "refresh_token") {
          _$jscoverage['session.js'][66]++;
          if (req.hapi.payload.refresh_token) {
            _$jscoverage['session.js'][68]++;
            var refresh = Utils.decrypt(serverSettings.aes256Keys.oauthRefresh, req.hapi.payload.refresh_token);
            _$jscoverage['session.js'][69]++;
            if (refresh && refresh.user && refresh.client) {
              _$jscoverage['session.js'][73]++;
              if (refresh.client === client._id) {
                _$jscoverage['session.js'][75]++;
                serverSettings.loadUserFunc(refresh.user, (function (user, err) {
  _$jscoverage['session.js'][77]++;
  if (user) {
    _$jscoverage['session.js'][79]++;
    getOrCreate(user, client);
  }
  else {
    _$jscoverage['session.js'][83]++;
    reply(err);
  }
}));
              }
              else {
                _$jscoverage['session.js'][89]++;
                reply(Err.oauth("invalid_grant", "Mismatching refresh token client id"));
              }
            }
            else {
              _$jscoverage['session.js'][94]++;
              reply(Err.oauth("invalid_grant", "Invalid refresh token"));
            }
          }
          else {
            _$jscoverage['session.js'][99]++;
            reply(Err.oauth("invalid_request", "Missing refresh_token"));
          }
        }
        else {
          _$jscoverage['session.js'][102]++;
          if (serverSettings.extensionFunc) {
            _$jscoverage['session.js'][104]++;
            serverSettings.extensionFunc(req.hapi, client, (function (user, err, action) {
  _$jscoverage['session.js'][106]++;
  if (user) {
    _$jscoverage['session.js'][108]++;
    getOrCreate(user, client, action);
  }
  else {
    _$jscoverage['session.js'][113]++;
    reply(err);
  }
}));
          }
          else {
            _$jscoverage['session.js'][120]++;
            reply(Err.oauth("unsupported_grant_type", "Unknown or unsupported grant type"));
          }
        }
      }
    }
    else {
      _$jscoverage['session.js'][126]++;
      reply(Err.oauth("invalid_client", "Invalid client identifier or secret"));
    }
  }
  else {
    _$jscoverage['session.js'][132]++;
    reply(Err.oauth("invalid_client", "Invalid client identifier or secret"));
  }
}));
  _$jscoverage['session.js'][136]++;
  function getOrCreate(user, client, customResponseFields) {
    _$jscoverage['session.js'][138]++;
    if (user === null || (client.scope && client.scope.authorized === true) || (req.hapi.scope && req.hapi.scope.authorized === true)) {
      _$jscoverage['session.js'][144]++;
      issue();
    }
    else {
      _$jscoverage['session.js'][150]++;
      serverSettings.checkAuthorizationFunc(user._id, client._id, (function (err) {
  _$jscoverage['session.js'][152]++;
  if (err === null) {
    _$jscoverage['session.js'][154]++;
    issue();
  }
  else {
    _$jscoverage['session.js'][158]++;
    reply(err);
  }
}));
    }
    _$jscoverage['session.js'][163]++;
    function issue() {
      _$jscoverage['session.js'][170]++;
      var token = {key: Utils.getRandomString(32), algorithm: serverSettings.defaultAlgorithm, client: client._id, scope: client.scope, expiration: Utils.getTimestamp() + (serverSettings.tokenLifetimeSec * 1000)};
      _$jscoverage['session.js'][179]++;
      if (user) {
        _$jscoverage['session.js'][181]++;
        token.user = user._id;
        _$jscoverage['session.js'][182]++;
        token.tos = internals.getLatestTOS(user);
      }
      _$jscoverage['session.js'][185]++;
      var response = {access_token: Utils.encrypt(serverSettings.aes256Keys.oauthToken, token), token_type: "mac", mac_key: token.key, mac_algorithm: token.algorithm, expires_in: serverSettings.tokenLifetimeSec, x_tos: token.tos};
      _$jscoverage['session.js'][195]++;
      if (customResponseFields) {
        _$jscoverage['session.js'][197]++;
        for (var i in customResponseFields) {
          _$jscoverage['session.js'][199]++;
          if (customResponseFields.hasOwnProperty(i)) {
            _$jscoverage['session.js'][201]++;
            response[i] = customResponseFields[i];
          }
}
      }
      _$jscoverage['session.js'][206]++;
      if (user) {
        _$jscoverage['session.js'][208]++;
        response.refresh_token = Utils.encrypt(serverSettings.aes256Keys.oauthRefresh, {user: user._id, client: client._id});
      }
      _$jscoverage['session.js'][211]++;
      reply(response);
}
}
});
_$jscoverage['session.js'][219]++;
exports.loadToken = (function (key, token, callback) {
  _$jscoverage['session.js'][221]++;
  if (token) {
    _$jscoverage['session.js'][223]++;
    var session = Utils.decrypt(key, token);
    _$jscoverage['session.js'][224]++;
    if (session) {
      _$jscoverage['session.js'][226]++;
      if (session.expiration && session.expiration > Utils.getTimestamp()) {
        _$jscoverage['session.js'][231]++;
        session.id = token;
        _$jscoverage['session.js'][232]++;
        callback(session);
      }
      else {
        _$jscoverage['session.js'][237]++;
        callback(null);
      }
    }
    else {
      _$jscoverage['session.js'][243]++;
      callback(null);
    }
  }
  else {
    _$jscoverage['session.js'][249]++;
    callback(null);
  }
});
_$jscoverage['session.js'][256]++;
internals.getLatestTOS = (function (user) {
  _$jscoverage['session.js'][258]++;
  if (user && user.tos && typeof user.tos === "object") {
    _$jscoverage['session.js'][262]++;
    var versions = Object.keys(user.tos);
    _$jscoverage['session.js'][263]++;
    if (versions.length > 0) {
      _$jscoverage['session.js'][265]++;
      versions.sort();
      _$jscoverage['session.js'][266]++;
      return versions[versions.length - 1];
    }
  }
  _$jscoverage['session.js'][270]++;
  return 0;
});
_$jscoverage['session.js'][276]++;
internals.compareScope = (function (a, b) {
  _$jscoverage['session.js'][278]++;
  a = a || null;
  _$jscoverage['session.js'][279]++;
  b = b || null;
  _$jscoverage['session.js'][281]++;
  if (a === null && b === null) {
    _$jscoverage['session.js'][283]++;
    return true;
  }
  _$jscoverage['session.js'][286]++;
  if ((a === null && b !== null) || (a !== null && b === null)) {
    _$jscoverage['session.js'][289]++;
    return false;
  }
  _$jscoverage['session.js'][292]++;
  if (Object.keys(a).length !== Object.keys(b).length) {
    _$jscoverage['session.js'][294]++;
    return false;
  }
  _$jscoverage['session.js'][297]++;
  for (var i in a) {
    _$jscoverage['session.js'][299]++;
    if (a.hasOwnProperty(i)) {
      _$jscoverage['session.js'][301]++;
      if (a[i] !== b[i]) {
        _$jscoverage['session.js'][303]++;
        return false;
      }
    }
}
  _$jscoverage['session.js'][308]++;
  return true;
});
_$jscoverage['session.js'][312]++;
internals.parseClientCredentials = (function (req) {
  _$jscoverage['session.js'][314]++;
  var authorization = req.headers.authorization;
  _$jscoverage['session.js'][315]++;
  if (authorization) {
    _$jscoverage['session.js'][317]++;
    if (req.hapi.payload.client_id || req.hapi.payload.client_secret) {
      _$jscoverage['session.js'][320]++;
      return Err.oauth("invalid_request", "Request cannot include both Basic and payload client authentication");
    }
    _$jscoverage['session.js'][323]++;
    var parts = authorization.split(/\s+/);
    _$jscoverage['session.js'][324]++;
    if (parts.length === 2 && parts[0].toLowerCase() === "basic") {
      _$jscoverage['session.js'][327]++;
      var credentials = new Buffer(parts[1], "base64").toString().split(":");
      _$jscoverage['session.js'][328]++;
      req.hapi.payload.client_id = credentials[0];
      _$jscoverage['session.js'][329]++;
      req.hapi.payload.client_secret = credentials[1];
      _$jscoverage['session.js'][330]++;
      return null;
    }
    else {
      _$jscoverage['session.js'][334]++;
      return Err.oauth("invalid_request", "Unsupported HTTP authentication scheme");
    }
  }
  else {
    _$jscoverage['session.js'][339]++;
    if (req.hapi.payload.client_id) {
      _$jscoverage['session.js'][341]++;
      req.hapi.payload.client_secret = req.hapi.payload.client_secret || "";
      _$jscoverage['session.js'][342]++;
      return null;
    }
    else {
      _$jscoverage['session.js'][346]++;
      return Err.oauth("invalid_request", "Request missing client authentication");
    }
  }
});
_$jscoverage['session.js'].source = ["/*","* Copyright (c) 2012 Walmart. All rights reserved. Copyrights licensed under the New BSD License.","* See LICENSE file included with this code project for license terms.","*/","","// Load modules","","var Utils = require('./utils');","var Err = require('./error');","var Log = require('./log');","","","// Declare internals","","var internals = {};","","","// Session definitions","","exports.type = {};","","exports.type.endpoint = {","","    grant_type:     { type: 'string', required: true },","    client_id:      { type: 'string' },","    client_secret:  { type: 'string', empty: true },","    refresh_token:  { type: 'string' },","","    x_user_id:      { type: 'string' },","    x_email_token:  { type: 'string' }","};","","","// Get session token","","exports.token = function (req, reply) {","","    var serverSettings = req.hapi.server.settings.authentication;","","    // Ensure client credentials present","","    internals.parseClientCredentials(req);","","    // Load client information","","    serverSettings.loadClientFunc(req.hapi.payload.client_id, function (client, err) {","","        if (client) {","","            // Check client secret","","            if ((client.secret || '') === (req.hapi.payload.client_secret || '')) {","","                // Switch on grant type","","                if (req.hapi.payload.grant_type === 'client_credentials') {","","                    // Client credentials (no user context)","","                    getOrCreate(null, client);","                }","                else if (req.hapi.payload.grant_type === 'refresh_token') {","","                    // Refresh token","","                    if (req.hapi.payload.refresh_token) {","","                        var refresh = Utils.decrypt(serverSettings.aes256Keys.oauthRefresh, req.hapi.payload.refresh_token);","                        if (refresh &amp;&amp;","                            refresh.user &amp;&amp;","                            refresh.client) {","","                            if (refresh.client === client._id) {","","                                serverSettings.loadUserFunc(refresh.user, function (user, err) {","","                                    if (user) {","","                                        getOrCreate(user, client);","                                    }","                                    else {","","                                        reply(err);","                                    }","                                });","                            }","                            else {","","                                reply(Err.oauth('invalid_grant', 'Mismatching refresh token client id'));","                            }","                        }","                        else {","","                            reply(Err.oauth('invalid_grant', 'Invalid refresh token'));","                        }","                    }","                    else {","","                        reply(Err.oauth('invalid_request', 'Missing refresh_token'));","                    }","                }","                else if (serverSettings.extensionFunc) {","","                    serverSettings.extensionFunc(req.hapi, client, function (user, err, action) {","","                        if (user) {","","                            getOrCreate(user, client, action);","                        }","                        else {","","                            // Unknown local account","                            reply(err);","                        }","                    });","                }","                else {","","                    // Unsupported grant type","                    reply(Err.oauth('unsupported_grant_type', 'Unknown or unsupported grant type'));","                }","            }","            else {","","                // Bad client authentication","                reply(Err.oauth('invalid_client', 'Invalid client identifier or secret'));","            }","        }","        else {","","            // Unknown client","            reply(Err.oauth('invalid_client', 'Invalid client identifier or secret'));","        }","    });","","    function getOrCreate(user, client, customResponseFields) {","","        if (user === null ||","            (client.scope &amp;&amp; client.scope.authorized === true) ||","            (req.hapi.scope &amp;&amp; req.hapi.scope.authorized === true)) {","","            // Client has static authorization","","            issue();","        }","        else {","","            // Lookup authorization","","            serverSettings.checkAuthorizationFunc(user._id, client._id, function (err) {","","                if (err === null) {","","                    issue();","                }","                else {","","                    reply(err);","                }","            });","        }","","        function issue() {","","            // Issue a new token","","            // Todo: Check if client has authorization to request a token","            // Todo: Set max expiration based on authorization, make short lived","","            var token = {","","                key: Utils.getRandomString(32),","                algorithm: serverSettings.defaultAlgorithm,","                client: client._id,","                scope: client.scope,","                expiration: Utils.getTimestamp() + (serverSettings.tokenLifetimeSec * 1000)","            };","","            if (user) {","","                token.user = user._id;","                token.tos = internals.getLatestTOS(user);","            }","","            var response = {","","                access_token: Utils.encrypt(serverSettings.aes256Keys.oauthToken, token),","                token_type: 'mac',","                mac_key: token.key,","                mac_algorithm: token.algorithm,","                expires_in: serverSettings.tokenLifetimeSec,","                x_tos: token.tos","            };","","            if (customResponseFields) {","","                for (var i in customResponseFields) {","","                    if (customResponseFields.hasOwnProperty(i)) {","","                        response[i] = customResponseFields[i];","                    }","                }","            }","","            if (user) {","","                response.refresh_token = Utils.encrypt(serverSettings.aes256Keys.oauthRefresh, { user: user._id, client: client._id });","            }","","            reply(response);","        }","    }","};","","","// Get session token","","exports.loadToken = function (key, token, callback) {","","    if (token) {","","        var session = Utils.decrypt(key, token);","        if (session) {","","            if (session.expiration &amp;&amp;","                session.expiration &gt; Utils.getTimestamp()) {","","                // TODO: check against grant database to make sure underlying grant still valid","","                session.id = token;","                callback(session);","            }","            else {","","                // Expired","                callback(null);","            }","        }","        else {","","            // Invalid","            callback(null);","        }","    }","    else {","","        // Empty","        callback(null);","    }","};","","","// Find latest accepted TOS","","internals.getLatestTOS = function (user) {","","    if (user &amp;&amp;","        user.tos &amp;&amp;","        typeof user.tos === 'object') {","","        var versions = Object.keys(user.tos);","        if (versions.length &gt; 0) {","","            versions.sort();","            return versions[versions.length - 1];","        }","    }","","    return 0;","};","","","// Compare scopes","","internals.compareScope = function (a, b) {","","    a = a || null;","    b = b || null;","","    if (a === null &amp;&amp; b === null) {","","        return true;","    }","","    if ((a === null &amp;&amp; b !== null) ||","        (a !== null &amp;&amp; b === null)) {","","        return false;","    }","","    if (Object.keys(a).length !== Object.keys(b).length) {","","        return false;","    }","","    for (var i in a) {","","        if (a.hasOwnProperty(i)) {","","            if (a[i] !== b[i]) {","","                return false;","            }","        }","    }","","    return true;","};","","","internals.parseClientCredentials = function (req) {","","    var authorization = req.headers.authorization;","    if (authorization) {","","        if (req.hapi.payload.client_id ||","            req.hapi.payload.client_secret) {","","            return Err.oauth('invalid_request', 'Request cannot include both Basic and payload client authentication');","        }","","        var parts = authorization.split(/\\s+/);","        if (parts.length === 2 &amp;&amp;","            parts[0].toLowerCase() === 'basic') {","","            var credentials = new Buffer(parts[1], 'base64').toString().split(':');","            req.hapi.payload.client_id = credentials[0];","            req.hapi.payload.client_secret = credentials[1];","            return null;","        }","        else {","","            return Err.oauth('invalid_request', 'Unsupported HTTP authentication scheme');","        }","    }","    else {","","        if (req.hapi.payload.client_id) {","","            req.hapi.payload.client_secret = req.hapi.payload.client_secret || '';","            return null;","        }","        else {","","            return Err.oauth('invalid_request', 'Request missing client authentication');","        }","    }","};",""];
