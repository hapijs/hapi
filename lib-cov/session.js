/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['session.js']) {
  _$jscoverage['session.js'] = [];
  _$jscoverage['session.js'][8] = 0;
  _$jscoverage['session.js'][9] = 0;
  _$jscoverage['session.js'][10] = 0;
  _$jscoverage['session.js'][11] = 0;
  _$jscoverage['session.js'][16] = 0;
  _$jscoverage['session.js'][21] = 0;
  _$jscoverage['session.js'][23] = 0;
  _$jscoverage['session.js'][34] = 0;
  _$jscoverage['session.js'][44] = 0;
  _$jscoverage['session.js'][46] = 0;
  _$jscoverage['session.js'][48] = 0;
  _$jscoverage['session.js'][52] = 0;
  _$jscoverage['session.js'][56] = 0;
  _$jscoverage['session.js'][60] = 0;
  _$jscoverage['session.js'][62] = 0;
  _$jscoverage['session.js'][66] = 0;
  _$jscoverage['session.js'][68] = 0;
  _$jscoverage['session.js'][69] = 0;
  _$jscoverage['session.js'][73] = 0;
  _$jscoverage['session.js'][75] = 0;
  _$jscoverage['session.js'][77] = 0;
  _$jscoverage['session.js'][79] = 0;
  _$jscoverage['session.js'][83] = 0;
  _$jscoverage['session.js'][89] = 0;
  _$jscoverage['session.js'][94] = 0;
  _$jscoverage['session.js'][99] = 0;
  _$jscoverage['session.js'][102] = 0;
  _$jscoverage['session.js'][104] = 0;
  _$jscoverage['session.js'][106] = 0;
  _$jscoverage['session.js'][108] = 0;
  _$jscoverage['session.js'][113] = 0;
  _$jscoverage['session.js'][120] = 0;
  _$jscoverage['session.js'][126] = 0;
  _$jscoverage['session.js'][132] = 0;
  _$jscoverage['session.js'][136] = 0;
  _$jscoverage['session.js'][138] = 0;
  _$jscoverage['session.js'][144] = 0;
  _$jscoverage['session.js'][150] = 0;
  _$jscoverage['session.js'][152] = 0;
  _$jscoverage['session.js'][154] = 0;
  _$jscoverage['session.js'][157] = 0;
  _$jscoverage['session.js'][159] = 0;
  _$jscoverage['session.js'][161] = 0;
  _$jscoverage['session.js'][164] = 0;
  _$jscoverage['session.js'][166] = 0;
  _$jscoverage['session.js'][169] = 0;
  _$jscoverage['session.js'][172] = 0;
  _$jscoverage['session.js'][173] = 0;
  _$jscoverage['session.js'][175] = 0;
  _$jscoverage['session.js'][176] = 0;
  _$jscoverage['session.js'][178] = 0;
  _$jscoverage['session.js'][180] = 0;
  _$jscoverage['session.js'][184] = 0;
  _$jscoverage['session.js'][188] = 0;
  _$jscoverage['session.js'][190] = 0;
  _$jscoverage['session.js'][194] = 0;
  _$jscoverage['session.js'][196] = 0;
  _$jscoverage['session.js'][201] = 0;
  _$jscoverage['session.js'][203] = 0;
  _$jscoverage['session.js'][207] = 0;
  _$jscoverage['session.js'][212] = 0;
  _$jscoverage['session.js'][217] = 0;
  _$jscoverage['session.js'][222] = 0;
  _$jscoverage['session.js'][229] = 0;
  _$jscoverage['session.js'][238] = 0;
  _$jscoverage['session.js'][240] = 0;
  _$jscoverage['session.js'][241] = 0;
  _$jscoverage['session.js'][244] = 0;
  _$jscoverage['session.js'][255] = 0;
  _$jscoverage['session.js'][257] = 0;
  _$jscoverage['session.js'][260] = 0;
  _$jscoverage['session.js'][268] = 0;
  _$jscoverage['session.js'][270] = 0;
  _$jscoverage['session.js'][272] = 0;
  _$jscoverage['session.js'][273] = 0;
  _$jscoverage['session.js'][275] = 0;
  _$jscoverage['session.js'][280] = 0;
  _$jscoverage['session.js'][281] = 0;
  _$jscoverage['session.js'][286] = 0;
  _$jscoverage['session.js'][292] = 0;
  _$jscoverage['session.js'][298] = 0;
  _$jscoverage['session.js'][305] = 0;
  _$jscoverage['session.js'][307] = 0;
  _$jscoverage['session.js'][309] = 0;
  _$jscoverage['session.js'][316] = 0;
  _$jscoverage['session.js'][317] = 0;
  _$jscoverage['session.js'][319] = 0;
  _$jscoverage['session.js'][320] = 0;
  _$jscoverage['session.js'][323] = 0;
  _$jscoverage['session.js'][327] = 0;
  _$jscoverage['session.js'][328] = 0;
  _$jscoverage['session.js'][330] = 0;
  _$jscoverage['session.js'][332] = 0;
  _$jscoverage['session.js'][337] = 0;
  _$jscoverage['session.js'][343] = 0;
  _$jscoverage['session.js'][349] = 0;
  _$jscoverage['session.js'][357] = 0;
  _$jscoverage['session.js'][359] = 0;
  _$jscoverage['session.js'][363] = 0;
  _$jscoverage['session.js'][364] = 0;
  _$jscoverage['session.js'][366] = 0;
  _$jscoverage['session.js'][367] = 0;
  _$jscoverage['session.js'][371] = 0;
  _$jscoverage['session.js'][377] = 0;
  _$jscoverage['session.js'][379] = 0;
  _$jscoverage['session.js'][380] = 0;
  _$jscoverage['session.js'][382] = 0;
  _$jscoverage['session.js'][384] = 0;
  _$jscoverage['session.js'][387] = 0;
  _$jscoverage['session.js'][390] = 0;
  _$jscoverage['session.js'][393] = 0;
  _$jscoverage['session.js'][395] = 0;
  _$jscoverage['session.js'][398] = 0;
  _$jscoverage['session.js'][400] = 0;
  _$jscoverage['session.js'][402] = 0;
  _$jscoverage['session.js'][404] = 0;
  _$jscoverage['session.js'][409] = 0;
}
_$jscoverage['session.js'][8]++;
var Crypto = require("crypto");
_$jscoverage['session.js'][9]++;
var Utils = require("./utils");
_$jscoverage['session.js'][10]++;
var Err = require("./error");
_$jscoverage['session.js'][11]++;
var Log = require("./log");
_$jscoverage['session.js'][16]++;
var internals = {};
_$jscoverage['session.js'][21]++;
exports.type = {};
_$jscoverage['session.js'][23]++;
exports.type.endpoint = {grant_type: {type: "string", required: true}, client_id: {type: "string", required: true}, client_secret: {type: "string", empty: true}, refresh_token: {type: "string"}, x_user_id: {type: "string"}, x_email_token: {type: "string"}};
_$jscoverage['session.js'][34]++;
exports.type.client = {name: {type: "string"}, secret: {type: "string", hide: true}, scope: {type: "object", hide: true}};
_$jscoverage['session.js'][44]++;
exports.token = (function (request, reply) {
  _$jscoverage['session.js'][46]++;
  server.settings.authentication.loadClientFunc(request.payload.client_id, (function (client, err) {
  _$jscoverage['session.js'][48]++;
  if (client) {
    _$jscoverage['session.js'][52]++;
    if ((client.secret || "") === (request.payload.client_secret || "")) {
      _$jscoverage['session.js'][56]++;
      if (request.payload.grant_type === "client_credentials") {
        _$jscoverage['session.js'][60]++;
        getOrCreate(null, client);
      }
      else {
        _$jscoverage['session.js'][62]++;
        if (request.payload.grant_type === "refresh_token") {
          _$jscoverage['session.js'][66]++;
          if (request.payload.refresh_token) {
            _$jscoverage['session.js'][68]++;
            var refresh = Utils.decrypt(server.settings.authentication.aes256Keys.oauthRefresh, request.payload.refresh_token);
            _$jscoverage['session.js'][69]++;
            if (refresh && refresh.user && refresh.client) {
              _$jscoverage['session.js'][73]++;
              if (refresh.client === client._id) {
                _$jscoverage['session.js'][75]++;
                server.settings.authentication.loadUserFunc(refresh.user, (function (user, err) {
  _$jscoverage['session.js'][77]++;
  if (user) {
    _$jscoverage['session.js'][79]++;
    getOrCreate(user, client);
  }
  else {
    _$jscoverage['session.js'][83]++;
    reply(err);
  }
}));
              }
              else {
                _$jscoverage['session.js'][89]++;
                reply(Err.oauth("invalid_grant", "Mismatching refresh token client id"));
              }
            }
            else {
              _$jscoverage['session.js'][94]++;
              reply(Err.oauth("invalid_grant", "Invalid refresh token"));
            }
          }
          else {
            _$jscoverage['session.js'][99]++;
            reply(Err.oauth("invalid_request", "Missing refresh_token"));
          }
        }
        else {
          _$jscoverage['session.js'][102]++;
          if (server.settings.authentication.extensionFunc) {
            _$jscoverage['session.js'][104]++;
            server.settings.authentication.extensionFunc(request, client, (function (user) {
  _$jscoverage['session.js'][106]++;
  if (user) {
    _$jscoverage['session.js'][108]++;
    getOrCreate(user, client);
  }
  else {
    _$jscoverage['session.js'][113]++;
    reply(Err.oauth("invalid_grant", "Unknown local account"));
  }
}));
          }
          else {
            _$jscoverage['session.js'][120]++;
            reply(Err.oauth("unsupported_grant_type", "Unknown or unsupported grant type"));
          }
        }
      }
    }
    else {
      _$jscoverage['session.js'][126]++;
      reply(Err.oauth("invalid_client", "Invalid client identifier or secret"));
    }
  }
  else {
    _$jscoverage['session.js'][132]++;
    reply(Err.oauth("invalid_client", "Invalid client identifier or secret"));
  }
}));
  _$jscoverage['session.js'][136]++;
  function getOrCreate(user, client, action) {
    _$jscoverage['session.js'][138]++;
    if (user === null || (client.scope && client.scope.authorized === true) || (request.scope && request.scope.authorized === true)) {
      _$jscoverage['session.js'][144]++;
      issue();
    }
    else {
      _$jscoverage['session.js'][150]++;
      server.settings.authentication.loadGrantFunc(user._id, client._id, (function (items, err) {
  _$jscoverage['session.js'][152]++;
  if (err === null) {
    _$jscoverage['session.js'][154]++;
    if (items && items.length > 0) {
      _$jscoverage['session.js'][157]++;
      items.sort((function (a, b) {
  _$jscoverage['session.js'][159]++;
  if (a.expiration < b.expiration) {
    _$jscoverage['session.js'][161]++;
    return -1;
  }
  _$jscoverage['session.js'][164]++;
  if (a.expiration > b.expiration) {
    _$jscoverage['session.js'][166]++;
    return 1;
  }
  _$jscoverage['session.js'][169]++;
  return 0;
}));
      _$jscoverage['session.js'][172]++;
      var isAuthorized = false;
      _$jscoverage['session.js'][173]++;
      var now = Utils.getTimestamp();
      _$jscoverage['session.js'][175]++;
      var expired = [];
      _$jscoverage['session.js'][176]++;
      for (var i = 0, il = items.length; i < il; ++i) {
        _$jscoverage['session.js'][178]++;
        if ((items[i].expiration || 0) <= now) {
          _$jscoverage['session.js'][180]++;
          expired.push(items[i]._id);
        }
        else {
          _$jscoverage['session.js'][184]++;
          isAuthorized = true;
        }
}
      _$jscoverage['session.js'][188]++;
      if (expired.length > 0) {
        _$jscoverage['session.js'][190]++;
        server.settings.authentication.removeGrantFunc(expired, (function (err) {
  _$jscoverage['session.js'][194]++;
  if (err) {
    _$jscoverage['session.js'][196]++;
    Log.err(err);
  }
}));
      }
      _$jscoverage['session.js'][201]++;
      if (isAuthorized) {
        _$jscoverage['session.js'][203]++;
        issue();
      }
      else {
        _$jscoverage['session.js'][207]++;
        reply(Err.oauth("invalid_grant", "Client authorization expired"));
      }
    }
    else {
      _$jscoverage['session.js'][212]++;
      reply(Err.oauth("invalid_grant", "Client is not authorized"));
    }
  }
  else {
    _$jscoverage['session.js'][217]++;
    reply(Err.oauth("server_error", "Failed retrieving authorization"));
  }
}));
    }
    _$jscoverage['session.js'][222]++;
    function issue() {
      _$jscoverage['session.js'][229]++;
      var token = {key: Utils.getRandomString(32), algorithm: server.settings.authentication.defaultAlgorithm, client: client._id, scope: client.scope, expiration: Utils.getTimestamp() + (server.settings.authentication.tokenLifetimeSec * 1000)};
      _$jscoverage['session.js'][238]++;
      if (user) {
        _$jscoverage['session.js'][240]++;
        token.user = user._id;
        _$jscoverage['session.js'][241]++;
        token.tos = internals.getLatestTOS(user);
      }
      _$jscoverage['session.js'][244]++;
      var response = {access_token: Utils.encrypt(server.settings.authentication.aes256Keys.oauthToken, token), token_type: "mac", mac_key: token.key, mac_algorithm: token.algorithm, expires_in: server.settings.authentication.tokenLifetimeSec, x_tos: token.tos, x_action: action};
      _$jscoverage['session.js'][255]++;
      if (user) {
        _$jscoverage['session.js'][257]++;
        response.refresh_token = Utils.encrypt(server.settings.authentication.aes256Keys.oauthRefresh, {user: user._id, client: client._id});
      }
      _$jscoverage['session.js'][260]++;
      reply(response);
}
}
});
_$jscoverage['session.js'][268]++;
exports.load = (function (token, callback) {
  _$jscoverage['session.js'][270]++;
  if (token) {
    _$jscoverage['session.js'][272]++;
    var session = Utils.decrypt(server.settings.authentication.aes256Keys.oauthToken, token);
    _$jscoverage['session.js'][273]++;
    if (session) {
      _$jscoverage['session.js'][275]++;
      if (session.expiration && session.expiration > Utils.getTimestamp()) {
        _$jscoverage['session.js'][280]++;
        session.id = token;
        _$jscoverage['session.js'][281]++;
        callback(session);
      }
      else {
        _$jscoverage['session.js'][286]++;
        callback(null);
      }
    }
    else {
      _$jscoverage['session.js'][292]++;
      callback(null);
    }
  }
  else {
    _$jscoverage['session.js'][298]++;
    callback(null);
  }
});
_$jscoverage['session.js'][305]++;
exports.validate = (function (message, token, mac, callback) {
  _$jscoverage['session.js'][307]++;
  exports.load(token, (function (session) {
  _$jscoverage['session.js'][309]++;
  if (session && session.algorithm && session.key && session.user) {
    _$jscoverage['session.js'][316]++;
    var hashMethod = null;
    _$jscoverage['session.js'][317]++;
    switch (session.algorithm) {
    case "hmac-sha-1":
      _$jscoverage['session.js'][319]++;
      hashMethod = "sha1";
      _$jscoverage['session.js'][319]++;
      break;
    case "hmac-sha-256":
      _$jscoverage['session.js'][320]++;
      hashMethod = "sha256";
      _$jscoverage['session.js'][320]++;
      break;
    }
    _$jscoverage['session.js'][323]++;
    if (hashMethod) {
      _$jscoverage['session.js'][327]++;
      var hmac = Crypto.createHmac(hashMethod, session.key).update(message);
      _$jscoverage['session.js'][328]++;
      var digest = hmac.digest("base64");
      _$jscoverage['session.js'][330]++;
      if (digest === mac) {
        _$jscoverage['session.js'][332]++;
        callback(session.user, null);
      }
      else {
        _$jscoverage['session.js'][337]++;
        callback(null, Err.unauthorized("Invalid mac"));
      }
    }
    else {
      _$jscoverage['session.js'][343]++;
      callback(null, Err.internal("Unknown algorithm"));
    }
  }
  else {
    _$jscoverage['session.js'][349]++;
    callback(null, Err.notFound("Invalid token"));
  }
}));
});
_$jscoverage['session.js'][357]++;
internals.getLatestTOS = (function (user) {
  _$jscoverage['session.js'][359]++;
  if (user && user.tos && typeof user.tos === "object") {
    _$jscoverage['session.js'][363]++;
    var versions = Object.keys(user.tos);
    _$jscoverage['session.js'][364]++;
    if (versions.length > 0) {
      _$jscoverage['session.js'][366]++;
      versions.sort();
      _$jscoverage['session.js'][367]++;
      return versions[versions.length - 1];
    }
  }
  _$jscoverage['session.js'][371]++;
  return 0;
});
_$jscoverage['session.js'][377]++;
internals.compareScope = (function (a, b) {
  _$jscoverage['session.js'][379]++;
  a = a || null;
  _$jscoverage['session.js'][380]++;
  b = b || null;
  _$jscoverage['session.js'][382]++;
  if (a === null && b === null) {
    _$jscoverage['session.js'][384]++;
    return true;
  }
  _$jscoverage['session.js'][387]++;
  if ((a === null && b !== null) || (a !== null && b === null)) {
    _$jscoverage['session.js'][390]++;
    return false;
  }
  _$jscoverage['session.js'][393]++;
  if (Object.keys(a).length !== Object.keys(b).length) {
    _$jscoverage['session.js'][395]++;
    return false;
  }
  _$jscoverage['session.js'][398]++;
  for (var i in a) {
    _$jscoverage['session.js'][400]++;
    if (a.hasOwnProperty(i)) {
      _$jscoverage['session.js'][402]++;
      if (a[i] !== b[i]) {
        _$jscoverage['session.js'][404]++;
        return false;
      }
    }
}
  _$jscoverage['session.js'][409]++;
  return true;
});
_$jscoverage['session.js'].source = ["/*","* Copyright (c) 2012 Walmart. All rights reserved. Copyrights licensed under the New BSD License.","* See LICENSE file included with this code project for license terms.","*/","","// Load modules","","var Crypto = require('crypto');","var Utils = require('./utils');","var Err = require('./error');","var Log = require('./log');","","","// Declare internals","","var internals = {};","","","// Session definitions","","exports.type = {};","","exports.type.endpoint = {","","    grant_type:     { type: 'string', required: true },","    client_id:      { type: 'string', required: true },","    client_secret:  { type: 'string', empty: true },","    refresh_token:  { type: 'string' },","","    x_user_id:      { type: 'string' },","    x_email_token:  { type: 'string' }","};","","exports.type.client = {","","    name:           { type: 'string' },","    secret:         { type: 'string', hide: true },","    scope:          { type: 'object', hide: true }","};","","","// Get session token","","exports.token = function (request, reply) {","","    server.settings.authentication.loadClientFunc(request.payload.client_id, function (client, err) {","","        if (client) {","","            // Check client secret","","            if ((client.secret || '') === (request.payload.client_secret || '')) {","","                // Switch on grant type","","                if (request.payload.grant_type === 'client_credentials') {","","                    // Client credentials (no user context)","","                    getOrCreate(null, client);","                }","                else if (request.payload.grant_type === 'refresh_token') {","","                    // Refresh token","","                    if (request.payload.refresh_token) {","","                        var refresh = Utils.decrypt(server.settings.authentication.aes256Keys.oauthRefresh, request.payload.refresh_token);","                        if (refresh &amp;&amp;","                            refresh.user &amp;&amp;","                            refresh.client) {","","                            if (refresh.client === client._id) {","","                                server.settings.authentication.loadUserFunc(refresh.user, function (user, err) {","","                                    if (user) {","","                                        getOrCreate(user, client);","                                    }","                                    else {","","                                        reply(err);","                                    }","                                });","                            }","                            else {","","                                reply(Err.oauth('invalid_grant', 'Mismatching refresh token client id'));","                            }","                        }","                        else {","","                            reply(Err.oauth('invalid_grant', 'Invalid refresh token'));","                        }","                    }","                    else {","","                        reply(Err.oauth('invalid_request', 'Missing refresh_token'));","                    }","                }","                else if (server.settings.authentication.extensionFunc) {","","                    server.settings.authentication.extensionFunc(request, client, function (user) {","","                        if (user) {","","                            getOrCreate(user, client);","                        }","                        else {","","                            // Unknown local account","                            reply(Err.oauth('invalid_grant', 'Unknown local account'));","                        }","                    });","                }","                else {","","                    // Unsupported grant type","                    reply(Err.oauth('unsupported_grant_type', 'Unknown or unsupported grant type'));","                }","            }","            else {","","                // Bad client authentication","                reply(Err.oauth('invalid_client', 'Invalid client identifier or secret'));","            }","        }","        else {","","            // Unknown client","            reply(Err.oauth('invalid_client', 'Invalid client identifier or secret'));","        }","    });","","    function getOrCreate(user, client, action) {","","        if (user === null ||","            (client.scope &amp;&amp; client.scope.authorized === true) ||","            (request.scope &amp;&amp; request.scope.authorized === true)) {","","            // Client has static authorization","","            issue();","        }","        else {","","            // Lookup authorization","","            server.settings.authentication.loadGrantFunc(user._id, client._id, function (items, err) {","","                if (err === null) {","","                    if (items &amp;&amp;","                        items.length &gt; 0) {","","                        items.sort(function (a, b) {","","                            if (a.expiration &lt; b.expiration) {","","                                return -1;","                            }","","                            if (a.expiration &gt; b.expiration) {","","                                return 1;","                            }","","                            return 0;","                        });","","                        var isAuthorized = false;","                        var now = Utils.getTimestamp();","","                        var expired = [];","                        for (var i = 0, il = items.length; i &lt; il; ++i) {","","                            if ((items[i].expiration || 0) &lt;= now) {","","                                expired.push(items[i]._id);","                            }","                            else {","","                                isAuthorized = true;","                            }","                        }","","                        if (expired.length &gt; 0) {","","                            server.settings.authentication.removeGrantFunc(expired, function (err) {","","                                // Ignore callback","","                                if (err) {","","                                    Log.err(err);","                                }","                            });","                        }","","                        if (isAuthorized) {","","                            issue();","                        }","                        else {","","                            reply(Err.oauth('invalid_grant', 'Client authorization expired'));","                        }","                    }","                    else {","","                        reply(Err.oauth('invalid_grant', 'Client is not authorized'));","                    }","                }","                else {","","                    reply(Err.oauth('server_error', 'Failed retrieving authorization'));","                }","            });","        }","","        function issue() {","","            // Issue a new token","","            // Todo: Check is client has authorization to request a token","            // Todo: Set max expiration based on authorization, make short lived","","            var token = {","","                key: Utils.getRandomString(32),","                algorithm: server.settings.authentication.defaultAlgorithm,","                client: client._id,","                scope: client.scope,","                expiration: Utils.getTimestamp() + (server.settings.authentication.tokenLifetimeSec * 1000)","            };","","            if (user) {","","                token.user = user._id;","                token.tos = internals.getLatestTOS(user);","            }","","            var response = {","","                access_token: Utils.encrypt(server.settings.authentication.aes256Keys.oauthToken, token),","                token_type: 'mac',","                mac_key: token.key,","                mac_algorithm: token.algorithm,","                expires_in: server.settings.authentication.tokenLifetimeSec,","                x_tos: token.tos,","                x_action: action","            };","","            if (user) {","","                response.refresh_token = Utils.encrypt(server.settings.authentication.aes256Keys.oauthRefresh, { user: user._id, client: client._id });","            }","","            reply(response);","        }","    }","};","","","// Get session token","","exports.load = function (token, callback) {","","    if (token) {","","        var session = Utils.decrypt(server.settings.authentication.aes256Keys.oauthToken, token);","        if (session) {","","            if (session.expiration &amp;&amp;","                session.expiration &gt; Utils.getTimestamp()) {","","                // TODO: check against grant database to make sure underlying grant still valid","","                session.id = token;","                callback(session);","            }","            else {","","                // Expired","                callback(null);","            }","        }","        else {","","            // Invalid","            callback(null);","        }","    }","    else {","","        // Empty","        callback(null);","    }","};","","","// Validate message","","exports.validate = function (message, token, mac, callback) {","","    exports.load(token, function (session) {","","        if (session &amp;&amp;","            session.algorithm &amp;&amp;","            session.key &amp;&amp;","            session.user) {","","            // Lookup hash function","","            var hashMethod = null;","            switch (session.algorithm) {","","                case 'hmac-sha-1': hashMethod = 'sha1'; break;","                case 'hmac-sha-256': hashMethod = 'sha256'; break;","            }","","            if (hashMethod) {","","                // Sign message","","                var hmac = Crypto.createHmac(hashMethod, session.key).update(message);","                var digest = hmac.digest('base64');","","                if (digest === mac) {","","                    callback(session.user, null);","                }","                else {","","                    // Invalid signature","                    callback(null, Err.unauthorized('Invalid mac'));","                }","            }","            else {","","                // Invalid algorithm","                callback(null, Err.internal('Unknown algorithm'));","            }","        }","        else {","","            // Invalid token","            callback(null, Err.notFound('Invalid token'));","        }","    });","};","","","// Find latest accepted TOS","","internals.getLatestTOS = function (user) {","","    if (user &amp;&amp;","        user.tos &amp;&amp;","        typeof user.tos === 'object') {","","        var versions = Object.keys(user.tos);","        if (versions.length &gt; 0) {","","            versions.sort();","            return versions[versions.length - 1];","        }","    }","","    return 0;","};","","","// Compare scopes","","internals.compareScope = function (a, b) {","","    a = a || null;","    b = b || null;","","    if (a === null &amp;&amp; b === null) {","","        return true;","    }","","    if ((a === null &amp;&amp; b !== null) ||","        (a !== null &amp;&amp; b === null)) {","","        return false;","    }","","    if (Object.keys(a).length !== Object.keys(b).length) {","","        return false;","    }","","    for (var i in a) {","","        if (a.hasOwnProperty(i)) {","","            if (a[i] !== b[i]) {","","                return false;","            }","        }","    }","","    return true;","};","","",""];
