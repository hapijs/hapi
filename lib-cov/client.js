/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['client.js']) {
  _$jscoverage['client.js'] = [];
  _$jscoverage['client.js'][4] = 0;
  _$jscoverage['client.js'][5] = 0;
  _$jscoverage['client.js'][6] = 0;
  _$jscoverage['client.js'][7] = 0;
  _$jscoverage['client.js'][8] = 0;
  _$jscoverage['client.js'][10] = 0;
  _$jscoverage['client.js'][11] = 0;
  _$jscoverage['client.js'][14] = 0;
  _$jscoverage['client.js'][15] = 0;
  _$jscoverage['client.js'][18] = 0;
  _$jscoverage['client.js'][21] = 0;
  _$jscoverage['client.js'][29] = 0;
  _$jscoverage['client.js'][33] = 0;
  _$jscoverage['client.js'][35] = 0;
  _$jscoverage['client.js'][36] = 0;
  _$jscoverage['client.js'][40] = 0;
  _$jscoverage['client.js'][41] = 0;
  _$jscoverage['client.js'][42] = 0;
  _$jscoverage['client.js'][48] = 0;
  _$jscoverage['client.js'][49] = 0;
  _$jscoverage['client.js'][50] = 0;
  _$jscoverage['client.js'][56] = 0;
  _$jscoverage['client.js'][61] = 0;
  _$jscoverage['client.js'][62] = 0;
  _$jscoverage['client.js'][67] = 0;
  _$jscoverage['client.js'][68] = 0;
  _$jscoverage['client.js'][71] = 0;
  _$jscoverage['client.js'][72] = 0;
  _$jscoverage['client.js'][73] = 0;
  _$jscoverage['client.js'][76] = 0;
  _$jscoverage['client.js'][77] = 0;
  _$jscoverage['client.js'][83] = 0;
  _$jscoverage['client.js'][84] = 0;
  _$jscoverage['client.js'][85] = 0;
  _$jscoverage['client.js'][86] = 0;
  _$jscoverage['client.js'][89] = 0;
  _$jscoverage['client.js'][92] = 0;
  _$jscoverage['client.js'][93] = 0;
  _$jscoverage['client.js'][94] = 0;
  _$jscoverage['client.js'][95] = 0;
  _$jscoverage['client.js'][97] = 0;
  _$jscoverage['client.js'][99] = 0;
  _$jscoverage['client.js'][102] = 0;
  _$jscoverage['client.js'][103] = 0;
  _$jscoverage['client.js'][104] = 0;
  _$jscoverage['client.js'][105] = 0;
  _$jscoverage['client.js'][108] = 0;
  _$jscoverage['client.js'][111] = 0;
}
_$jscoverage['client.js'][4]++;
var fs = require("fs");
_$jscoverage['client.js'][5]++;
var request = require("request");
_$jscoverage['client.js'][6]++;
var querystring = require("querystring");
_$jscoverage['client.js'][7]++;
var url = require("url");
_$jscoverage['client.js'][8]++;
var Utils = require("./utils");
_$jscoverage['client.js'][10]++;
function Client(options) {
  _$jscoverage['client.js'][11]++;
  this.options = Utils.merge(Utils.merge({}, this._options), options || {});
  _$jscoverage['client.js'][14]++;
  if (this.options.safe === true) {
    _$jscoverage['client.js'][15]++;
    this.deferred = this.loadDeferred(this.options.deferredPath);
  }
  _$jscoverage['client.js'][18]++;
  return this;
}
_$jscoverage['client.js'][21]++;
Client.prototype._options = {headers: {}, host: null, version: "*", safe: false, deferredPath: "./log/"};
_$jscoverage['client.js'][29]++;
Client.prototype.defer = (function (opts, err) {
});
_$jscoverage['client.js'][33]++;
Client.prototype.formatURL = (function (host, path) {
  _$jscoverage['client.js'][35]++;
  if (path.indexOf("http") === 0) {
    _$jscoverage['client.js'][36]++;
    return path;
  }
  _$jscoverage['client.js'][40]++;
  if (host.indexOf("http") === 0) {
    _$jscoverage['client.js'][41]++;
    var delim = (path.indexOf("/") == 0? "": "/");
    _$jscoverage['client.js'][42]++;
    return [host, path].filter((function (d) {
  _$jscoverage['client.js'][42]++;
  return d !== null;
})).join(delim);
  }
});
_$jscoverage['client.js'][48]++;
Client.prototype.request = (function (method, path, options, callback) {
  _$jscoverage['client.js'][49]++;
  var self = this;
  _$jscoverage['client.js'][50]++;
  var opts = {method: method, uri: this.formatURL(this.options.host, path)};
  _$jscoverage['client.js'][56]++;
  Utils.merge(opts, options || {});
  _$jscoverage['client.js'][61]++;
  try {
    _$jscoverage['client.js'][62]++;
    opts.json.message.mtimestamp = new Date().getTime();
  }
  catch (e) {
  }
  _$jscoverage['client.js'][67]++;
  require("util").debug(JSON.stringify(opts, null, 2));
  _$jscoverage['client.js'][68]++;
  return callback(null, {}, {});
  _$jscoverage['client.js'][71]++;
  request(opts, (function (err, res, body) {
  _$jscoverage['client.js'][72]++;
  if (self.options.safe === true && err) {
    _$jscoverage['client.js'][73]++;
    self.defer(opts, err);
  }
  _$jscoverage['client.js'][76]++;
  if (callback) {
    _$jscoverage['client.js'][77]++;
    return callback(err, res, body);
  }
}));
});
_$jscoverage['client.js'][83]++;
Client.prototype.get = (function (path, options, callback) {
  _$jscoverage['client.js'][84]++;
  if (typeof options == "function") {
    _$jscoverage['client.js'][85]++;
    callback = options;
    _$jscoverage['client.js'][86]++;
    options = {};
  }
  _$jscoverage['client.js'][89]++;
  this.request("get", path, options, callback);
});
_$jscoverage['client.js'][92]++;
Client.prototype.post = (function (path, data, options, callback) {
  _$jscoverage['client.js'][93]++;
  if (typeof options == "function") {
    _$jscoverage['client.js'][94]++;
    callback = options;
    _$jscoverage['client.js'][95]++;
    options = {};
  }
  _$jscoverage['client.js'][97]++;
  options.json = data;
  _$jscoverage['client.js'][99]++;
  this.request("post", path, options, callback);
});
_$jscoverage['client.js'][102]++;
Client.prototype.head = (function (path, options, callback) {
  _$jscoverage['client.js'][103]++;
  if (typeof options == "function") {
    _$jscoverage['client.js'][104]++;
    callback = options;
    _$jscoverage['client.js'][105]++;
    options = {};
  }
  _$jscoverage['client.js'][108]++;
  this.request("head", path, options, callback);
});
_$jscoverage['client.js'][111]++;
module.exports = Client;
_$jscoverage['client.js'].source = ["/**"," * Module dependencies."," */","var fs = require(\"fs\");","var request = require(\"request\");","var querystring = require(\"querystring\");","var url = require(\"url\");","var Utils = require(\"./utils\");","","function Client(options){","  this.options = Utils.merge(Utils.merge({}, this._options), options || {});","  ","  // Check for unfinished requests (TODO)","  if (this.options.safe === true){","    this.deferred = this.loadDeferred(this.options.deferredPath);","  }","  ","  return this;","}","","Client.prototype._options = {","  headers: {}, // TODO: deprecate?","  host: null,","  version: \"*\", // TODO: deprecate?","  safe: false,","  deferredPath: \"./log/\"","};","","Client.prototype.defer = function(opts, err){","  // TODO: check type of error","};","","Client.prototype.formatURL = function(host, path) {","  // absolute path given","  if (path.indexOf(\"http\") === 0){ ","    return path; ","  }","  ","  // absolute host, relative path","  if (host.indexOf('http') === 0){","    var delim = (path.indexOf(\"/\") == 0 ? '' : '/'); // TODO: this is a nasty hack","    return [host, path].filter(function(d){ return d !== null; }).join(delim);","  }","  ","  // TODO: what are the other cases?","};","","Client.prototype.request = function(method, path, options, callback){","  var self = this;","  var opts = {","    method: method,","    uri: this.formatURL(this.options.host, path)","  };","  ","  // Allow user to set additional options","  Utils.merge(opts, options || {});","    ","  // TODO: handle cookies, attachments, etc...","  ","  // TODO: handle error (like this.options.host = null)","  try {","    opts.json.message.mtimestamp = new Date().getTime();","  } catch (e){","    // Ignore","  }","  ","  require(\"util\").debug(JSON.stringify(opts, null, 2));","  return callback(null, {}, {});","  ","  // Try to make request","  request(opts, function(err, res, body){","    if (self.options.safe === true &amp;&amp; err) {","      self.defer(opts, err);","    }","    ","    if (callback) {","      return callback(err, res, body);","    }","  });","};","","// TODO: refactor http methods into data","Client.prototype.get = function(path, options, callback){","  if (typeof options == \"function\"){","    callback = options;","    options = {};","  }","  ","  this.request('get', path, options, callback);","};","","Client.prototype.post = function(path, data, options, callback){","  if (typeof options == \"function\"){","    callback = options;","    options = {};","  }","  options.json = data;","  ","  this.request('post', path, options, callback);","};","","Client.prototype.head = function(path, options, callback){","  if (typeof options == \"function\"){","    callback = options;","    options = {};","  }","  ","  this.request('head', path, options, callback);","};","","module.exports = Client;"];
